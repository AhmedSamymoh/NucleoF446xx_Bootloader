
Bootloader_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000343c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003600  08003600  00004600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003624  08003624  00005028  2**0
                  CONTENTS
  4 .ARM          00000008  08003624  08003624  00004624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800362c  0800362c  00005028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800362c  0800362c  0000462c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003630  08003630  00004630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08003634  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000028  0800365c  00005028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  0800365c  00005100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a212  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e84  00000000  00000000  0000f26a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  000110f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000706  00000000  00000000  00011a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218ce  00000000  00000000  00012136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba9e  00000000  00000000  00033a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c96a4  00000000  00000000  0003f4a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108b46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024b4  00000000  00000000  00108b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0010b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000028 	.word	0x20000028
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080035e8 	.word	0x080035e8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	080035e8 	.word	0x080035e8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <BL_voidHandle_GetVersion_CMD>:
 * @param copy_pu8CmdPacket Pointer to the command packet containing:
 *        - [0]: Command length
 *        - [1]: Command identifier
 *        - [2-5]: CRC (4 bytes)
 */
void BL_voidHandle_GetVersion_CMD(uint8 * copy_pu8CmdPacket){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	uint8 BL_version[4] = {BL_SW_vendor_ID, BL_SW_major_version, BL_SW_minor_version ,BL_SW_patch_version};
 80004fc:	4b15      	ldr	r3, [pc, #84]	@ (8000554 <BL_voidHandle_GetVersion_CMD+0x60>)
 80004fe:	60bb      	str	r3, [r7, #8]
	uint8 CRCStatus, CmdLen;
	uint32 Host_CRC ; 
	
	CmdLen = copy_pu8CmdPacket[0]+1;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	3301      	adds	r3, #1
 8000506:	75fb      	strb	r3, [r7, #23]

	Host_CRC =  *((uint32 *)(copy_pu8CmdPacket + CmdLen - 4));
 8000508:	7dfb      	ldrb	r3, [r7, #23]
 800050a:	3b04      	subs	r3, #4
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	4413      	add	r3, r2
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	613b      	str	r3, [r7, #16]

	CRCStatus = u8VerifyCRC(copy_pu8CmdPacket , ( CmdLen - 4) , Host_CRC );
 8000514:	7dfb      	ldrb	r3, [r7, #23]
 8000516:	3b04      	subs	r3, #4
 8000518:	b2db      	uxtb	r3, r3
 800051a:	693a      	ldr	r2, [r7, #16]
 800051c:	4619      	mov	r1, r3
 800051e:	6878      	ldr	r0, [r7, #4]
 8000520:	f000 fa36 	bl	8000990 <u8VerifyCRC>
 8000524:	4603      	mov	r3, r0
 8000526:	73fb      	strb	r3, [r7, #15]

	if(CRCStatus == CRC_VERIFING_PASS){
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d10b      	bne.n	8000546 <BL_voidHandle_GetVersion_CMD+0x52>
		voidSendAck(4);
 800052e:	2004      	movs	r0, #4
 8000530:	f000 fa66 	bl	8000a00 <voidSendAck>
		HAL_UART_Transmit(&huart2,(uint8 *)BL_version,4, HAL_MAX_DELAY);
 8000534:	f107 0108 	add.w	r1, r7, #8
 8000538:	f04f 33ff 	mov.w	r3, #4294967295
 800053c:	2204      	movs	r2, #4
 800053e:	4806      	ldr	r0, [pc, #24]	@ (8000558 <BL_voidHandle_GetVersion_CMD+0x64>)
 8000540:	f002 fbd4 	bl	8002cec <HAL_UART_Transmit>
	}else{
		voidSendNotAck();
	}
}
 8000544:	e001      	b.n	800054a <BL_voidHandle_GetVersion_CMD+0x56>
		voidSendNotAck();
 8000546:	f000 fa73 	bl	8000a30 <voidSendNotAck>
}
 800054a:	bf00      	nop
 800054c:	3718      	adds	r7, #24
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	01020201 	.word	0x01020201
 8000558:	2000004c 	.word	0x2000004c

0800055c <BL_voidHandle_GetHelp_CMD>:
 *        - [0]: Command length
 *        - [1]: Command identifier
 *        - [2-5]: CRC (4 bytes)
 * 
 */
void BL_voidHandle_GetHelp_CMD(uint8 * copy_pu8CmdPacket){
 800055c:	b580      	push	{r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	uint8 CRCStatus, CmdLen;
	uint32 Host_CRC ;

	CmdLen = copy_pu8CmdPacket[0]+1;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	3301      	adds	r3, #1
 800056a:	77fb      	strb	r3, [r7, #31]
	Host_CRC =  *((uint32 *)(copy_pu8CmdPacket + CmdLen - 4));
 800056c:	7ffb      	ldrb	r3, [r7, #31]
 800056e:	3b04      	subs	r3, #4
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	4413      	add	r3, r2
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	61bb      	str	r3, [r7, #24]

	CRCStatus = u8VerifyCRC(copy_pu8CmdPacket , ( CmdLen - 4) , Host_CRC );
 8000578:	7ffb      	ldrb	r3, [r7, #31]
 800057a:	3b04      	subs	r3, #4
 800057c:	b2db      	uxtb	r3, r3
 800057e:	69ba      	ldr	r2, [r7, #24]
 8000580:	4619      	mov	r1, r3
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f000 fa04 	bl	8000990 <u8VerifyCRC>
 8000588:	4603      	mov	r3, r0
 800058a:	75fb      	strb	r3, [r7, #23]

	if(CRCStatus == CRC_VERIFING_PASS){
 800058c:	7dfb      	ldrb	r3, [r7, #23]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d111      	bne.n	80005b6 <BL_voidHandle_GetHelp_CMD+0x5a>

		uint8 BL_Supported_CMDs[] = {
 8000592:	4a0c      	ldr	r2, [pc, #48]	@ (80005c4 <BL_voidHandle_GetHelp_CMD+0x68>)
 8000594:	f107 0308 	add.w	r3, r7, #8
 8000598:	ca07      	ldmia	r2, {r0, r1, r2}
 800059a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				BL_CMD_READ_SECTOR_STATUS ,
				BL_CMD_OTP_READ           ,
				BL_CMD_DISABLE_RW_PROTECT
		};

		voidSendAck(sizeof(BL_Supported_CMDs));
 800059e:	200c      	movs	r0, #12
 80005a0:	f000 fa2e 	bl	8000a00 <voidSendAck>
		HAL_UART_Transmit(&huart2,(uint8 *)BL_Supported_CMDs,sizeof(BL_Supported_CMDs), HAL_MAX_DELAY);
 80005a4:	f107 0108 	add.w	r1, r7, #8
 80005a8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ac:	220c      	movs	r2, #12
 80005ae:	4806      	ldr	r0, [pc, #24]	@ (80005c8 <BL_voidHandle_GetHelp_CMD+0x6c>)
 80005b0:	f002 fb9c 	bl	8002cec <HAL_UART_Transmit>
	}else{
		voidSendNotAck();
	}

}
 80005b4:	e001      	b.n	80005ba <BL_voidHandle_GetHelp_CMD+0x5e>
		voidSendNotAck();
 80005b6:	f000 fa3b 	bl	8000a30 <voidSendNotAck>
}
 80005ba:	bf00      	nop
 80005bc:	3720      	adds	r7, #32
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	08003600 	.word	0x08003600
 80005c8:	2000004c 	.word	0x2000004c

080005cc <BL_voidHandle_GetChipID_CMD>:
 * @param copy_pu8CmdPacket Pointer to the command packet containing:
 *        - [0]: Command length
 *        - [1]: Command identifier
 *        - [2-5]: CRC (4 bytes)
 */
void BL_voidHandle_GetChipID_CMD(uint8 * copy_pu8CmdPacket){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	uint8 CRCStatus, CmdLen;
	uint32 Host_CRC ;
	uint16 DeviceID;

	CmdLen = copy_pu8CmdPacket[0]+1;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	75fb      	strb	r3, [r7, #23]

	Host_CRC =  *((uint32 *)(copy_pu8CmdPacket + CmdLen - 4));
 80005dc:	7dfb      	ldrb	r3, [r7, #23]
 80005de:	3b04      	subs	r3, #4
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	4413      	add	r3, r2
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	613b      	str	r3, [r7, #16]

	CRCStatus = u8VerifyCRC(copy_pu8CmdPacket , ( CmdLen - 4) , Host_CRC );
 80005e8:	7dfb      	ldrb	r3, [r7, #23]
 80005ea:	3b04      	subs	r3, #4
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	693a      	ldr	r2, [r7, #16]
 80005f0:	4619      	mov	r1, r3
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f000 f9cc 	bl	8000990 <u8VerifyCRC>
 80005f8:	4603      	mov	r3, r0
 80005fa:	73fb      	strb	r3, [r7, #15]

	if(CRCStatus == CRC_VERIFING_PASS){
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d112      	bne.n	8000628 <BL_voidHandle_GetChipID_CMD+0x5c>
		/* DEV_ID[11:0]: Device identifier*/
		DeviceID = (DBG_MCU_ID_REG & 0x0fff);
 8000602:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <BL_voidHandle_GetChipID_CMD+0x68>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	b29b      	uxth	r3, r3
 8000608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800060c:	b29b      	uxth	r3, r3
 800060e:	81bb      	strh	r3, [r7, #12]

		voidSendAck(2);
 8000610:	2002      	movs	r0, #2
 8000612:	f000 f9f5 	bl	8000a00 <voidSendAck>
		HAL_UART_Transmit(&huart2,(uint8 *)&DeviceID,2, HAL_MAX_DELAY);
 8000616:	f107 010c 	add.w	r1, r7, #12
 800061a:	f04f 33ff 	mov.w	r3, #4294967295
 800061e:	2202      	movs	r2, #2
 8000620:	4805      	ldr	r0, [pc, #20]	@ (8000638 <BL_voidHandle_GetChipID_CMD+0x6c>)
 8000622:	f002 fb63 	bl	8002cec <HAL_UART_Transmit>
	}else{
		voidSendNotAck();
	}
}
 8000626:	e001      	b.n	800062c <BL_voidHandle_GetChipID_CMD+0x60>
		voidSendNotAck();
 8000628:	f000 fa02 	bl	8000a30 <voidSendNotAck>
}
 800062c:	bf00      	nop
 800062e:	3718      	adds	r7, #24
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	e0042000 	.word	0xe0042000
 8000638:	2000004c 	.word	0x2000004c

0800063c <BL_voidHandle_GetRDPStatus_CMD>:
 *        - [0]: Command length
 *        - [1]: Command identifier
 *        - [2-5]: RDP user option word (for checking status)
 *        - [6-9]: CRC (4 bytes)
 */
void BL_voidHandle_GetRDPStatus_CMD(uint8 * copy_pu8CmdPacket){
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	uint8 CRCStatus, CmdLen;
	uint32 Host_CRC ;
	uint8 RDP_Status;

	CmdLen = copy_pu8CmdPacket[0]+1;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	3301      	adds	r3, #1
 800064a:	75fb      	strb	r3, [r7, #23]

	Host_CRC =  *((uint32 *)(copy_pu8CmdPacket + CmdLen - 4));
 800064c:	7dfb      	ldrb	r3, [r7, #23]
 800064e:	3b04      	subs	r3, #4
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	4413      	add	r3, r2
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	613b      	str	r3, [r7, #16]

	CRCStatus = u8VerifyCRC(copy_pu8CmdPacket , ( CmdLen - 4) , Host_CRC );
 8000658:	7dfb      	ldrb	r3, [r7, #23]
 800065a:	3b04      	subs	r3, #4
 800065c:	b2db      	uxtb	r3, r3
 800065e:	693a      	ldr	r2, [r7, #16]
 8000660:	4619      	mov	r1, r3
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f000 f994 	bl	8000990 <u8VerifyCRC>
 8000668:	4603      	mov	r3, r0
 800066a:	73fb      	strb	r3, [r7, #15]

	if(CRCStatus == CRC_VERIFING_PASS){
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d110      	bne.n	8000694 <BL_voidHandle_GetRDPStatus_CMD+0x58>
		RDP_Status = (uint8)((RDP_USER_OPTION_WORD >> 8) & 0xff );
 8000672:	4b0b      	ldr	r3, [pc, #44]	@ (80006a0 <BL_voidHandle_GetRDPStatus_CMD+0x64>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	0a1b      	lsrs	r3, r3, #8
 8000678:	b2db      	uxtb	r3, r3
 800067a:	73bb      	strb	r3, [r7, #14]
		voidSendAck(1);
 800067c:	2001      	movs	r0, #1
 800067e:	f000 f9bf 	bl	8000a00 <voidSendAck>
		HAL_UART_Transmit(&huart2,&RDP_Status,1, HAL_MAX_DELAY);
 8000682:	f107 010e 	add.w	r1, r7, #14
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
 800068a:	2201      	movs	r2, #1
 800068c:	4805      	ldr	r0, [pc, #20]	@ (80006a4 <BL_voidHandle_GetRDPStatus_CMD+0x68>)
 800068e:	f002 fb2d 	bl	8002cec <HAL_UART_Transmit>
	}else{
		voidSendNotAck();
	}
}
 8000692:	e001      	b.n	8000698 <BL_voidHandle_GetRDPStatus_CMD+0x5c>
		voidSendNotAck();
 8000694:	f000 f9cc 	bl	8000a30 <voidSendNotAck>
}
 8000698:	bf00      	nop
 800069a:	3718      	adds	r7, #24
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	1fffc000 	.word	0x1fffc000
 80006a4:	2000004c 	.word	0x2000004c

080006a8 <BL_voidHandle_GoToAddress_CMD>:
 *   - [0]: Command length
 *   - [1]: Command identifier
 *   - [2-5]: Target address to jump to (4 bytes)
 *   - [6-9]: CRC (4 bytes)
 */
void BL_voidHandle_GoToAddress_CMD(uint8 * copy_pu8CmdPacket){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	uint8 CRCStatus, CmdLen;
	uint32 Host_CRC ;
	uint32 HOST_Address;
	BL_Address_Status_t Address_Status;

	CmdLen = copy_pu8CmdPacket[0]+1;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	3301      	adds	r3, #1
 80006b6:	77fb      	strb	r3, [r7, #31]

	Host_CRC =  *((uint32 *)(copy_pu8CmdPacket + CmdLen - 4));
 80006b8:	7ffb      	ldrb	r3, [r7, #31]
 80006ba:	3b04      	subs	r3, #4
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	4413      	add	r3, r2
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	61bb      	str	r3, [r7, #24]

	CRCStatus = u8VerifyCRC(copy_pu8CmdPacket , ( CmdLen - 4) , Host_CRC );
 80006c4:	7ffb      	ldrb	r3, [r7, #31]
 80006c6:	3b04      	subs	r3, #4
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	69ba      	ldr	r2, [r7, #24]
 80006cc:	4619      	mov	r1, r3
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f000 f95e 	bl	8000990 <u8VerifyCRC>
 80006d4:	4603      	mov	r3, r0
 80006d6:	75fb      	strb	r3, [r7, #23]

	if(CRCStatus == CRC_VERIFING_PASS){
 80006d8:	7dfb      	ldrb	r3, [r7, #23]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d123      	bne.n	8000726 <BL_voidHandle_GoToAddress_CMD+0x7e>
		/*reading address given by the host*/
		HOST_Address = *((uint32 *)(&copy_pu8CmdPacket[2]));
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80006e4:	613b      	str	r3, [r7, #16]
		Address_Status = ValidateAddress(HOST_Address);
 80006e6:	6938      	ldr	r0, [r7, #16]
 80006e8:	f000 f9b4 	bl	8000a54 <ValidateAddress>
 80006ec:	4603      	mov	r3, r0
 80006ee:	72fb      	strb	r3, [r7, #11]
		if(Address_Status == Address_VALID){
 80006f0:	7afb      	ldrb	r3, [r7, #11]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d114      	bne.n	8000720 <BL_voidHandle_GoToAddress_CMD+0x78>
			voidSendAck(1);
 80006f6:	2001      	movs	r0, #1
 80006f8:	f000 f982 	bl	8000a00 <voidSendAck>
			HAL_UART_Transmit(&huart2,&Address_Status,1, HAL_MAX_DELAY);
 80006fc:	f107 010b 	add.w	r1, r7, #11
 8000700:	f04f 33ff 	mov.w	r3, #4294967295
 8000704:	2201      	movs	r2, #1
 8000706:	480b      	ldr	r0, [pc, #44]	@ (8000734 <BL_voidHandle_GoToAddress_CMD+0x8c>)
 8000708:	f002 faf0 	bl	8002cec <HAL_UART_Transmit>

			/*Define a pointer to function*/
			void (*pvFuncPtr)(void) = NULL;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
			/*increment address by 1 to make t-bit = 1
			 * as t-bit (Thumb-bit) to assure operating in Thumb state */
			HOST_Address ++;
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	3301      	adds	r3, #1
 8000714:	613b      	str	r3, [r7, #16]

			pvFuncPtr = (void *)HOST_Address;
 8000716:	693b      	ldr	r3, [r7, #16]
 8000718:	60fb      	str	r3, [r7, #12]

			/*Jump to the given address*/
			pvFuncPtr();
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	4798      	blx	r3
			voidSendNotAck();
		}
	}else{
		voidSendNotAck();
	}
}
 800071e:	e004      	b.n	800072a <BL_voidHandle_GoToAddress_CMD+0x82>
			voidSendNotAck();
 8000720:	f000 f986 	bl	8000a30 <voidSendNotAck>
}
 8000724:	e001      	b.n	800072a <BL_voidHandle_GoToAddress_CMD+0x82>
		voidSendNotAck();
 8000726:	f000 f983 	bl	8000a30 <voidSendNotAck>
}
 800072a:	bf00      	nop
 800072c:	3720      	adds	r7, #32
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	2000004c 	.word	0x2000004c

08000738 <BL_voidHandle_FlashErase_CMD>:
 *        - [2]: Sector number (1 byte)
 *        - [3]: Number of sectors (1 byte)
 *        - [4-8]: CRC (4 bytes)
 * 
 */
void BL_voidHandle_FlashErase_CMD(uint8 * copy_pu8CmdPacket){
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	uint8 CRCStatus, CmdLen;
	uint32 Host_CRC ;
	HAL_StatusTypeDef EraseStatus;
	uint8 SectorNumber, NumberOfSectors;
	BL_EraseFlag_t EraseFlash_Status = ERASE_FLAG_UNFOUND;
 8000740:	2300      	movs	r3, #0
 8000742:	75fb      	strb	r3, [r7, #23]

	CmdLen = copy_pu8CmdPacket[0]+1;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	3301      	adds	r3, #1
 800074a:	75bb      	strb	r3, [r7, #22]

	Host_CRC =  *((uint32 *)(copy_pu8CmdPacket + CmdLen - 4));
 800074c:	7dbb      	ldrb	r3, [r7, #22]
 800074e:	3b04      	subs	r3, #4
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	4413      	add	r3, r2
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	613b      	str	r3, [r7, #16]

	CRCStatus = u8VerifyCRC(copy_pu8CmdPacket , ( CmdLen - 4) , Host_CRC );
 8000758:	7dbb      	ldrb	r3, [r7, #22]
 800075a:	3b04      	subs	r3, #4
 800075c:	b2db      	uxtb	r3, r3
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	4619      	mov	r1, r3
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f000 f914 	bl	8000990 <u8VerifyCRC>
 8000768:	4603      	mov	r3, r0
 800076a:	73fb      	strb	r3, [r7, #15]

	SectorNumber = copy_pu8CmdPacket[2];
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	789b      	ldrb	r3, [r3, #2]
 8000770:	73bb      	strb	r3, [r7, #14]
	NumberOfSectors = copy_pu8CmdPacket[3];
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	78db      	ldrb	r3, [r3, #3]
 8000776:	737b      	strb	r3, [r7, #13]

	if(CRCStatus == CRC_VERIFING_PASS){
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d129      	bne.n	80007d2 <BL_voidHandle_FlashErase_CMD+0x9a>
		voidSendAck(1);
 800077e:	2001      	movs	r0, #1
 8000780:	f000 f93e 	bl	8000a00 <voidSendAck>

		/*Toggling led while Erasing*/
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2120      	movs	r1, #32
 8000788:	4815      	ldr	r0, [pc, #84]	@ (80007e0 <BL_voidHandle_FlashErase_CMD+0xa8>)
 800078a:	f001 fc5d 	bl	8002048 <HAL_GPIO_WritePin>

		/*Start Erasing Initialization*/
		EraseStatus = u8Execute_FlashErase(SectorNumber, NumberOfSectors);
 800078e:	7b7a      	ldrb	r2, [r7, #13]
 8000790:	7bbb      	ldrb	r3, [r7, #14]
 8000792:	4611      	mov	r1, r2
 8000794:	4618      	mov	r0, r3
 8000796:	f000 f985 	bl	8000aa4 <u8Execute_FlashErase>
 800079a:	4603      	mov	r3, r0
 800079c:	733b      	strb	r3, [r7, #12]
		
		/*Flashing Erase Flag*/
		voidSet_EraseFlag();
 800079e:	f000 fa31 	bl	8000c04 <voidSet_EraseFlag>

		/*Verfiy if Erase Flag been written*/
		EraseFlash_Status = VerfiyErase_Flag();
 80007a2:	f000 fa41 	bl	8000c28 <VerfiyErase_Flag>
 80007a6:	4603      	mov	r3, r0
 80007a8:	75fb      	strb	r3, [r7, #23]

		if(EraseFlash_Status == ERASE_FLAG_FOUND){
 80007aa:	7dfb      	ldrb	r3, [r7, #23]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d108      	bne.n	80007c2 <BL_voidHandle_FlashErase_CMD+0x8a>
			/*Sending the HAL_ErrorStatus*/
			HAL_UART_Transmit(&huart2,&EraseStatus,1, HAL_MAX_DELAY);
 80007b0:	f107 010c 	add.w	r1, r7, #12
 80007b4:	f04f 33ff 	mov.w	r3, #4294967295
 80007b8:	2201      	movs	r2, #1
 80007ba:	480a      	ldr	r0, [pc, #40]	@ (80007e4 <BL_voidHandle_FlashErase_CMD+0xac>)
 80007bc:	f002 fa96 	bl	8002cec <HAL_UART_Transmit>
 80007c0:	e001      	b.n	80007c6 <BL_voidHandle_FlashErase_CMD+0x8e>
		}else{
			voidSendNotAck();
 80007c2:	f000 f935 	bl	8000a30 <voidSendNotAck>
		}

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2120      	movs	r1, #32
 80007ca:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <BL_voidHandle_FlashErase_CMD+0xa8>)
 80007cc:	f001 fc3c 	bl	8002048 <HAL_GPIO_WritePin>

	}else{
		voidSendNotAck();
	}
}
 80007d0:	e001      	b.n	80007d6 <BL_voidHandle_FlashErase_CMD+0x9e>
		voidSendNotAck();
 80007d2:	f000 f92d 	bl	8000a30 <voidSendNotAck>
}
 80007d6:	bf00      	nop
 80007d8:	3718      	adds	r7, #24
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40020000 	.word	0x40020000
 80007e4:	2000004c 	.word	0x2000004c

080007e8 <BL_voidHandle_MemoryWrite_CMD>:
 *        - [6]: Payload length (1 byte)
 *        - [7-N]: Payload data
 *        - [N+1-N+4]: CRC (4 bytes)
 * 
 */
void BL_voidHandle_MemoryWrite_CMD(uint8 * copy_pu8CmdPacket){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	uint32 BaseAddress;
	BL_Address_Status_t Address_Status;
	BL_FlashPayload_Status_t FlashWriting_Status;
	uint8 Payload_Length;

	CmdLen = copy_pu8CmdPacket[0]+1;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	3301      	adds	r3, #1
 80007f6:	75fb      	strb	r3, [r7, #23]

	Host_CRC =  *((uint32 *)(copy_pu8CmdPacket + CmdLen - 4));
 80007f8:	7dfb      	ldrb	r3, [r7, #23]
 80007fa:	3b04      	subs	r3, #4
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	4413      	add	r3, r2
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	613b      	str	r3, [r7, #16]

	/*Extract the base - 4 bytes - address given*/
	BaseAddress = *((uint32 *)(&copy_pu8CmdPacket[2]));
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800080a:	60fb      	str	r3, [r7, #12]
	/*Extract the Payload Length given */
	Payload_Length = copy_pu8CmdPacket[6];
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	799b      	ldrb	r3, [r3, #6]
 8000810:	72fb      	strb	r3, [r7, #11]

	CRCStatus = u8VerifyCRC(copy_pu8CmdPacket , ( CmdLen - 4) , Host_CRC );
 8000812:	7dfb      	ldrb	r3, [r7, #23]
 8000814:	3b04      	subs	r3, #4
 8000816:	b2db      	uxtb	r3, r3
 8000818:	693a      	ldr	r2, [r7, #16]
 800081a:	4619      	mov	r1, r3
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f000 f8b7 	bl	8000990 <u8VerifyCRC>
 8000822:	4603      	mov	r3, r0
 8000824:	72bb      	strb	r3, [r7, #10]

	if(CRCStatus == CRC_VERIFING_PASS){
 8000826:	7abb      	ldrb	r3, [r7, #10]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d11f      	bne.n	800086c <BL_voidHandle_MemoryWrite_CMD+0x84>
		voidSendAck(1);
 800082c:	2001      	movs	r0, #1
 800082e:	f000 f8e7 	bl	8000a00 <voidSendAck>

		/*Validate Address give by the user not to exceed the FLASH or SRAM regions*/
		Address_Status = ValidateAddress(BaseAddress);
 8000832:	68f8      	ldr	r0, [r7, #12]
 8000834:	f000 f90e 	bl	8000a54 <ValidateAddress>
 8000838:	4603      	mov	r3, r0
 800083a:	727b      	strb	r3, [r7, #9]

		if(Address_Status == Address_VALID){
 800083c:	7a7b      	ldrb	r3, [r7, #9]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d109      	bne.n	8000856 <BL_voidHandle_MemoryWrite_CMD+0x6e>
			FlashWriting_Status = u8Execute_MemoryWrite(&copy_pu8CmdPacket[7], BaseAddress, Payload_Length);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	3307      	adds	r3, #7
 8000846:	7afa      	ldrb	r2, [r7, #11]
 8000848:	68f9      	ldr	r1, [r7, #12]
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f984 	bl	8000b58 <u8Execute_MemoryWrite>
 8000850:	4603      	mov	r3, r0
 8000852:	723b      	strb	r3, [r7, #8]
 8000854:	e001      	b.n	800085a <BL_voidHandle_MemoryWrite_CMD+0x72>
		}else{
			FlashWriting_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000856:	2300      	movs	r3, #0
 8000858:	723b      	strb	r3, [r7, #8]
		}

		HAL_UART_Transmit(&huart2,&FlashWriting_Status,1, HAL_MAX_DELAY);
 800085a:	f107 0108 	add.w	r1, r7, #8
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
 8000862:	2201      	movs	r2, #1
 8000864:	4804      	ldr	r0, [pc, #16]	@ (8000878 <BL_voidHandle_MemoryWrite_CMD+0x90>)
 8000866:	f002 fa41 	bl	8002cec <HAL_UART_Transmit>

	}else{
		voidSendNotAck();
	}
}
 800086a:	e001      	b.n	8000870 <BL_voidHandle_MemoryWrite_CMD+0x88>
		voidSendNotAck();
 800086c:	f000 f8e0 	bl	8000a30 <voidSendNotAck>
}
 8000870:	bf00      	nop
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	2000004c 	.word	0x2000004c

0800087c <BL_voidHandle_EnableRWProtect_CMD>:



void BL_voidHandle_EnableRWProtect_CMD(uint8 * copy_pu8CmdPacket){
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	uint32 Host_CRC ;
	uint8 Sector_Details;

	BL_Sector_Protection_Mode_t ProtectionMode;

	CmdLen = copy_pu8CmdPacket[0]+1;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	3301      	adds	r3, #1
 800088a:	75fb      	strb	r3, [r7, #23]

	Host_CRC =  *((uint32 *)(copy_pu8CmdPacket + CmdLen - 4));
 800088c:	7dfb      	ldrb	r3, [r7, #23]
 800088e:	3b04      	subs	r3, #4
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	4413      	add	r3, r2
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	613b      	str	r3, [r7, #16]

	CRCStatus = u8VerifyCRC(copy_pu8CmdPacket , ( CmdLen - 4) , Host_CRC );
 8000898:	7dfb      	ldrb	r3, [r7, #23]
 800089a:	3b04      	subs	r3, #4
 800089c:	b2db      	uxtb	r3, r3
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	4619      	mov	r1, r3
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f000 f874 	bl	8000990 <u8VerifyCRC>
 80008a8:	4603      	mov	r3, r0
 80008aa:	73fb      	strb	r3, [r7, #15]

	/*Extract Sector R/W Protection*/
	Sector_Details = copy_pu8CmdPacket[2];
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	789b      	ldrb	r3, [r3, #2]
 80008b0:	73bb      	strb	r3, [r7, #14]
	/*Extract Sector Protection Mode*/
	ProtectionMode = copy_pu8CmdPacket[3];
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3303      	adds	r3, #3
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	737b      	strb	r3, [r7, #13]


	if(CRCStatus == CRC_VERIFING_PASS){
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d137      	bne.n	8000930 <BL_voidHandle_EnableRWProtect_CMD+0xb4>

		voidSendAck(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f000 f89d 	bl	8000a00 <voidSendAck>

		if (ProtectionMode == SECTOR_W_PROTECTION){
 80008c6:	7b7b      	ldrb	r3, [r7, #13]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d118      	bne.n	80008fe <BL_voidHandle_EnableRWProtect_CMD+0x82>
			HAL_FLASH_OB_Unlock();
 80008cc:	f000 ff6e 	bl	80017ac <HAL_FLASH_OB_Unlock>
			while (FLASH->SR & FLASH_SR_BSY_Pos);
 80008d0:	bf00      	nop
 80008d2:	4b1a      	ldr	r3, [pc, #104]	@ (800093c <BL_voidHandle_EnableRWProtect_CMD+0xc0>)
 80008d4:	68db      	ldr	r3, [r3, #12]
 80008d6:	f003 0310 	and.w	r3, r3, #16
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d1f9      	bne.n	80008d2 <BL_voidHandle_EnableRWProtect_CMD+0x56>
			/*set SPRMOD to 0 for write protection */
			Clr_BIT(FLASH->OPTCR, FLASH_OPTCR_SPRMOD_Pos);
 80008de:	4b17      	ldr	r3, [pc, #92]	@ (800093c <BL_voidHandle_EnableRWProtect_CMD+0xc0>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	4a16      	ldr	r2, [pc, #88]	@ (800093c <BL_voidHandle_EnableRWProtect_CMD+0xc0>)
 80008e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80008e8:	6153      	str	r3, [r2, #20]

            /* Apply protection bits (inverted)*/
            FLASH->OPTCR |= (~Sector_Details << FLASH_OPTCR_nWRP_Pos);
 80008ea:	4b14      	ldr	r3, [pc, #80]	@ (800093c <BL_voidHandle_EnableRWProtect_CMD+0xc0>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	7bba      	ldrb	r2, [r7, #14]
 80008f0:	43d2      	mvns	r2, r2
 80008f2:	0412      	lsls	r2, r2, #16
 80008f4:	4611      	mov	r1, r2
 80008f6:	4a11      	ldr	r2, [pc, #68]	@ (800093c <BL_voidHandle_EnableRWProtect_CMD+0xc0>)
 80008f8:	430b      	orrs	r3, r1
 80008fa:	6153      	str	r3, [r2, #20]
 80008fc:	e013      	b.n	8000926 <BL_voidHandle_EnableRWProtect_CMD+0xaa>

		}else if (ProtectionMode == SECTOR_WR_PROTECTION){
 80008fe:	7b7b      	ldrb	r3, [r7, #13]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d110      	bne.n	8000926 <BL_voidHandle_EnableRWProtect_CMD+0xaa>
			HAL_FLASH_OB_Unlock();
 8000904:	f000 ff52 	bl	80017ac <HAL_FLASH_OB_Unlock>
			/* Set SPRMOD to 1 for PCROP protection */
			Set_BIT(FLASH->OPTCR, FLASH_OPTCR_SPRMOD_Pos);
 8000908:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <BL_voidHandle_EnableRWProtect_CMD+0xc0>)
 800090a:	695b      	ldr	r3, [r3, #20]
 800090c:	4a0b      	ldr	r2, [pc, #44]	@ (800093c <BL_voidHandle_EnableRWProtect_CMD+0xc0>)
 800090e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000912:	6153      	str	r3, [r2, #20]

            /* Apply protection bits (inverted)*/
            FLASH->OPTCR |= (~Sector_Details << FLASH_OPTCR_nWRP_Pos);
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <BL_voidHandle_EnableRWProtect_CMD+0xc0>)
 8000916:	695b      	ldr	r3, [r3, #20]
 8000918:	7bba      	ldrb	r2, [r7, #14]
 800091a:	43d2      	mvns	r2, r2
 800091c:	0412      	lsls	r2, r2, #16
 800091e:	4611      	mov	r1, r2
 8000920:	4a06      	ldr	r2, [pc, #24]	@ (800093c <BL_voidHandle_EnableRWProtect_CMD+0xc0>)
 8000922:	430b      	orrs	r3, r1
 8000924:	6153      	str	r3, [r2, #20]
		}else{

		}
		HAL_FLASH_OB_Launch();
 8000926:	f000 ff6d 	bl	8001804 <HAL_FLASH_OB_Launch>
		HAL_FLASH_OB_Lock();
 800092a:	f000 ff5b 	bl	80017e4 <HAL_FLASH_OB_Lock>
		//HAL_UART_Transmit(&huart2,&RDP_Status,1, HAL_MAX_DELAY);
	}else{
		voidSendNotAck();
	}
}
 800092e:	e001      	b.n	8000934 <BL_voidHandle_EnableRWProtect_CMD+0xb8>
		voidSendNotAck();
 8000930:	f000 f87e 	bl	8000a30 <voidSendNotAck>
}
 8000934:	bf00      	nop
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40023c00 	.word	0x40023c00

08000940 <BL_voidHandle_MemoryRead_CMD>:

void BL_voidHandle_MemoryRead_CMD(uint8 * copy_pu8CmdPacket){
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <BL_voidHandle_ReadSectorStatus_CMD>:

void BL_voidHandle_ReadSectorStatus_CMD(uint8 * copy_pu8CmdPacket){
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <BL_voidHandle_OTPRead_CMD>:

void BL_voidHandle_OTPRead_CMD(uint8 * copy_pu8CmdPacket){
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
}
 8000970:	bf00      	nop
 8000972:	370c      	adds	r7, #12
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <BL_voidHandle_DisableRWProtect_CMD>:

void BL_voidHandle_DisableRWProtect_CMD(uint8 * copy_pu8CmdPacket){
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]

}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <u8VerifyCRC>:
 * @param copy_u32HostCRC Host-provided CRC value for comparison.
 * @return uint8 Status of CRC verification:
 *         - CRC_VERIFING_PASS if CRC matches.
 *         - CRC_VERIFING_FAILED otherwise.
 */
static uint8 u8VerifyCRC(uint8 * copy_pu8DataArr, uint8 copy_u8Length, uint32 copy_u32HostCRC){
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	460b      	mov	r3, r1
 800099a:	607a      	str	r2, [r7, #4]
 800099c:	72fb      	strb	r3, [r7, #11]
    uint8 Local_u8CRCStatus = CRC_VERIFING_FAILED;
 800099e:	2300      	movs	r3, #0
 80009a0:	77fb      	strb	r3, [r7, #31]
	uint8 Local_u8Iterator;
	uint32_t Local_u32AccCRC, Local_u32Temp;

	for(Local_u8Iterator=0; Local_u8Iterator < copy_u8Length; Local_u8Iterator++){
 80009a2:	2300      	movs	r3, #0
 80009a4:	77bb      	strb	r3, [r7, #30]
 80009a6:	e00f      	b.n	80009c8 <u8VerifyCRC+0x38>
		Local_u32Temp = copy_pu8DataArr[Local_u8Iterator];
 80009a8:	7fbb      	ldrb	r3, [r7, #30]
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	4413      	add	r3, r2
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	617b      	str	r3, [r7, #20]
		Local_u32AccCRC= HAL_CRC_Accumulate(&hcrc, &Local_u32Temp , 1);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	2201      	movs	r2, #1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4810      	ldr	r0, [pc, #64]	@ (80009fc <u8VerifyCRC+0x6c>)
 80009bc:	f000 fe55 	bl	800166a <HAL_CRC_Accumulate>
 80009c0:	61b8      	str	r0, [r7, #24]
	for(Local_u8Iterator=0; Local_u8Iterator < copy_u8Length; Local_u8Iterator++){
 80009c2:	7fbb      	ldrb	r3, [r7, #30]
 80009c4:	3301      	adds	r3, #1
 80009c6:	77bb      	strb	r3, [r7, #30]
 80009c8:	7fba      	ldrb	r2, [r7, #30]
 80009ca:	7afb      	ldrb	r3, [r7, #11]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d3eb      	bcc.n	80009a8 <u8VerifyCRC+0x18>
	}
	/*Reset CRC Calculation Unit*/
	__HAL_CRC_DR_RESET(&hcrc);
 80009d0:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <u8VerifyCRC+0x6c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	689a      	ldr	r2, [r3, #8]
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <u8VerifyCRC+0x6c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f042 0201 	orr.w	r2, r2, #1
 80009de:	609a      	str	r2, [r3, #8]

	if(Local_u32AccCRC == copy_u32HostCRC)
 80009e0:	69ba      	ldr	r2, [r7, #24]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d102      	bne.n	80009ee <u8VerifyCRC+0x5e>
		Local_u8CRCStatus = CRC_VERIFING_PASS;
 80009e8:	2301      	movs	r3, #1
 80009ea:	77fb      	strb	r3, [r7, #31]
 80009ec:	e001      	b.n	80009f2 <u8VerifyCRC+0x62>
	else
		Local_u8CRCStatus = CRC_VERIFING_FAILED;
 80009ee:	2300      	movs	r3, #0
 80009f0:	77fb      	strb	r3, [r7, #31]

	return Local_u8CRCStatus;
 80009f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3720      	adds	r7, #32
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000044 	.word	0x20000044

08000a00 <voidSendAck>:
/**
 * @brief Sending Ack when The host request a service from the bootloader
 * 
 * @param copy_u8ReplyLength 
 */
static void voidSendAck(uint8 copy_u8ReplyLength){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
	/*The  sending frame is [ACK BYTE , Replay Length of the next freme]*/
	uint8 Local_u8AckBuffer[2]={BL_ACK , copy_u8ReplyLength};
 8000a0a:	23a5      	movs	r3, #165	@ 0xa5
 8000a0c:	733b      	strb	r3, [r7, #12]
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	737b      	strb	r3, [r7, #13]

	/*sending the Local_u8AckBuffer array*/
	HAL_UART_Transmit(&huart2, Local_u8AckBuffer ,2 ,HAL_MAX_DELAY);
 8000a12:	f107 010c 	add.w	r1, r7, #12
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	4803      	ldr	r0, [pc, #12]	@ (8000a2c <voidSendAck+0x2c>)
 8000a1e:	f002 f965 	bl	8002cec <HAL_UART_Transmit>
}
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000004c 	.word	0x2000004c

08000a30 <voidSendNotAck>:
/**
 * @brief Sending Ack when The host request a service from the bootloader
 * 
 * @param copy_u8ReplyLength 
 */
static void voidSendNotAck(void){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
	/*The  sending frame is [ACK BYTE , Replay Length of the next freme]*/
	uint8 Local_u8NAck={BL_NOT_ACK};
 8000a36:	237f      	movs	r3, #127	@ 0x7f
 8000a38:	71fb      	strb	r3, [r7, #7]

	/*sending the Local_u8AckBuffer array*/
	HAL_UART_Transmit(&huart2, &Local_u8NAck ,2 ,HAL_MAX_DELAY);
 8000a3a:	1df9      	adds	r1, r7, #7
 8000a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a40:	2202      	movs	r2, #2
 8000a42:	4803      	ldr	r0, [pc, #12]	@ (8000a50 <voidSendNotAck+0x20>)
 8000a44:	f002 f952 	bl	8002cec <HAL_UART_Transmit>
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2000004c 	.word	0x2000004c

08000a54 <ValidateAddress>:
 * @param u32Address The 32-bit address to validate.
 * @return BL_Address_Status_t 
 *         - Address_VALID if the address is within the Flash or SRAM regions.
 *         - Address_INVALID otherwise.
 */
static BL_Address_Status_t ValidateAddress(uint32 u32Address){
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	BL_Address_Status_t Address_Status;
	/*Address is VALID if it is within : SRAM or FLASH*/

	if ( (u32Address >= STM32F446xx_FLASH_BASE ) && ( u32Address <= STM32F446xx_FLASH_END )){
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000a62:	d306      	bcc.n	8000a72 <ValidateAddress+0x1e>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a0d      	ldr	r2, [pc, #52]	@ (8000a9c <ValidateAddress+0x48>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d802      	bhi.n	8000a72 <ValidateAddress+0x1e>
		Address_Status = Address_VALID;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	73fb      	strb	r3, [r7, #15]
 8000a70:	e00c      	b.n	8000a8c <ValidateAddress+0x38>

	}else if ( (u32Address >= STM32F446xx_SRAM1_BASE ) && ( u32Address <= STM32F446xx_SRAM1_END )){
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a78:	d306      	bcc.n	8000a88 <ValidateAddress+0x34>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a08      	ldr	r2, [pc, #32]	@ (8000aa0 <ValidateAddress+0x4c>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d802      	bhi.n	8000a88 <ValidateAddress+0x34>
		Address_Status = Address_VALID;
 8000a82:	2301      	movs	r3, #1
 8000a84:	73fb      	strb	r3, [r7, #15]
 8000a86:	e001      	b.n	8000a8c <ValidateAddress+0x38>
	}else{
		Address_Status = Address_INVALID;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Status;
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	0807ffff 	.word	0x0807ffff
 8000aa0:	20020000 	.word	0x20020000

08000aa4 <u8Execute_FlashErase>:

//
static HAL_StatusTypeDef u8Execute_FlashErase(uint8 copy_u8SectorNumber, uint8 copy_u8NumberOfSectors){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	@ 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	460a      	mov	r2, r1
 8000aae:	71fb      	strb	r3, [r7, #7]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef ErrorStatus = HAL_OK;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint32_t SectorError;
	FLASH_EraseInitTypeDef Flash_Erase;
	uint32 EraseFlag_Value;

	if((copy_u8SectorNumber > 8) & (copy_u8SectorNumber != 0xff)){
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b08      	cmp	r3, #8
 8000abe:	bf8c      	ite	hi
 8000ac0:	2301      	movhi	r3, #1
 8000ac2:	2300      	movls	r3, #0
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2bff      	cmp	r3, #255	@ 0xff
 8000aca:	bf14      	ite	ne
 8000acc:	2301      	movne	r3, #1
 8000ace:	2300      	moveq	r3, #0
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <u8Execute_FlashErase+0x3e>
		ErrorStatus = HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000ae0:	e033      	b.n	8000b4a <u8Execute_FlashErase+0xa6>
	}else if ((copy_u8SectorNumber > 7) && (copy_u8SectorNumber != 0xff)){
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b07      	cmp	r3, #7
 8000ae6:	d906      	bls.n	8000af6 <u8Execute_FlashErase+0x52>
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	2bff      	cmp	r3, #255	@ 0xff
 8000aec:	d003      	beq.n	8000af6 <u8Execute_FlashErase+0x52>
		ErrorStatus = HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000af4:	e029      	b.n	8000b4a <u8Execute_FlashErase+0xa6>
	}else{
		if(copy_u8SectorNumber == 0xff){
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2bff      	cmp	r3, #255	@ 0xff
 8000afa:	d102      	bne.n	8000b02 <u8Execute_FlashErase+0x5e>
			Flash_Erase.TypeErase=FLASH_TYPEERASE_MASSERASE;
 8000afc:	2301      	movs	r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	e012      	b.n	8000b28 <u8Execute_FlashErase+0x84>
		}else{
			uint8 RemainingSectors = 8 - copy_u8SectorNumber;
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	f1c3 0308 	rsb	r3, r3, #8
 8000b08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			/*if number of sectors is bigger than max, make it equal to the maximum*/
			if(copy_u8NumberOfSectors > RemainingSectors){
 8000b0c:	79ba      	ldrb	r2, [r7, #6]
 8000b0e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d902      	bls.n	8000b1c <u8Execute_FlashErase+0x78>
				copy_u8NumberOfSectors = RemainingSectors;
 8000b16:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000b1a:	71bb      	strb	r3, [r7, #6]
			}else{
				/*Nothing*/
			}

			Flash_Erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
			Flash_Erase.Sector = copy_u8SectorNumber;
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	617b      	str	r3, [r7, #20]
			Flash_Erase.NbSectors = copy_u8NumberOfSectors;
 8000b24:	79bb      	ldrb	r3, [r7, #6]
 8000b26:	61bb      	str	r3, [r7, #24]
		}

		Flash_Erase.Banks = FLASH_BANK_1;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	613b      	str	r3, [r7, #16]
		Flash_Erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	61fb      	str	r3, [r7, #28]
		/*Unlock the flash before erasing*/
		HAL_FLASH_Unlock();
 8000b30:	f000 fe1a 	bl	8001768 <HAL_FLASH_Unlock>
		/*Start Erasing*/
		ErrorStatus = HAL_FLASHEx_Erase(&Flash_Erase, &SectorError);
 8000b34:	f107 0220 	add.w	r2, r7, #32
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 ffb4 	bl	8001aac <HAL_FLASHEx_Erase>
 8000b44:	4603      	mov	r3, r0
 8000b46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	}
	return ErrorStatus;
 8000b4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3728      	adds	r7, #40	@ 0x28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <u8Execute_MemoryWrite>:
 * @param Copy_u8Length The length of the data to be written (in bytes).
 * 
 * @return uint8 The status of the memory write operation (HAL_OK if successful) @HAL_StatusTypeDef
 * 
 */
static uint8 u8Execute_MemoryWrite(uint8 * Copy_pu8Buffer, uint32 Copy_u32Address, uint8 Copy_u8Length){
 8000b58:	b5b0      	push	{r4, r5, r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	4613      	mov	r3, r2
 8000b64:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ErrorStatus = HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	757b      	strb	r3, [r7, #21]

	if((Copy_u32Address >= STM32F446xx_FLASH_BASE)&&(Copy_u32Address <= STM32F446xx_FLASH_END)){
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000b70:	d320      	bcc.n	8000bb4 <u8Execute_MemoryWrite+0x5c>
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	4a21      	ldr	r2, [pc, #132]	@ (8000bfc <u8Execute_MemoryWrite+0xa4>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d81c      	bhi.n	8000bb4 <u8Execute_MemoryWrite+0x5c>
		/*Writing in FLASH Case*/
		uint8 iterator;
		/*Unlock the flash before writing*/
		HAL_FLASH_Unlock();
 8000b7a:	f000 fdf5 	bl	8001768 <HAL_FLASH_Unlock>

		for(iterator = 0; iterator <Copy_u8Length; iterator ++){
 8000b7e:	2300      	movs	r3, #0
 8000b80:	75fb      	strb	r3, [r7, #23]
 8000b82:	e012      	b.n	8000baa <u8Execute_MemoryWrite+0x52>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE , (Copy_u32Address + iterator) , (uint64)Copy_pu8Buffer[iterator] );
 8000b84:	7dfa      	ldrb	r2, [r7, #23]
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	18d1      	adds	r1, r2, r3
 8000b8a:	7dfb      	ldrb	r3, [r7, #23]
 8000b8c:	68fa      	ldr	r2, [r7, #12]
 8000b8e:	4413      	add	r3, r2
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	2200      	movs	r2, #0
 8000b96:	461c      	mov	r4, r3
 8000b98:	4615      	mov	r5, r2
 8000b9a:	4622      	mov	r2, r4
 8000b9c:	462b      	mov	r3, r5
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f000 fd8e 	bl	80016c0 <HAL_FLASH_Program>
		for(iterator = 0; iterator <Copy_u8Length; iterator ++){
 8000ba4:	7dfb      	ldrb	r3, [r7, #23]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	75fb      	strb	r3, [r7, #23]
 8000baa:	7dfa      	ldrb	r2, [r7, #23]
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d3e8      	bcc.n	8000b84 <u8Execute_MemoryWrite+0x2c>
	if((Copy_u32Address >= STM32F446xx_FLASH_BASE)&&(Copy_u32Address <= STM32F446xx_FLASH_END)){
 8000bb2:	e01d      	b.n	8000bf0 <u8Execute_MemoryWrite+0x98>
		}
	}else if((Copy_u32Address >= STM32F446xx_SRAM1_BASE ) && ( Copy_u32Address <= STM32F446xx_SRAM1_END )){
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000bba:	d319      	bcc.n	8000bf0 <u8Execute_MemoryWrite+0x98>
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	4a10      	ldr	r2, [pc, #64]	@ (8000c00 <u8Execute_MemoryWrite+0xa8>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d815      	bhi.n	8000bf0 <u8Execute_MemoryWrite+0x98>
		/*Writing in SRAM Case*/
		uint8 iterator;

		HAL_FLASH_Unlock();
 8000bc4:	f000 fdd0 	bl	8001768 <HAL_FLASH_Unlock>

		uint8 * Destination = (uint8 *)Copy_u32Address;
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	613b      	str	r3, [r7, #16]

		for(iterator = 0; iterator <Copy_u8Length; iterator ++){
 8000bcc:	2300      	movs	r3, #0
 8000bce:	75bb      	strb	r3, [r7, #22]
 8000bd0:	e00a      	b.n	8000be8 <u8Execute_MemoryWrite+0x90>
			Destination[iterator] = Copy_pu8Buffer[iterator];
 8000bd2:	7dbb      	ldrb	r3, [r7, #22]
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	441a      	add	r2, r3
 8000bd8:	7dbb      	ldrb	r3, [r7, #22]
 8000bda:	6939      	ldr	r1, [r7, #16]
 8000bdc:	440b      	add	r3, r1
 8000bde:	7812      	ldrb	r2, [r2, #0]
 8000be0:	701a      	strb	r2, [r3, #0]
		for(iterator = 0; iterator <Copy_u8Length; iterator ++){
 8000be2:	7dbb      	ldrb	r3, [r7, #22]
 8000be4:	3301      	adds	r3, #1
 8000be6:	75bb      	strb	r3, [r7, #22]
 8000be8:	7dba      	ldrb	r2, [r7, #22]
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d3f0      	bcc.n	8000bd2 <u8Execute_MemoryWrite+0x7a>
		}
	}

	return ErrorStatus;
 8000bf0:	7d7b      	ldrb	r3, [r7, #21]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	0807ffff 	.word	0x0807ffff
 8000c00:	20020000 	.word	0x20020000

08000c04 <voidSet_EraseFlag>:

/**
 * @brief Sets the erase flag by writing a predefined value to the erase flag memory location.
 * 
 */
static void voidSet_EraseFlag(void){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
	uint8 EraseFlag[] = {0x74,0x74,0x74,0x74};
 8000c0a:	f04f 3374 	mov.w	r3, #1953789044	@ 0x74747474
 8000c0e:	607b      	str	r3, [r7, #4]
	u8Execute_MemoryWrite(EraseFlag, ERASE_FLAG_ADDR, 4);
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2204      	movs	r2, #4
 8000c14:	4903      	ldr	r1, [pc, #12]	@ (8000c24 <voidSet_EraseFlag+0x20>)
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ff9e 	bl	8000b58 <u8Execute_MemoryWrite>

}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	08007ff0 	.word	0x08007ff0

08000c28 <VerfiyErase_Flag>:
 * @return BL_EraseFlag_t 
 *         - ERASE_FLAG_FOUND if the flag value matches `ERASE_FLAG_SET`.
 *         - ERASE_FLAG_UNFOUND if the flag value does not match `ERASE_FLAG_SET
 * 
 */
static BL_EraseFlag_t VerfiyErase_Flag(void){
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
	BL_EraseFlag_t status = ERASE_FLAG_UNFOUND;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	71fb      	strb	r3, [r7, #7]
	uint32 EraseFlag_Value;

	EraseFlag_Value = *((volatile uint32*)ERASE_FLAG_ADDR);
 8000c32:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <VerfiyErase_Flag+0x30>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	603b      	str	r3, [r7, #0]

	if(EraseFlag_Value == ERASE_FLAG_SET){
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	f1b3 3f74 	cmp.w	r3, #1953789044	@ 0x74747474
 8000c3e:	d102      	bne.n	8000c46 <VerfiyErase_Flag+0x1e>
		status = ERASE_FLAG_FOUND;
 8000c40:	2301      	movs	r3, #1
 8000c42:	71fb      	strb	r3, [r7, #7]
 8000c44:	e001      	b.n	8000c4a <VerfiyErase_Flag+0x22>
	}else{
		status = ERASE_FLAG_UNFOUND;
 8000c46:	2300      	movs	r3, #0
 8000c48:	71fb      	strb	r3, [r7, #7]
	}
	return status;
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	08007ff0 	.word	0x08007ff0

08000c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c60:	f000 fb6c 	bl	800133c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c64:	f000 f828 	bl	8000cb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c68:	f000 f8fc 	bl	8000e64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c6c:	f000 f8a6 	bl	8000dbc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000c70:	f000 f8ce 	bl	8000e10 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000c74:	f000 f88e 	bl	8000d94 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 8000c78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c7c:	480b      	ldr	r0, [pc, #44]	@ (8000cac <main+0x50>)
 8000c7e:	f001 f9cb 	bl	8002018 <HAL_GPIO_ReadPin>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <main+0x32>
	  Bootloader_UartReadData();
 8000c88:	f000 f95a 	bl	8000f40 <Bootloader_UartReadData>
 8000c8c:	e001      	b.n	8000c92 <main+0x36>
  }else{
	  Bootloader_JumpToApp();
 8000c8e:	f000 f9e3 	bl	8001058 <Bootloader_JumpToApp>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	 HAL_UART_Transmit(&huart2, (uint8_t*)HelloBootloader, sizeof(HelloBootloader), HAL_MAX_DELAY);
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	2219      	movs	r2, #25
 8000c98:	4905      	ldr	r1, [pc, #20]	@ (8000cb0 <main+0x54>)
 8000c9a:	4806      	ldr	r0, [pc, #24]	@ (8000cb4 <main+0x58>)
 8000c9c:	f002 f826 	bl	8002cec <HAL_UART_Transmit>
	 HAL_Delay(1000);
 8000ca0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ca4:	f000 fbbc 	bl	8001420 <HAL_Delay>
	 HAL_UART_Transmit(&huart2, (uint8_t*)HelloBootloader, sizeof(HelloBootloader), HAL_MAX_DELAY);
 8000ca8:	bf00      	nop
 8000caa:	e7f2      	b.n	8000c92 <main+0x36>
 8000cac:	40020800 	.word	0x40020800
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	2000004c 	.word	0x2000004c

08000cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b094      	sub	sp, #80	@ 0x50
 8000cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	2234      	movs	r2, #52	@ 0x34
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f002 fc62 	bl	8003590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ccc:	f107 0308 	add.w	r3, r7, #8
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d8c <SystemClock_Config+0xd4>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce4:	4a29      	ldr	r2, [pc, #164]	@ (8000d8c <SystemClock_Config+0xd4>)
 8000ce6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cec:	4b27      	ldr	r3, [pc, #156]	@ (8000d8c <SystemClock_Config+0xd4>)
 8000cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	4b24      	ldr	r3, [pc, #144]	@ (8000d90 <SystemClock_Config+0xd8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d04:	4a22      	ldr	r2, [pc, #136]	@ (8000d90 <SystemClock_Config+0xd8>)
 8000d06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	4b20      	ldr	r3, [pc, #128]	@ (8000d90 <SystemClock_Config+0xd8>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d20:	2310      	movs	r3, #16
 8000d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d24:	2302      	movs	r3, #2
 8000d26:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d2c:	2310      	movs	r3, #16
 8000d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d30:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d34:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d36:	2304      	movs	r3, #4
 8000d38:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	4618      	mov	r0, r3
 8000d48:	f001 fce2 	bl	8002710 <HAL_RCC_OscConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d52:	f000 f999 	bl	8001088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d56:	230f      	movs	r3, #15
 8000d58:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d6c:	f107 0308 	add.w	r3, r7, #8
 8000d70:	2102      	movs	r1, #2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 f982 	bl	800207c <HAL_RCC_ClockConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000d7e:	f000 f983 	bl	8001088 <Error_Handler>
  }
}
 8000d82:	bf00      	nop
 8000d84:	3750      	adds	r7, #80	@ 0x50
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40007000 	.word	0x40007000

08000d94 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <MX_CRC_Init+0x20>)
 8000d9a:	4a07      	ldr	r2, [pc, #28]	@ (8000db8 <MX_CRC_Init+0x24>)
 8000d9c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d9e:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <MX_CRC_Init+0x20>)
 8000da0:	f000 fc47 	bl	8001632 <HAL_CRC_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000daa:	f000 f96d 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000044 	.word	0x20000044
 8000db8:	40023000 	.word	0x40023000

08000dbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dc2:	4a12      	ldr	r2, [pc, #72]	@ (8000e0c <MX_USART2_UART_Init+0x50>)
 8000dc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dc6:	4b10      	ldr	r3, [pc, #64]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de0:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000de2:	220c      	movs	r2, #12
 8000de4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de6:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dec:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000df2:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <MX_USART2_UART_Init+0x4c>)
 8000df4:	f001 ff2a 	bl	8002c4c <HAL_UART_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dfe:	f000 f943 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	2000004c 	.word	0x2000004c
 8000e0c:	40004400 	.word	0x40004400

08000e10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e14:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e16:	4a12      	ldr	r2, [pc, #72]	@ (8000e60 <MX_USART3_UART_Init+0x50>)
 8000e18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e1a:	4b10      	ldr	r3, [pc, #64]	@ (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e34:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e36:	220c      	movs	r2, #12
 8000e38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e3a:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e46:	4805      	ldr	r0, [pc, #20]	@ (8000e5c <MX_USART3_UART_Init+0x4c>)
 8000e48:	f001 ff00 	bl	8002c4c <HAL_UART_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e52:	f000 f919 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000094 	.word	0x20000094
 8000e60:	40004800 	.word	0x40004800

08000e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	@ 0x28
 8000e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f34 <MX_GPIO_Init+0xd0>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	4a2c      	ldr	r2, [pc, #176]	@ (8000f34 <MX_GPIO_Init+0xd0>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f34 <MX_GPIO_Init+0xd0>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b26      	ldr	r3, [pc, #152]	@ (8000f34 <MX_GPIO_Init+0xd0>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	4a25      	ldr	r2, [pc, #148]	@ (8000f34 <MX_GPIO_Init+0xd0>)
 8000ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea6:	4b23      	ldr	r3, [pc, #140]	@ (8000f34 <MX_GPIO_Init+0xd0>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f34 <MX_GPIO_Init+0xd0>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a1e      	ldr	r2, [pc, #120]	@ (8000f34 <MX_GPIO_Init+0xd0>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f34 <MX_GPIO_Init+0xd0>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	4b18      	ldr	r3, [pc, #96]	@ (8000f34 <MX_GPIO_Init+0xd0>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a17      	ldr	r2, [pc, #92]	@ (8000f34 <MX_GPIO_Init+0xd0>)
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ede:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <MX_GPIO_Init+0xd0>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2120      	movs	r1, #32
 8000eee:	4812      	ldr	r0, [pc, #72]	@ (8000f38 <MX_GPIO_Init+0xd4>)
 8000ef0:	f001 f8aa 	bl	8002048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ef4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000efa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4619      	mov	r1, r3
 8000f0a:	480c      	ldr	r0, [pc, #48]	@ (8000f3c <MX_GPIO_Init+0xd8>)
 8000f0c:	f000 fef0 	bl	8001cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f10:	2320      	movs	r3, #32
 8000f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4619      	mov	r1, r3
 8000f26:	4804      	ldr	r0, [pc, #16]	@ (8000f38 <MX_GPIO_Init+0xd4>)
 8000f28:	f000 fee2 	bl	8001cf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f2c:	bf00      	nop
 8000f2e:	3728      	adds	r7, #40	@ 0x28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	40020800 	.word	0x40020800

08000f40 <Bootloader_UartReadData>:

/* USER CODE BEGIN 4 */
/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/


void Bootloader_UartReadData(void){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b0c0      	sub	sp, #256	@ 0x100
 8000f44:	af00      	add	r7, sp, #0

	/*This function is used to read commands from host*/

	uint8_t Local_u8CmdPacket[255] = {0};
 8000f46:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000f4a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	3304      	adds	r3, #4
 8000f54:	22fb      	movs	r2, #251	@ 0xfb
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f002 fb19 	bl	8003590 <memset>
	while(1)
	{
		/*Clear the command packet every iteration*/
		memset(Local_u8CmdPacket ,0 ,255);
 8000f5e:	463b      	mov	r3, r7
 8000f60:	22ff      	movs	r2, #255	@ 0xff
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f002 fb13 	bl	8003590 <memset>
		/*read the "length to follow" field command*/
		HAL_UART_Receive(&huart2, Local_u8CmdPacket, 1, HAL_MAX_DELAY);
 8000f6a:	4639      	mov	r1, r7
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f70:	2201      	movs	r2, #1
 8000f72:	4838      	ldr	r0, [pc, #224]	@ (8001054 <Bootloader_UartReadData+0x114>)
 8000f74:	f001 ff45 	bl	8002e02 <HAL_UART_Receive>

		/*read the rest of the command, its size is the previous byte*/
		HAL_UART_Receive(&huart2, &Local_u8CmdPacket[1] , Local_u8CmdPacket[0],HAL_MAX_DELAY);
 8000f78:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000f7c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	463b      	mov	r3, r7
 8000f86:	1c59      	adds	r1, r3, #1
 8000f88:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8c:	4831      	ldr	r0, [pc, #196]	@ (8001054 <Bootloader_UartReadData+0x114>)
 8000f8e:	f001 ff38 	bl	8002e02 <HAL_UART_Receive>

		/*Check the command code, then handle the command*/
		switch(Local_u8CmdPacket[1]){
 8000f92:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000f96:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000f9a:	785b      	ldrb	r3, [r3, #1]
 8000f9c:	3b51      	subs	r3, #81	@ 0x51
 8000f9e:	2b0b      	cmp	r3, #11
 8000fa0:	d856      	bhi.n	8001050 <Bootloader_UartReadData+0x110>
 8000fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8000fa8 <Bootloader_UartReadData+0x68>)
 8000fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa8:	08000fd9 	.word	0x08000fd9
 8000fac:	08000fe3 	.word	0x08000fe3
 8000fb0:	08000fed 	.word	0x08000fed
 8000fb4:	08000ff7 	.word	0x08000ff7
 8000fb8:	08001001 	.word	0x08001001
 8000fbc:	0800100b 	.word	0x0800100b
 8000fc0:	08001015 	.word	0x08001015
 8000fc4:	0800101f 	.word	0x0800101f
 8000fc8:	08001029 	.word	0x08001029
 8000fcc:	08001033 	.word	0x08001033
 8000fd0:	0800103d 	.word	0x0800103d
 8000fd4:	08001047 	.word	0x08001047
			case BL_CMD_GET_VER            : BL_voidHandle_GetVersion_CMD(Local_u8CmdPacket);       break;
 8000fd8:	463b      	mov	r3, r7
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fa8a 	bl	80004f4 <BL_voidHandle_GetVersion_CMD>
 8000fe0:	e037      	b.n	8001052 <Bootloader_UartReadData+0x112>
			case BL_CMD_GET_HELP           : BL_voidHandle_GetHelp_CMD(Local_u8CmdPacket);   	    break;
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fab9 	bl	800055c <BL_voidHandle_GetHelp_CMD>
 8000fea:	e032      	b.n	8001052 <Bootloader_UartReadData+0x112>
			case BL_CMD_GET_CHIP_ID        : BL_voidHandle_GetChipID_CMD(Local_u8CmdPacket);   	    break;
 8000fec:	463b      	mov	r3, r7
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff faec 	bl	80005cc <BL_voidHandle_GetChipID_CMD>
 8000ff4:	e02d      	b.n	8001052 <Bootloader_UartReadData+0x112>
			case BL_CMD_GET_RDP_STATUS     : BL_voidHandle_GetRDPStatus_CMD(Local_u8CmdPacket);     break;
 8000ff6:	463b      	mov	r3, r7
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fb1f 	bl	800063c <BL_voidHandle_GetRDPStatus_CMD>
 8000ffe:	e028      	b.n	8001052 <Bootloader_UartReadData+0x112>
			case BL_CMD_GO_TO_ADDR         : BL_voidHandle_GoToAddress_CMD(Local_u8CmdPacket);      break;
 8001000:	463b      	mov	r3, r7
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fb50 	bl	80006a8 <BL_voidHandle_GoToAddress_CMD>
 8001008:	e023      	b.n	8001052 <Bootloader_UartReadData+0x112>
			case BL_CMD_FLASH_ERASE        : BL_voidHandle_FlashErase_CMD(Local_u8CmdPacket);       break;
 800100a:	463b      	mov	r3, r7
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff fb93 	bl	8000738 <BL_voidHandle_FlashErase_CMD>
 8001012:	e01e      	b.n	8001052 <Bootloader_UartReadData+0x112>
			case BL_CMD_MEM_WRITE          : BL_voidHandle_MemoryWrite_CMD(Local_u8CmdPacket);      break;
 8001014:	463b      	mov	r3, r7
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fbe6 	bl	80007e8 <BL_voidHandle_MemoryWrite_CMD>
 800101c:	e019      	b.n	8001052 <Bootloader_UartReadData+0x112>
			case BL_CMD_ENABLE_RW_PROTECT  : BL_voidHandle_EnableRWProtect_CMD(Local_u8CmdPacket);  break;
 800101e:	463b      	mov	r3, r7
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fc2b 	bl	800087c <BL_voidHandle_EnableRWProtect_CMD>
 8001026:	e014      	b.n	8001052 <Bootloader_UartReadData+0x112>
			case BL_CMD_MEM_READ           : BL_voidHandle_MemoryRead_CMD(Local_u8CmdPacket);       break;
 8001028:	463b      	mov	r3, r7
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fc88 	bl	8000940 <BL_voidHandle_MemoryRead_CMD>
 8001030:	e00f      	b.n	8001052 <Bootloader_UartReadData+0x112>
			case BL_CMD_READ_SECTOR_STATUS : BL_voidHandle_ReadSectorStatus_CMD(Local_u8CmdPacket); break;
 8001032:	463b      	mov	r3, r7
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fc8d 	bl	8000954 <BL_voidHandle_ReadSectorStatus_CMD>
 800103a:	e00a      	b.n	8001052 <Bootloader_UartReadData+0x112>
			case BL_CMD_OTP_READ           : BL_voidHandle_OTPRead_CMD(Local_u8CmdPacket);          break;
 800103c:	463b      	mov	r3, r7
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fc92 	bl	8000968 <BL_voidHandle_OTPRead_CMD>
 8001044:	e005      	b.n	8001052 <Bootloader_UartReadData+0x112>
			case BL_CMD_DISABLE_RW_PROTECT : BL_voidHandle_DisableRWProtect_CMD(Local_u8CmdPacket); break;
 8001046:	463b      	mov	r3, r7
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fc97 	bl	800097c <BL_voidHandle_DisableRWProtect_CMD>
 800104e:	e000      	b.n	8001052 <Bootloader_UartReadData+0x112>

			default:
				break;
 8001050:	bf00      	nop
		memset(Local_u8CmdPacket ,0 ,255);
 8001052:	e784      	b.n	8000f5e <Bootloader_UartReadData+0x1e>
 8001054:	2000004c 	.word	0x2000004c

08001058 <Bootloader_JumpToApp>:





void Bootloader_JumpToApp(void){
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0

	/* Configure MSP of user app by reading value from base addres of sector2 */
	uint32_t Local_u32MSPVal = *((volatile uint32_t*)(0x08008000));
 800105e:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <Bootloader_JumpToApp+0x28>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	60fb      	str	r3, [r7, #12]
	 * MSR -> Move Special Register
	 * MSP -> Main stack pointer register
	 * %0 receive variable:output:input
	 * "r" for register
	 * */
	__asm volatile("MSR MSP, %0"::"r"(Local_u32MSPVal));
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f383 8808 	msr	MSP, r3

	/*Get reset handler address of user app*/
	ResetHandlerAddress = *((volatile uint32_t *)( 0x08008000UL + 4 ));
 800106a:	4b06      	ldr	r3, [pc, #24]	@ (8001084 <Bootloader_JumpToApp+0x2c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	60bb      	str	r3, [r7, #8]

	App_ResetHandler = (void *)ResetHandlerAddress;
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	607b      	str	r3, [r7, #4]

	/*Jump to the user app reset handler*/
	App_ResetHandler();
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4798      	blx	r3
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	08008000 	.word	0x08008000
 8001084:	08008004 	.word	0x08008004

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <Error_Handler+0x8>

08001094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <HAL_MspInit+0x4c>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a2:	4a0f      	ldr	r2, [pc, #60]	@ (80010e0 <HAL_MspInit+0x4c>)
 80010a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010aa:	4b0d      	ldr	r3, [pc, #52]	@ (80010e0 <HAL_MspInit+0x4c>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <HAL_MspInit+0x4c>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010be:	4a08      	ldr	r2, [pc, #32]	@ (80010e0 <HAL_MspInit+0x4c>)
 80010c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_MspInit+0x4c>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010d2:	2007      	movs	r0, #7
 80010d4:	f000 fa7a 	bl	80015cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40023800 	.word	0x40023800

080010e4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001120 <HAL_CRC_MspInit+0x3c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d10d      	bne.n	8001112 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001124 <HAL_CRC_MspInit+0x40>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	4a09      	ldr	r2, [pc, #36]	@ (8001124 <HAL_CRC_MspInit+0x40>)
 8001100:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001104:	6313      	str	r3, [r2, #48]	@ 0x30
 8001106:	4b07      	ldr	r3, [pc, #28]	@ (8001124 <HAL_CRC_MspInit+0x40>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40023000 	.word	0x40023000
 8001124:	40023800 	.word	0x40023800

08001128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08c      	sub	sp, #48	@ 0x30
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 031c 	add.w	r3, r7, #28
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a41      	ldr	r2, [pc, #260]	@ (800124c <HAL_UART_MspInit+0x124>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d12c      	bne.n	80011a4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
 800114e:	4b40      	ldr	r3, [pc, #256]	@ (8001250 <HAL_UART_MspInit+0x128>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	4a3f      	ldr	r2, [pc, #252]	@ (8001250 <HAL_UART_MspInit+0x128>)
 8001154:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001158:	6413      	str	r3, [r2, #64]	@ 0x40
 800115a:	4b3d      	ldr	r3, [pc, #244]	@ (8001250 <HAL_UART_MspInit+0x128>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001162:	61bb      	str	r3, [r7, #24]
 8001164:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	4b39      	ldr	r3, [pc, #228]	@ (8001250 <HAL_UART_MspInit+0x128>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a38      	ldr	r2, [pc, #224]	@ (8001250 <HAL_UART_MspInit+0x128>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b36      	ldr	r3, [pc, #216]	@ (8001250 <HAL_UART_MspInit+0x128>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001182:	230c      	movs	r3, #12
 8001184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001192:	2307      	movs	r3, #7
 8001194:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	4619      	mov	r1, r3
 800119c:	482d      	ldr	r0, [pc, #180]	@ (8001254 <HAL_UART_MspInit+0x12c>)
 800119e:	f000 fda7 	bl	8001cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011a2:	e04f      	b.n	8001244 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a2b      	ldr	r2, [pc, #172]	@ (8001258 <HAL_UART_MspInit+0x130>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d14a      	bne.n	8001244 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	4b27      	ldr	r3, [pc, #156]	@ (8001250 <HAL_UART_MspInit+0x128>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	4a26      	ldr	r2, [pc, #152]	@ (8001250 <HAL_UART_MspInit+0x128>)
 80011b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011be:	4b24      	ldr	r3, [pc, #144]	@ (8001250 <HAL_UART_MspInit+0x128>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b20      	ldr	r3, [pc, #128]	@ (8001250 <HAL_UART_MspInit+0x128>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001250 <HAL_UART_MspInit+0x128>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b1d      	ldr	r3, [pc, #116]	@ (8001250 <HAL_UART_MspInit+0x128>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <HAL_UART_MspInit+0x128>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a18      	ldr	r2, [pc, #96]	@ (8001250 <HAL_UART_MspInit+0x128>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <HAL_UART_MspInit+0x128>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001202:	2320      	movs	r3, #32
 8001204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001212:	2307      	movs	r3, #7
 8001214:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4619      	mov	r1, r3
 800121c:	480f      	ldr	r0, [pc, #60]	@ (800125c <HAL_UART_MspInit+0x134>)
 800121e:	f000 fd67 	bl	8001cf0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001222:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001230:	2303      	movs	r3, #3
 8001232:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001234:	2307      	movs	r3, #7
 8001236:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4619      	mov	r1, r3
 800123e:	4808      	ldr	r0, [pc, #32]	@ (8001260 <HAL_UART_MspInit+0x138>)
 8001240:	f000 fd56 	bl	8001cf0 <HAL_GPIO_Init>
}
 8001244:	bf00      	nop
 8001246:	3730      	adds	r7, #48	@ 0x30
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40004400 	.word	0x40004400
 8001250:	40023800 	.word	0x40023800
 8001254:	40020000 	.word	0x40020000
 8001258:	40004800 	.word	0x40004800
 800125c:	40020800 	.word	0x40020800
 8001260:	40020400 	.word	0x40020400

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <NMI_Handler+0x4>

0800126c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <MemManage_Handler+0x4>

0800127c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <BusFault_Handler+0x4>

08001284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <UsageFault_Handler+0x4>

0800128c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ba:	f000 f891 	bl	80013e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <SystemInit+0x20>)
 80012ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012ce:	4a05      	ldr	r2, [pc, #20]	@ (80012e4 <SystemInit+0x20>)
 80012d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001320 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012ec:	f7ff ffea 	bl	80012c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f0:	480c      	ldr	r0, [pc, #48]	@ (8001324 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012f2:	490d      	ldr	r1, [pc, #52]	@ (8001328 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012f4:	4a0d      	ldr	r2, [pc, #52]	@ (800132c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f8:	e002      	b.n	8001300 <LoopCopyDataInit>

080012fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fe:	3304      	adds	r3, #4

08001300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001304:	d3f9      	bcc.n	80012fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001306:	4a0a      	ldr	r2, [pc, #40]	@ (8001330 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001308:	4c0a      	ldr	r4, [pc, #40]	@ (8001334 <LoopFillZerobss+0x22>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800130c:	e001      	b.n	8001312 <LoopFillZerobss>

0800130e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001310:	3204      	adds	r2, #4

08001312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001314:	d3fb      	bcc.n	800130e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001316:	f002 f943 	bl	80035a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800131a:	f7ff fc9f 	bl	8000c5c <main>
  bx  lr    
 800131e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001320:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001328:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800132c:	08003634 	.word	0x08003634
  ldr r2, =_sbss
 8001330:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001334:	20000100 	.word	0x20000100

08001338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001338:	e7fe      	b.n	8001338 <ADC_IRQHandler>
	...

0800133c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001340:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <HAL_Init+0x40>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0d      	ldr	r2, [pc, #52]	@ (800137c <HAL_Init+0x40>)
 8001346:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800134a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800134c:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <HAL_Init+0x40>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0a      	ldr	r2, [pc, #40]	@ (800137c <HAL_Init+0x40>)
 8001352:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001356:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001358:	4b08      	ldr	r3, [pc, #32]	@ (800137c <HAL_Init+0x40>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a07      	ldr	r2, [pc, #28]	@ (800137c <HAL_Init+0x40>)
 800135e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001364:	2003      	movs	r0, #3
 8001366:	f000 f931 	bl	80015cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800136a:	2000      	movs	r0, #0
 800136c:	f000 f808 	bl	8001380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001370:	f7ff fe90 	bl	8001094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023c00 	.word	0x40023c00

08001380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001388:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <HAL_InitTick+0x54>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <HAL_InitTick+0x58>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
 8001392:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001396:	fbb3 f3f1 	udiv	r3, r3, r1
 800139a:	fbb2 f3f3 	udiv	r3, r2, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f93b 	bl	800161a <HAL_SYSTICK_Config>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00e      	b.n	80013cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b0f      	cmp	r3, #15
 80013b2:	d80a      	bhi.n	80013ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b4:	2200      	movs	r2, #0
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f000 f911 	bl	80015e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c0:	4a06      	ldr	r2, [pc, #24]	@ (80013dc <HAL_InitTick+0x5c>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e000      	b.n	80013cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2000001c 	.word	0x2000001c
 80013d8:	20000024 	.word	0x20000024
 80013dc:	20000020 	.word	0x20000020

080013e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e4:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <HAL_IncTick+0x20>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <HAL_IncTick+0x24>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	4a04      	ldr	r2, [pc, #16]	@ (8001404 <HAL_IncTick+0x24>)
 80013f2:	6013      	str	r3, [r2, #0]
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000024 	.word	0x20000024
 8001404:	200000dc 	.word	0x200000dc

08001408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return uwTick;
 800140c:	4b03      	ldr	r3, [pc, #12]	@ (800141c <HAL_GetTick+0x14>)
 800140e:	681b      	ldr	r3, [r3, #0]
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	200000dc 	.word	0x200000dc

08001420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001428:	f7ff ffee 	bl	8001408 <HAL_GetTick>
 800142c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001438:	d005      	beq.n	8001446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800143a:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <HAL_Delay+0x44>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4413      	add	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001446:	bf00      	nop
 8001448:	f7ff ffde 	bl	8001408 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	429a      	cmp	r2, r3
 8001456:	d8f7      	bhi.n	8001448 <HAL_Delay+0x28>
  {
  }
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000024 	.word	0x20000024

08001468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001478:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001484:	4013      	ands	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001490:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001494:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149a:	4a04      	ldr	r2, [pc, #16]	@ (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	60d3      	str	r3, [r2, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b4:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <__NVIC_GetPriorityGrouping+0x18>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	f003 0307 	and.w	r3, r3, #7
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	db0a      	blt.n	80014f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	490c      	ldr	r1, [pc, #48]	@ (8001518 <__NVIC_SetPriority+0x4c>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	0112      	lsls	r2, r2, #4
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	440b      	add	r3, r1
 80014f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f4:	e00a      	b.n	800150c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4908      	ldr	r1, [pc, #32]	@ (800151c <__NVIC_SetPriority+0x50>)
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	3b04      	subs	r3, #4
 8001504:	0112      	lsls	r2, r2, #4
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	440b      	add	r3, r1
 800150a:	761a      	strb	r2, [r3, #24]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000e100 	.word	0xe000e100
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001520:	b480      	push	{r7}
 8001522:	b089      	sub	sp, #36	@ 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f1c3 0307 	rsb	r3, r3, #7
 800153a:	2b04      	cmp	r3, #4
 800153c:	bf28      	it	cs
 800153e:	2304      	movcs	r3, #4
 8001540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3304      	adds	r3, #4
 8001546:	2b06      	cmp	r3, #6
 8001548:	d902      	bls.n	8001550 <NVIC_EncodePriority+0x30>
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3b03      	subs	r3, #3
 800154e:	e000      	b.n	8001552 <NVIC_EncodePriority+0x32>
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	f04f 32ff 	mov.w	r2, #4294967295
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43da      	mvns	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	401a      	ands	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001568:	f04f 31ff 	mov.w	r1, #4294967295
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fa01 f303 	lsl.w	r3, r1, r3
 8001572:	43d9      	mvns	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	4313      	orrs	r3, r2
         );
}
 800157a:	4618      	mov	r0, r3
 800157c:	3724      	adds	r7, #36	@ 0x24
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001598:	d301      	bcc.n	800159e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800159a:	2301      	movs	r3, #1
 800159c:	e00f      	b.n	80015be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159e:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <SysTick_Config+0x40>)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a6:	210f      	movs	r1, #15
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ac:	f7ff ff8e 	bl	80014cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b0:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <SysTick_Config+0x40>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b6:	4b04      	ldr	r3, [pc, #16]	@ (80015c8 <SysTick_Config+0x40>)
 80015b8:	2207      	movs	r2, #7
 80015ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	e000e010 	.word	0xe000e010

080015cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff ff47 	bl	8001468 <__NVIC_SetPriorityGrouping>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f4:	f7ff ff5c 	bl	80014b0 <__NVIC_GetPriorityGrouping>
 80015f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	6978      	ldr	r0, [r7, #20]
 8001600:	f7ff ff8e 	bl	8001520 <NVIC_EncodePriority>
 8001604:	4602      	mov	r2, r0
 8001606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff5d 	bl	80014cc <__NVIC_SetPriority>
}
 8001612:	bf00      	nop
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ffb0 	bl	8001588 <SysTick_Config>
 8001628:	4603      	mov	r3, r0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e00e      	b.n	8001662 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	795b      	ldrb	r3, [r3, #5]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d105      	bne.n	800165a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff fd45 	bl	80010e4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800166a:	b480      	push	{r7}
 800166c:	b087      	sub	sp, #28
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2202      	movs	r2, #2
 800167e:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	e00a      	b.n	800169c <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	441a      	add	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	3301      	adds	r3, #1
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d3f0      	bcc.n	8001686 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2201      	movs	r2, #1
 80016b0:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80016b2:	693b      	ldr	r3, [r7, #16]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	371c      	adds	r7, #28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80016d2:	4b23      	ldr	r3, [pc, #140]	@ (8001760 <HAL_FLASH_Program+0xa0>)
 80016d4:	7e1b      	ldrb	r3, [r3, #24]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <HAL_FLASH_Program+0x1e>
 80016da:	2302      	movs	r3, #2
 80016dc:	e03b      	b.n	8001756 <HAL_FLASH_Program+0x96>
 80016de:	4b20      	ldr	r3, [pc, #128]	@ (8001760 <HAL_FLASH_Program+0xa0>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016e4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80016e8:	f000 f8a0 	bl	800182c <FLASH_WaitForLastOperation>
 80016ec:	4603      	mov	r3, r0
 80016ee:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80016f0:	7dfb      	ldrb	r3, [r7, #23]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d12b      	bne.n	800174e <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d105      	bne.n	8001708 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80016fc:	783b      	ldrb	r3, [r7, #0]
 80016fe:	4619      	mov	r1, r3
 8001700:	68b8      	ldr	r0, [r7, #8]
 8001702:	f000 f94b 	bl	800199c <FLASH_Program_Byte>
 8001706:	e016      	b.n	8001736 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d105      	bne.n	800171a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800170e:	883b      	ldrh	r3, [r7, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	68b8      	ldr	r0, [r7, #8]
 8001714:	f000 f91e 	bl	8001954 <FLASH_Program_HalfWord>
 8001718:	e00d      	b.n	8001736 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d105      	bne.n	800172c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	4619      	mov	r1, r3
 8001724:	68b8      	ldr	r0, [r7, #8]
 8001726:	f000 f8f3 	bl	8001910 <FLASH_Program_Word>
 800172a:	e004      	b.n	8001736 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800172c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001730:	68b8      	ldr	r0, [r7, #8]
 8001732:	f000 f8bb 	bl	80018ac <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001736:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800173a:	f000 f877 	bl	800182c <FLASH_WaitForLastOperation>
 800173e:	4603      	mov	r3, r0
 8001740:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001742:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <HAL_FLASH_Program+0xa4>)
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	4a07      	ldr	r2, [pc, #28]	@ (8001764 <HAL_FLASH_Program+0xa4>)
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800174e:	4b04      	ldr	r3, [pc, #16]	@ (8001760 <HAL_FLASH_Program+0xa0>)
 8001750:	2200      	movs	r2, #0
 8001752:	761a      	strb	r2, [r3, #24]

  return status;
 8001754:	7dfb      	ldrb	r3, [r7, #23]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200000e0 	.word	0x200000e0
 8001764:	40023c00 	.word	0x40023c00

08001768 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001772:	4b0b      	ldr	r3, [pc, #44]	@ (80017a0 <HAL_FLASH_Unlock+0x38>)
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	2b00      	cmp	r3, #0
 8001778:	da0b      	bge.n	8001792 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800177a:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <HAL_FLASH_Unlock+0x38>)
 800177c:	4a09      	ldr	r2, [pc, #36]	@ (80017a4 <HAL_FLASH_Unlock+0x3c>)
 800177e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001780:	4b07      	ldr	r3, [pc, #28]	@ (80017a0 <HAL_FLASH_Unlock+0x38>)
 8001782:	4a09      	ldr	r2, [pc, #36]	@ (80017a8 <HAL_FLASH_Unlock+0x40>)
 8001784:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001786:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <HAL_FLASH_Unlock+0x38>)
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	2b00      	cmp	r3, #0
 800178c:	da01      	bge.n	8001792 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001792:	79fb      	ldrb	r3, [r7, #7]
}
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	40023c00 	.word	0x40023c00
 80017a4:	45670123 	.word	0x45670123
 80017a8:	cdef89ab 	.word	0xcdef89ab

080017ac <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 80017b0:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <HAL_FLASH_OB_Unlock+0x2c>)
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d007      	beq.n	80017cc <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_FLASH_OB_Unlock+0x2c>)
 80017be:	4a07      	ldr	r2, [pc, #28]	@ (80017dc <HAL_FLASH_OB_Unlock+0x30>)
 80017c0:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 80017c2:	4b05      	ldr	r3, [pc, #20]	@ (80017d8 <HAL_FLASH_OB_Unlock+0x2c>)
 80017c4:	4a06      	ldr	r2, [pc, #24]	@ (80017e0 <HAL_FLASH_OB_Unlock+0x34>)
 80017c6:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	e000      	b.n	80017ce <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	40023c00 	.word	0x40023c00
 80017dc:	08192a3b 	.word	0x08192a3b
 80017e0:	4c5d6e7f 	.word	0x4c5d6e7f

080017e4 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80017e8:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <HAL_FLASH_OB_Lock+0x1c>)
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	4a04      	ldr	r2, [pc, #16]	@ (8001800 <HAL_FLASH_OB_Lock+0x1c>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40023c00 	.word	0x40023c00

08001804 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8001808:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <HAL_FLASH_OB_Launch+0x24>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	4a06      	ldr	r2, [pc, #24]	@ (8001828 <HAL_FLASH_OB_Launch+0x24>)
 8001810:	f043 0302 	orr.w	r3, r3, #2
 8001814:	b2db      	uxtb	r3, r3
 8001816:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 8001818:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800181c:	f000 f806 	bl	800182c <FLASH_WaitForLastOperation>
 8001820:	4603      	mov	r3, r0
}
 8001822:	4618      	mov	r0, r3
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40023c14 	.word	0x40023c14

0800182c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001838:	4b1a      	ldr	r3, [pc, #104]	@ (80018a4 <FLASH_WaitForLastOperation+0x78>)
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800183e:	f7ff fde3 	bl	8001408 <HAL_GetTick>
 8001842:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001844:	e010      	b.n	8001868 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184c:	d00c      	beq.n	8001868 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d007      	beq.n	8001864 <FLASH_WaitForLastOperation+0x38>
 8001854:	f7ff fdd8 	bl	8001408 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	d201      	bcs.n	8001868 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e019      	b.n	800189c <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001868:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <FLASH_WaitForLastOperation+0x7c>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1e8      	bne.n	8001846 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001874:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <FLASH_WaitForLastOperation+0x7c>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b00      	cmp	r3, #0
 800187e:	d002      	beq.n	8001886 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001880:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <FLASH_WaitForLastOperation+0x7c>)
 8001882:	2201      	movs	r2, #1
 8001884:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001886:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <FLASH_WaitForLastOperation+0x7c>)
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001892:	f000 f8a5 	bl	80019e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0

}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200000e0 	.word	0x200000e0
 80018a8:	40023c00 	.word	0x40023c00

080018ac <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018b8:	4b14      	ldr	r3, [pc, #80]	@ (800190c <FLASH_Program_DoubleWord+0x60>)
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	4a13      	ldr	r2, [pc, #76]	@ (800190c <FLASH_Program_DoubleWord+0x60>)
 80018be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80018c4:	4b11      	ldr	r3, [pc, #68]	@ (800190c <FLASH_Program_DoubleWord+0x60>)
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	4a10      	ldr	r2, [pc, #64]	@ (800190c <FLASH_Program_DoubleWord+0x60>)
 80018ca:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80018ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80018d0:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <FLASH_Program_DoubleWord+0x60>)
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	4a0d      	ldr	r2, [pc, #52]	@ (800190c <FLASH_Program_DoubleWord+0x60>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80018e2:	f3bf 8f6f 	isb	sy
}
 80018e6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80018e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	000a      	movs	r2, r1
 80018f6:	2300      	movs	r3, #0
 80018f8:	68f9      	ldr	r1, [r7, #12]
 80018fa:	3104      	adds	r1, #4
 80018fc:	4613      	mov	r3, r2
 80018fe:	600b      	str	r3, [r1, #0]
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	40023c00 	.word	0x40023c00

08001910 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800191a:	4b0d      	ldr	r3, [pc, #52]	@ (8001950 <FLASH_Program_Word+0x40>)
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	4a0c      	ldr	r2, [pc, #48]	@ (8001950 <FLASH_Program_Word+0x40>)
 8001920:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001924:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001926:	4b0a      	ldr	r3, [pc, #40]	@ (8001950 <FLASH_Program_Word+0x40>)
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	4a09      	ldr	r2, [pc, #36]	@ (8001950 <FLASH_Program_Word+0x40>)
 800192c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001930:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001932:	4b07      	ldr	r3, [pc, #28]	@ (8001950 <FLASH_Program_Word+0x40>)
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <FLASH_Program_Word+0x40>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	601a      	str	r2, [r3, #0]
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	40023c00 	.word	0x40023c00

08001954 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001960:	4b0d      	ldr	r3, [pc, #52]	@ (8001998 <FLASH_Program_HalfWord+0x44>)
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	4a0c      	ldr	r2, [pc, #48]	@ (8001998 <FLASH_Program_HalfWord+0x44>)
 8001966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800196a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800196c:	4b0a      	ldr	r3, [pc, #40]	@ (8001998 <FLASH_Program_HalfWord+0x44>)
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	4a09      	ldr	r2, [pc, #36]	@ (8001998 <FLASH_Program_HalfWord+0x44>)
 8001972:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001976:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001978:	4b07      	ldr	r3, [pc, #28]	@ (8001998 <FLASH_Program_HalfWord+0x44>)
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	4a06      	ldr	r2, [pc, #24]	@ (8001998 <FLASH_Program_HalfWord+0x44>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	887a      	ldrh	r2, [r7, #2]
 8001988:	801a      	strh	r2, [r3, #0]
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40023c00 	.word	0x40023c00

0800199c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80019a8:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <FLASH_Program_Byte+0x40>)
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	4a0b      	ldr	r2, [pc, #44]	@ (80019dc <FLASH_Program_Byte+0x40>)
 80019ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80019b4:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <FLASH_Program_Byte+0x40>)
 80019b6:	4a09      	ldr	r2, [pc, #36]	@ (80019dc <FLASH_Program_Byte+0x40>)
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80019bc:	4b07      	ldr	r3, [pc, #28]	@ (80019dc <FLASH_Program_Byte+0x40>)
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	4a06      	ldr	r2, [pc, #24]	@ (80019dc <FLASH_Program_Byte+0x40>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	78fa      	ldrb	r2, [r7, #3]
 80019cc:	701a      	strb	r2, [r3, #0]
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	40023c00 	.word	0x40023c00

080019e0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80019e4:	4b2f      	ldr	r3, [pc, #188]	@ (8001aa4 <FLASH_SetErrorCode+0xc4>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	f003 0310 	and.w	r3, r3, #16
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d008      	beq.n	8001a02 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80019f0:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa8 <FLASH_SetErrorCode+0xc8>)
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	f043 0310 	orr.w	r3, r3, #16
 80019f8:	4a2b      	ldr	r2, [pc, #172]	@ (8001aa8 <FLASH_SetErrorCode+0xc8>)
 80019fa:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80019fc:	4b29      	ldr	r3, [pc, #164]	@ (8001aa4 <FLASH_SetErrorCode+0xc4>)
 80019fe:	2210      	movs	r2, #16
 8001a00:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001a02:	4b28      	ldr	r3, [pc, #160]	@ (8001aa4 <FLASH_SetErrorCode+0xc4>)
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f003 0320 	and.w	r3, r3, #32
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d008      	beq.n	8001a20 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001a0e:	4b26      	ldr	r3, [pc, #152]	@ (8001aa8 <FLASH_SetErrorCode+0xc8>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f043 0308 	orr.w	r3, r3, #8
 8001a16:	4a24      	ldr	r2, [pc, #144]	@ (8001aa8 <FLASH_SetErrorCode+0xc8>)
 8001a18:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001a1a:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <FLASH_SetErrorCode+0xc4>)
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001a20:	4b20      	ldr	r3, [pc, #128]	@ (8001aa4 <FLASH_SetErrorCode+0xc4>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d008      	beq.n	8001a3e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa8 <FLASH_SetErrorCode+0xc8>)
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	f043 0304 	orr.w	r3, r3, #4
 8001a34:	4a1c      	ldr	r2, [pc, #112]	@ (8001aa8 <FLASH_SetErrorCode+0xc8>)
 8001a36:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001a38:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <FLASH_SetErrorCode+0xc4>)
 8001a3a:	2240      	movs	r2, #64	@ 0x40
 8001a3c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001a3e:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <FLASH_SetErrorCode+0xc4>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d008      	beq.n	8001a5c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001a4a:	4b17      	ldr	r3, [pc, #92]	@ (8001aa8 <FLASH_SetErrorCode+0xc8>)
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	f043 0302 	orr.w	r3, r3, #2
 8001a52:	4a15      	ldr	r2, [pc, #84]	@ (8001aa8 <FLASH_SetErrorCode+0xc8>)
 8001a54:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001a56:	4b13      	ldr	r3, [pc, #76]	@ (8001aa4 <FLASH_SetErrorCode+0xc4>)
 8001a58:	2280      	movs	r2, #128	@ 0x80
 8001a5a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001a5c:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <FLASH_SetErrorCode+0xc4>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d009      	beq.n	8001a7c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001a68:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa8 <FLASH_SetErrorCode+0xc8>)
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa8 <FLASH_SetErrorCode+0xc8>)
 8001a72:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001a74:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <FLASH_SetErrorCode+0xc4>)
 8001a76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a7a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001a7c:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <FLASH_SetErrorCode+0xc4>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d008      	beq.n	8001a9a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001a88:	4b07      	ldr	r3, [pc, #28]	@ (8001aa8 <FLASH_SetErrorCode+0xc8>)
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	f043 0320 	orr.w	r3, r3, #32
 8001a90:	4a05      	ldr	r2, [pc, #20]	@ (8001aa8 <FLASH_SetErrorCode+0xc8>)
 8001a92:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001a94:	4b03      	ldr	r3, [pc, #12]	@ (8001aa4 <FLASH_SetErrorCode+0xc4>)
 8001a96:	2202      	movs	r2, #2
 8001a98:	60da      	str	r2, [r3, #12]
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	40023c00 	.word	0x40023c00
 8001aa8:	200000e0 	.word	0x200000e0

08001aac <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001abe:	4b31      	ldr	r3, [pc, #196]	@ (8001b84 <HAL_FLASHEx_Erase+0xd8>)
 8001ac0:	7e1b      	ldrb	r3, [r3, #24]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d101      	bne.n	8001aca <HAL_FLASHEx_Erase+0x1e>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e058      	b.n	8001b7c <HAL_FLASHEx_Erase+0xd0>
 8001aca:	4b2e      	ldr	r3, [pc, #184]	@ (8001b84 <HAL_FLASHEx_Erase+0xd8>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ad0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001ad4:	f7ff feaa 	bl	800182c <FLASH_WaitForLastOperation>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d148      	bne.n	8001b74 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d115      	bne.n	8001b1e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	4619      	mov	r1, r3
 8001afe:	4610      	mov	r0, r2
 8001b00:	f000 f844 	bl	8001b8c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b04:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001b08:	f7ff fe90 	bl	800182c <FLASH_WaitForLastOperation>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001b10:	4b1d      	ldr	r3, [pc, #116]	@ (8001b88 <HAL_FLASHEx_Erase+0xdc>)
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	4a1c      	ldr	r2, [pc, #112]	@ (8001b88 <HAL_FLASHEx_Erase+0xdc>)
 8001b16:	f023 0304 	bic.w	r3, r3, #4
 8001b1a:	6113      	str	r3, [r2, #16]
 8001b1c:	e028      	b.n	8001b70 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	e01c      	b.n	8001b60 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	68b8      	ldr	r0, [r7, #8]
 8001b30:	f000 f850 	bl	8001bd4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b34:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001b38:	f7ff fe78 	bl	800182c <FLASH_WaitForLastOperation>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001b40:	4b11      	ldr	r3, [pc, #68]	@ (8001b88 <HAL_FLASHEx_Erase+0xdc>)
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	4a10      	ldr	r2, [pc, #64]	@ (8001b88 <HAL_FLASHEx_Erase+0xdc>)
 8001b46:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8001b4a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	601a      	str	r2, [r3, #0]
          break;
 8001b58:	e00a      	b.n	8001b70 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	4413      	add	r3, r2
 8001b6a:	68ba      	ldr	r2, [r7, #8]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d3da      	bcc.n	8001b26 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001b70:	f000 f878 	bl	8001c64 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b74:	4b03      	ldr	r3, [pc, #12]	@ (8001b84 <HAL_FLASHEx_Erase+0xd8>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	761a      	strb	r2, [r3, #24]

  return status;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200000e0 	.word	0x200000e0
 8001b88:	40023c00 	.word	0x40023c00

08001b8c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	6039      	str	r1, [r7, #0]
 8001b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b98:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd0 <FLASH_MassErase+0x44>)
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd0 <FLASH_MassErase+0x44>)
 8001b9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ba2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd0 <FLASH_MassErase+0x44>)
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	4a09      	ldr	r2, [pc, #36]	@ (8001bd0 <FLASH_MassErase+0x44>)
 8001baa:	f043 0304 	orr.w	r3, r3, #4
 8001bae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001bb0:	4b07      	ldr	r3, [pc, #28]	@ (8001bd0 <FLASH_MassErase+0x44>)
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	4a05      	ldr	r2, [pc, #20]	@ (8001bd0 <FLASH_MassErase+0x44>)
 8001bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bc0:	6113      	str	r3, [r2, #16]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40023c00 	.word	0x40023c00

08001bd4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d102      	bne.n	8001bf0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	e010      	b.n	8001c12 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001bf0:	78fb      	ldrb	r3, [r7, #3]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d103      	bne.n	8001bfe <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001bf6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	e009      	b.n	8001c12 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d103      	bne.n	8001c0c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001c04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	e002      	b.n	8001c12 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001c0c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c10:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c12:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <FLASH_Erase_Sector+0x8c>)
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	4a12      	ldr	r2, [pc, #72]	@ (8001c60 <FLASH_Erase_Sector+0x8c>)
 8001c18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001c1e:	4b10      	ldr	r3, [pc, #64]	@ (8001c60 <FLASH_Erase_Sector+0x8c>)
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	490f      	ldr	r1, [pc, #60]	@ (8001c60 <FLASH_Erase_Sector+0x8c>)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c60 <FLASH_Erase_Sector+0x8c>)
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	4a0c      	ldr	r2, [pc, #48]	@ (8001c60 <FLASH_Erase_Sector+0x8c>)
 8001c30:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001c34:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001c36:	4b0a      	ldr	r3, [pc, #40]	@ (8001c60 <FLASH_Erase_Sector+0x8c>)
 8001c38:	691a      	ldr	r2, [r3, #16]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	4a07      	ldr	r2, [pc, #28]	@ (8001c60 <FLASH_Erase_Sector+0x8c>)
 8001c42:	f043 0302 	orr.w	r3, r3, #2
 8001c46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001c48:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <FLASH_Erase_Sector+0x8c>)
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	4a04      	ldr	r2, [pc, #16]	@ (8001c60 <FLASH_Erase_Sector+0x8c>)
 8001c4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c52:	6113      	str	r3, [r2, #16]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	40023c00 	.word	0x40023c00

08001c64 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001c68:	4b20      	ldr	r3, [pc, #128]	@ (8001cec <FLASH_FlushCaches+0x88>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d017      	beq.n	8001ca4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001c74:	4b1d      	ldr	r3, [pc, #116]	@ (8001cec <FLASH_FlushCaches+0x88>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a1c      	ldr	r2, [pc, #112]	@ (8001cec <FLASH_FlushCaches+0x88>)
 8001c7a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001c7e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001c80:	4b1a      	ldr	r3, [pc, #104]	@ (8001cec <FLASH_FlushCaches+0x88>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a19      	ldr	r2, [pc, #100]	@ (8001cec <FLASH_FlushCaches+0x88>)
 8001c86:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	4b17      	ldr	r3, [pc, #92]	@ (8001cec <FLASH_FlushCaches+0x88>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a16      	ldr	r2, [pc, #88]	@ (8001cec <FLASH_FlushCaches+0x88>)
 8001c92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001c96:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c98:	4b14      	ldr	r3, [pc, #80]	@ (8001cec <FLASH_FlushCaches+0x88>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a13      	ldr	r2, [pc, #76]	@ (8001cec <FLASH_FlushCaches+0x88>)
 8001c9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ca2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001ca4:	4b11      	ldr	r3, [pc, #68]	@ (8001cec <FLASH_FlushCaches+0x88>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d017      	beq.n	8001ce0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cec <FLASH_FlushCaches+0x88>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cec <FLASH_FlushCaches+0x88>)
 8001cb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001cba:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <FLASH_FlushCaches+0x88>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8001cec <FLASH_FlushCaches+0x88>)
 8001cc2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	4b08      	ldr	r3, [pc, #32]	@ (8001cec <FLASH_FlushCaches+0x88>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a07      	ldr	r2, [pc, #28]	@ (8001cec <FLASH_FlushCaches+0x88>)
 8001cce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001cd2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cd4:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <FLASH_FlushCaches+0x88>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a04      	ldr	r2, [pc, #16]	@ (8001cec <FLASH_FlushCaches+0x88>)
 8001cda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cde:	6013      	str	r3, [r2, #0]
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40023c00 	.word	0x40023c00

08001cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b089      	sub	sp, #36	@ 0x24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	e165      	b.n	8001fd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	f040 8154 	bne.w	8001fd2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d005      	beq.n	8001d42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d130      	bne.n	8001da4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 0201 	and.w	r2, r3, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d017      	beq.n	8001de0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d123      	bne.n	8001e34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	08da      	lsrs	r2, r3, #3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3208      	adds	r2, #8
 8001df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	220f      	movs	r2, #15
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	08da      	lsrs	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3208      	adds	r2, #8
 8001e2e:	69b9      	ldr	r1, [r7, #24]
 8001e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0203 	and.w	r2, r3, #3
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80ae 	beq.w	8001fd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ff0 <HAL_GPIO_Init+0x300>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ff0 <HAL_GPIO_Init+0x300>)
 8001e80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e86:	4b5a      	ldr	r3, [pc, #360]	@ (8001ff0 <HAL_GPIO_Init+0x300>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e92:	4a58      	ldr	r2, [pc, #352]	@ (8001ff4 <HAL_GPIO_Init+0x304>)
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	3302      	adds	r3, #2
 8001e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	220f      	movs	r2, #15
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a4f      	ldr	r2, [pc, #316]	@ (8001ff8 <HAL_GPIO_Init+0x308>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d025      	beq.n	8001f0a <HAL_GPIO_Init+0x21a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a4e      	ldr	r2, [pc, #312]	@ (8001ffc <HAL_GPIO_Init+0x30c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d01f      	beq.n	8001f06 <HAL_GPIO_Init+0x216>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a4d      	ldr	r2, [pc, #308]	@ (8002000 <HAL_GPIO_Init+0x310>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d019      	beq.n	8001f02 <HAL_GPIO_Init+0x212>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a4c      	ldr	r2, [pc, #304]	@ (8002004 <HAL_GPIO_Init+0x314>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d013      	beq.n	8001efe <HAL_GPIO_Init+0x20e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a4b      	ldr	r2, [pc, #300]	@ (8002008 <HAL_GPIO_Init+0x318>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d00d      	beq.n	8001efa <HAL_GPIO_Init+0x20a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a4a      	ldr	r2, [pc, #296]	@ (800200c <HAL_GPIO_Init+0x31c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d007      	beq.n	8001ef6 <HAL_GPIO_Init+0x206>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a49      	ldr	r2, [pc, #292]	@ (8002010 <HAL_GPIO_Init+0x320>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d101      	bne.n	8001ef2 <HAL_GPIO_Init+0x202>
 8001eee:	2306      	movs	r3, #6
 8001ef0:	e00c      	b.n	8001f0c <HAL_GPIO_Init+0x21c>
 8001ef2:	2307      	movs	r3, #7
 8001ef4:	e00a      	b.n	8001f0c <HAL_GPIO_Init+0x21c>
 8001ef6:	2305      	movs	r3, #5
 8001ef8:	e008      	b.n	8001f0c <HAL_GPIO_Init+0x21c>
 8001efa:	2304      	movs	r3, #4
 8001efc:	e006      	b.n	8001f0c <HAL_GPIO_Init+0x21c>
 8001efe:	2303      	movs	r3, #3
 8001f00:	e004      	b.n	8001f0c <HAL_GPIO_Init+0x21c>
 8001f02:	2302      	movs	r3, #2
 8001f04:	e002      	b.n	8001f0c <HAL_GPIO_Init+0x21c>
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <HAL_GPIO_Init+0x21c>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	69fa      	ldr	r2, [r7, #28]
 8001f0e:	f002 0203 	and.w	r2, r2, #3
 8001f12:	0092      	lsls	r2, r2, #2
 8001f14:	4093      	lsls	r3, r2
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f1c:	4935      	ldr	r1, [pc, #212]	@ (8001ff4 <HAL_GPIO_Init+0x304>)
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	089b      	lsrs	r3, r3, #2
 8001f22:	3302      	adds	r3, #2
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f2a:	4b3a      	ldr	r3, [pc, #232]	@ (8002014 <HAL_GPIO_Init+0x324>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f4e:	4a31      	ldr	r2, [pc, #196]	@ (8002014 <HAL_GPIO_Init+0x324>)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f54:	4b2f      	ldr	r3, [pc, #188]	@ (8002014 <HAL_GPIO_Init+0x324>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f78:	4a26      	ldr	r2, [pc, #152]	@ (8002014 <HAL_GPIO_Init+0x324>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f7e:	4b25      	ldr	r3, [pc, #148]	@ (8002014 <HAL_GPIO_Init+0x324>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fa2:	4a1c      	ldr	r2, [pc, #112]	@ (8002014 <HAL_GPIO_Init+0x324>)
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8002014 <HAL_GPIO_Init+0x324>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fcc:	4a11      	ldr	r2, [pc, #68]	@ (8002014 <HAL_GPIO_Init+0x324>)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	61fb      	str	r3, [r7, #28]
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	2b0f      	cmp	r3, #15
 8001fdc:	f67f ae96 	bls.w	8001d0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	3724      	adds	r7, #36	@ 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40013800 	.word	0x40013800
 8001ff8:	40020000 	.word	0x40020000
 8001ffc:	40020400 	.word	0x40020400
 8002000:	40020800 	.word	0x40020800
 8002004:	40020c00 	.word	0x40020c00
 8002008:	40021000 	.word	0x40021000
 800200c:	40021400 	.word	0x40021400
 8002010:	40021800 	.word	0x40021800
 8002014:	40013c00 	.word	0x40013c00

08002018 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	887b      	ldrh	r3, [r7, #2]
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002030:	2301      	movs	r3, #1
 8002032:	73fb      	strb	r3, [r7, #15]
 8002034:	e001      	b.n	800203a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002036:	2300      	movs	r3, #0
 8002038:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	807b      	strh	r3, [r7, #2]
 8002054:	4613      	mov	r3, r2
 8002056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002058:	787b      	ldrb	r3, [r7, #1]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800205e:	887a      	ldrh	r2, [r7, #2]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002064:	e003      	b.n	800206e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002066:	887b      	ldrh	r3, [r7, #2]
 8002068:	041a      	lsls	r2, r3, #16
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	619a      	str	r2, [r3, #24]
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0cc      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002090:	4b68      	ldr	r3, [pc, #416]	@ (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d90c      	bls.n	80020b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b65      	ldr	r3, [pc, #404]	@ (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b63      	ldr	r3, [pc, #396]	@ (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0b8      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d020      	beq.n	8002106 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b59      	ldr	r3, [pc, #356]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a58      	ldr	r2, [pc, #352]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d005      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020e8:	4b53      	ldr	r3, [pc, #332]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	4a52      	ldr	r2, [pc, #328]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f4:	4b50      	ldr	r3, [pc, #320]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	494d      	ldr	r1, [pc, #308]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	4313      	orrs	r3, r2
 8002104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d044      	beq.n	800219c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211a:	4b47      	ldr	r3, [pc, #284]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d119      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e07f      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d003      	beq.n	800213a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002136:	2b03      	cmp	r3, #3
 8002138:	d107      	bne.n	800214a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800213a:	4b3f      	ldr	r3, [pc, #252]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d109      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e06f      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214a:	4b3b      	ldr	r3, [pc, #236]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e067      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800215a:	4b37      	ldr	r3, [pc, #220]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f023 0203 	bic.w	r2, r3, #3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	4934      	ldr	r1, [pc, #208]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 8002168:	4313      	orrs	r3, r2
 800216a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800216c:	f7ff f94c 	bl	8001408 <HAL_GetTick>
 8002170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002172:	e00a      	b.n	800218a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002174:	f7ff f948 	bl	8001408 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002182:	4293      	cmp	r3, r2
 8002184:	d901      	bls.n	800218a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e04f      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218a:	4b2b      	ldr	r3, [pc, #172]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 020c 	and.w	r2, r3, #12
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	429a      	cmp	r2, r3
 800219a:	d1eb      	bne.n	8002174 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800219c:	4b25      	ldr	r3, [pc, #148]	@ (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d20c      	bcs.n	80021c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021aa:	4b22      	ldr	r3, [pc, #136]	@ (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b2:	4b20      	ldr	r3, [pc, #128]	@ (8002234 <HAL_RCC_ClockConfig+0x1b8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e032      	b.n	800222a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d008      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d0:	4b19      	ldr	r3, [pc, #100]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	4916      	ldr	r1, [pc, #88]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d009      	beq.n	8002202 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ee:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	490e      	ldr	r1, [pc, #56]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002202:	f000 f855 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 8002206:	4602      	mov	r2, r0
 8002208:	4b0b      	ldr	r3, [pc, #44]	@ (8002238 <HAL_RCC_ClockConfig+0x1bc>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	490a      	ldr	r1, [pc, #40]	@ (800223c <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	5ccb      	ldrb	r3, [r1, r3]
 8002216:	fa22 f303 	lsr.w	r3, r2, r3
 800221a:	4a09      	ldr	r2, [pc, #36]	@ (8002240 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800221e:	4b09      	ldr	r3, [pc, #36]	@ (8002244 <HAL_RCC_ClockConfig+0x1c8>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff f8ac 	bl	8001380 <HAL_InitTick>

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40023c00 	.word	0x40023c00
 8002238:	40023800 	.word	0x40023800
 800223c:	0800360c 	.word	0x0800360c
 8002240:	2000001c 	.word	0x2000001c
 8002244:	20000020 	.word	0x20000020

08002248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800224c:	4b03      	ldr	r3, [pc, #12]	@ (800225c <HAL_RCC_GetHCLKFreq+0x14>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	2000001c 	.word	0x2000001c

08002260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002264:	f7ff fff0 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 8002268:	4602      	mov	r2, r0
 800226a:	4b05      	ldr	r3, [pc, #20]	@ (8002280 <HAL_RCC_GetPCLK1Freq+0x20>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	0a9b      	lsrs	r3, r3, #10
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	4903      	ldr	r1, [pc, #12]	@ (8002284 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002276:	5ccb      	ldrb	r3, [r1, r3]
 8002278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800227c:	4618      	mov	r0, r3
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40023800 	.word	0x40023800
 8002284:	0800361c 	.word	0x0800361c

08002288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800228c:	f7ff ffdc 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 8002290:	4602      	mov	r2, r0
 8002292:	4b05      	ldr	r3, [pc, #20]	@ (80022a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	0b5b      	lsrs	r3, r3, #13
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	4903      	ldr	r1, [pc, #12]	@ (80022ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800229e:	5ccb      	ldrb	r3, [r1, r3]
 80022a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40023800 	.word	0x40023800
 80022ac:	0800361c 	.word	0x0800361c

080022b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022b4:	b0ae      	sub	sp, #184	@ 0xb8
 80022b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022d6:	4bcb      	ldr	r3, [pc, #812]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x354>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b0c      	cmp	r3, #12
 80022e0:	f200 8206 	bhi.w	80026f0 <HAL_RCC_GetSysClockFreq+0x440>
 80022e4:	a201      	add	r2, pc, #4	@ (adr r2, 80022ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80022e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ea:	bf00      	nop
 80022ec:	08002321 	.word	0x08002321
 80022f0:	080026f1 	.word	0x080026f1
 80022f4:	080026f1 	.word	0x080026f1
 80022f8:	080026f1 	.word	0x080026f1
 80022fc:	08002329 	.word	0x08002329
 8002300:	080026f1 	.word	0x080026f1
 8002304:	080026f1 	.word	0x080026f1
 8002308:	080026f1 	.word	0x080026f1
 800230c:	08002331 	.word	0x08002331
 8002310:	080026f1 	.word	0x080026f1
 8002314:	080026f1 	.word	0x080026f1
 8002318:	080026f1 	.word	0x080026f1
 800231c:	08002521 	.word	0x08002521
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002320:	4bb9      	ldr	r3, [pc, #740]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x358>)
 8002322:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002326:	e1e7      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002328:	4bb8      	ldr	r3, [pc, #736]	@ (800260c <HAL_RCC_GetSysClockFreq+0x35c>)
 800232a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800232e:	e1e3      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002330:	4bb4      	ldr	r3, [pc, #720]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x354>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002338:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800233c:	4bb1      	ldr	r3, [pc, #708]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x354>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d071      	beq.n	800242c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002348:	4bae      	ldr	r3, [pc, #696]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x354>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	099b      	lsrs	r3, r3, #6
 800234e:	2200      	movs	r2, #0
 8002350:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002354:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002358:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800235c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002360:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800236a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800236e:	4622      	mov	r2, r4
 8002370:	462b      	mov	r3, r5
 8002372:	f04f 0000 	mov.w	r0, #0
 8002376:	f04f 0100 	mov.w	r1, #0
 800237a:	0159      	lsls	r1, r3, #5
 800237c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002380:	0150      	lsls	r0, r2, #5
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4621      	mov	r1, r4
 8002388:	1a51      	subs	r1, r2, r1
 800238a:	6439      	str	r1, [r7, #64]	@ 0x40
 800238c:	4629      	mov	r1, r5
 800238e:	eb63 0301 	sbc.w	r3, r3, r1
 8002392:	647b      	str	r3, [r7, #68]	@ 0x44
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80023a0:	4649      	mov	r1, r9
 80023a2:	018b      	lsls	r3, r1, #6
 80023a4:	4641      	mov	r1, r8
 80023a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023aa:	4641      	mov	r1, r8
 80023ac:	018a      	lsls	r2, r1, #6
 80023ae:	4641      	mov	r1, r8
 80023b0:	1a51      	subs	r1, r2, r1
 80023b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80023b4:	4649      	mov	r1, r9
 80023b6:	eb63 0301 	sbc.w	r3, r3, r1
 80023ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80023c8:	4649      	mov	r1, r9
 80023ca:	00cb      	lsls	r3, r1, #3
 80023cc:	4641      	mov	r1, r8
 80023ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023d2:	4641      	mov	r1, r8
 80023d4:	00ca      	lsls	r2, r1, #3
 80023d6:	4610      	mov	r0, r2
 80023d8:	4619      	mov	r1, r3
 80023da:	4603      	mov	r3, r0
 80023dc:	4622      	mov	r2, r4
 80023de:	189b      	adds	r3, r3, r2
 80023e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80023e2:	462b      	mov	r3, r5
 80023e4:	460a      	mov	r2, r1
 80023e6:	eb42 0303 	adc.w	r3, r2, r3
 80023ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023f8:	4629      	mov	r1, r5
 80023fa:	024b      	lsls	r3, r1, #9
 80023fc:	4621      	mov	r1, r4
 80023fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002402:	4621      	mov	r1, r4
 8002404:	024a      	lsls	r2, r1, #9
 8002406:	4610      	mov	r0, r2
 8002408:	4619      	mov	r1, r3
 800240a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800240e:	2200      	movs	r2, #0
 8002410:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002414:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002418:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800241c:	f7fd fef2 	bl	8000204 <__aeabi_uldivmod>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4613      	mov	r3, r2
 8002426:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800242a:	e067      	b.n	80024fc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800242c:	4b75      	ldr	r3, [pc, #468]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x354>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	099b      	lsrs	r3, r3, #6
 8002432:	2200      	movs	r2, #0
 8002434:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002438:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800243c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002444:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002446:	2300      	movs	r3, #0
 8002448:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800244a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800244e:	4622      	mov	r2, r4
 8002450:	462b      	mov	r3, r5
 8002452:	f04f 0000 	mov.w	r0, #0
 8002456:	f04f 0100 	mov.w	r1, #0
 800245a:	0159      	lsls	r1, r3, #5
 800245c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002460:	0150      	lsls	r0, r2, #5
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4621      	mov	r1, r4
 8002468:	1a51      	subs	r1, r2, r1
 800246a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800246c:	4629      	mov	r1, r5
 800246e:	eb63 0301 	sbc.w	r3, r3, r1
 8002472:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002480:	4649      	mov	r1, r9
 8002482:	018b      	lsls	r3, r1, #6
 8002484:	4641      	mov	r1, r8
 8002486:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800248a:	4641      	mov	r1, r8
 800248c:	018a      	lsls	r2, r1, #6
 800248e:	4641      	mov	r1, r8
 8002490:	ebb2 0a01 	subs.w	sl, r2, r1
 8002494:	4649      	mov	r1, r9
 8002496:	eb63 0b01 	sbc.w	fp, r3, r1
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024ae:	4692      	mov	sl, r2
 80024b0:	469b      	mov	fp, r3
 80024b2:	4623      	mov	r3, r4
 80024b4:	eb1a 0303 	adds.w	r3, sl, r3
 80024b8:	623b      	str	r3, [r7, #32]
 80024ba:	462b      	mov	r3, r5
 80024bc:	eb4b 0303 	adc.w	r3, fp, r3
 80024c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80024ce:	4629      	mov	r1, r5
 80024d0:	028b      	lsls	r3, r1, #10
 80024d2:	4621      	mov	r1, r4
 80024d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024d8:	4621      	mov	r1, r4
 80024da:	028a      	lsls	r2, r1, #10
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024e4:	2200      	movs	r2, #0
 80024e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80024e8:	677a      	str	r2, [r7, #116]	@ 0x74
 80024ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80024ee:	f7fd fe89 	bl	8000204 <__aeabi_uldivmod>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4613      	mov	r3, r2
 80024f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80024fc:	4b41      	ldr	r3, [pc, #260]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x354>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	0c1b      	lsrs	r3, r3, #16
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	3301      	adds	r3, #1
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800250e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002512:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002516:	fbb2 f3f3 	udiv	r3, r2, r3
 800251a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800251e:	e0eb      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002520:	4b38      	ldr	r3, [pc, #224]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x354>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002528:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800252c:	4b35      	ldr	r3, [pc, #212]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x354>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d06b      	beq.n	8002610 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002538:	4b32      	ldr	r3, [pc, #200]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x354>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	099b      	lsrs	r3, r3, #6
 800253e:	2200      	movs	r2, #0
 8002540:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002542:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002544:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800254a:	663b      	str	r3, [r7, #96]	@ 0x60
 800254c:	2300      	movs	r3, #0
 800254e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002550:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002554:	4622      	mov	r2, r4
 8002556:	462b      	mov	r3, r5
 8002558:	f04f 0000 	mov.w	r0, #0
 800255c:	f04f 0100 	mov.w	r1, #0
 8002560:	0159      	lsls	r1, r3, #5
 8002562:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002566:	0150      	lsls	r0, r2, #5
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4621      	mov	r1, r4
 800256e:	1a51      	subs	r1, r2, r1
 8002570:	61b9      	str	r1, [r7, #24]
 8002572:	4629      	mov	r1, r5
 8002574:	eb63 0301 	sbc.w	r3, r3, r1
 8002578:	61fb      	str	r3, [r7, #28]
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002586:	4659      	mov	r1, fp
 8002588:	018b      	lsls	r3, r1, #6
 800258a:	4651      	mov	r1, sl
 800258c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002590:	4651      	mov	r1, sl
 8002592:	018a      	lsls	r2, r1, #6
 8002594:	4651      	mov	r1, sl
 8002596:	ebb2 0801 	subs.w	r8, r2, r1
 800259a:	4659      	mov	r1, fp
 800259c:	eb63 0901 	sbc.w	r9, r3, r1
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025b4:	4690      	mov	r8, r2
 80025b6:	4699      	mov	r9, r3
 80025b8:	4623      	mov	r3, r4
 80025ba:	eb18 0303 	adds.w	r3, r8, r3
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	462b      	mov	r3, r5
 80025c2:	eb49 0303 	adc.w	r3, r9, r3
 80025c6:	617b      	str	r3, [r7, #20]
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80025d4:	4629      	mov	r1, r5
 80025d6:	024b      	lsls	r3, r1, #9
 80025d8:	4621      	mov	r1, r4
 80025da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025de:	4621      	mov	r1, r4
 80025e0:	024a      	lsls	r2, r1, #9
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025ea:	2200      	movs	r2, #0
 80025ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80025ee:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80025f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80025f4:	f7fd fe06 	bl	8000204 <__aeabi_uldivmod>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4613      	mov	r3, r2
 80025fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002602:	e065      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0x420>
 8002604:	40023800 	.word	0x40023800
 8002608:	00f42400 	.word	0x00f42400
 800260c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002610:	4b3d      	ldr	r3, [pc, #244]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x458>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	099b      	lsrs	r3, r3, #6
 8002616:	2200      	movs	r2, #0
 8002618:	4618      	mov	r0, r3
 800261a:	4611      	mov	r1, r2
 800261c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002620:	653b      	str	r3, [r7, #80]	@ 0x50
 8002622:	2300      	movs	r3, #0
 8002624:	657b      	str	r3, [r7, #84]	@ 0x54
 8002626:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800262a:	4642      	mov	r2, r8
 800262c:	464b      	mov	r3, r9
 800262e:	f04f 0000 	mov.w	r0, #0
 8002632:	f04f 0100 	mov.w	r1, #0
 8002636:	0159      	lsls	r1, r3, #5
 8002638:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800263c:	0150      	lsls	r0, r2, #5
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4641      	mov	r1, r8
 8002644:	1a51      	subs	r1, r2, r1
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	4649      	mov	r1, r9
 800264a:	eb63 0301 	sbc.w	r3, r3, r1
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800265c:	4659      	mov	r1, fp
 800265e:	018b      	lsls	r3, r1, #6
 8002660:	4651      	mov	r1, sl
 8002662:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002666:	4651      	mov	r1, sl
 8002668:	018a      	lsls	r2, r1, #6
 800266a:	4651      	mov	r1, sl
 800266c:	1a54      	subs	r4, r2, r1
 800266e:	4659      	mov	r1, fp
 8002670:	eb63 0501 	sbc.w	r5, r3, r1
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	f04f 0300 	mov.w	r3, #0
 800267c:	00eb      	lsls	r3, r5, #3
 800267e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002682:	00e2      	lsls	r2, r4, #3
 8002684:	4614      	mov	r4, r2
 8002686:	461d      	mov	r5, r3
 8002688:	4643      	mov	r3, r8
 800268a:	18e3      	adds	r3, r4, r3
 800268c:	603b      	str	r3, [r7, #0]
 800268e:	464b      	mov	r3, r9
 8002690:	eb45 0303 	adc.w	r3, r5, r3
 8002694:	607b      	str	r3, [r7, #4]
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026a2:	4629      	mov	r1, r5
 80026a4:	028b      	lsls	r3, r1, #10
 80026a6:	4621      	mov	r1, r4
 80026a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026ac:	4621      	mov	r1, r4
 80026ae:	028a      	lsls	r2, r1, #10
 80026b0:	4610      	mov	r0, r2
 80026b2:	4619      	mov	r1, r3
 80026b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026b8:	2200      	movs	r2, #0
 80026ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026bc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80026be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80026c2:	f7fd fd9f 	bl	8000204 <__aeabi_uldivmod>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4613      	mov	r3, r2
 80026cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x458>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	0f1b      	lsrs	r3, r3, #28
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80026de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80026e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026ee:	e003      	b.n	80026f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026f0:	4b06      	ldr	r3, [pc, #24]	@ (800270c <HAL_RCC_GetSysClockFreq+0x45c>)
 80026f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	37b8      	adds	r7, #184	@ 0xb8
 8002700:	46bd      	mov	sp, r7
 8002702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800
 800270c:	00f42400 	.word	0x00f42400

08002710 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e28d      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 8083 	beq.w	8002836 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002730:	4b94      	ldr	r3, [pc, #592]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 030c 	and.w	r3, r3, #12
 8002738:	2b04      	cmp	r3, #4
 800273a:	d019      	beq.n	8002770 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800273c:	4b91      	ldr	r3, [pc, #580]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 030c 	and.w	r3, r3, #12
        || \
 8002744:	2b08      	cmp	r3, #8
 8002746:	d106      	bne.n	8002756 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002748:	4b8e      	ldr	r3, [pc, #568]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002750:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002754:	d00c      	beq.n	8002770 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002756:	4b8b      	ldr	r3, [pc, #556]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800275e:	2b0c      	cmp	r3, #12
 8002760:	d112      	bne.n	8002788 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002762:	4b88      	ldr	r3, [pc, #544]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800276a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800276e:	d10b      	bne.n	8002788 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002770:	4b84      	ldr	r3, [pc, #528]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d05b      	beq.n	8002834 <HAL_RCC_OscConfig+0x124>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d157      	bne.n	8002834 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e25a      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002790:	d106      	bne.n	80027a0 <HAL_RCC_OscConfig+0x90>
 8002792:	4b7c      	ldr	r3, [pc, #496]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a7b      	ldr	r2, [pc, #492]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e01d      	b.n	80027dc <HAL_RCC_OscConfig+0xcc>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCC_OscConfig+0xb4>
 80027aa:	4b76      	ldr	r3, [pc, #472]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a75      	ldr	r2, [pc, #468]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 80027b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	4b73      	ldr	r3, [pc, #460]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a72      	ldr	r2, [pc, #456]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 80027bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	e00b      	b.n	80027dc <HAL_RCC_OscConfig+0xcc>
 80027c4:	4b6f      	ldr	r3, [pc, #444]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a6e      	ldr	r2, [pc, #440]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 80027ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	4b6c      	ldr	r3, [pc, #432]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a6b      	ldr	r2, [pc, #428]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 80027d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d013      	beq.n	800280c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7fe fe10 	bl	8001408 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ec:	f7fe fe0c 	bl	8001408 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	@ 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e21f      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027fe:	4b61      	ldr	r3, [pc, #388]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0xdc>
 800280a:	e014      	b.n	8002836 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280c:	f7fe fdfc 	bl	8001408 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002814:	f7fe fdf8 	bl	8001408 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b64      	cmp	r3, #100	@ 0x64
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e20b      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002826:	4b57      	ldr	r3, [pc, #348]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x104>
 8002832:	e000      	b.n	8002836 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d06f      	beq.n	8002922 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002842:	4b50      	ldr	r3, [pc, #320]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b00      	cmp	r3, #0
 800284c:	d017      	beq.n	800287e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800284e:	4b4d      	ldr	r3, [pc, #308]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
        || \
 8002856:	2b08      	cmp	r3, #8
 8002858:	d105      	bne.n	8002866 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800285a:	4b4a      	ldr	r3, [pc, #296]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00b      	beq.n	800287e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002866:	4b47      	ldr	r3, [pc, #284]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800286e:	2b0c      	cmp	r3, #12
 8002870:	d11c      	bne.n	80028ac <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002872:	4b44      	ldr	r3, [pc, #272]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d116      	bne.n	80028ac <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287e:	4b41      	ldr	r3, [pc, #260]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d005      	beq.n	8002896 <HAL_RCC_OscConfig+0x186>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d001      	beq.n	8002896 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e1d3      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002896:	4b3b      	ldr	r3, [pc, #236]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4937      	ldr	r1, [pc, #220]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028aa:	e03a      	b.n	8002922 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d020      	beq.n	80028f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028b4:	4b34      	ldr	r3, [pc, #208]	@ (8002988 <HAL_RCC_OscConfig+0x278>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ba:	f7fe fda5 	bl	8001408 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c2:	f7fe fda1 	bl	8001408 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e1b4      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f0      	beq.n	80028c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e0:	4b28      	ldr	r3, [pc, #160]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	4925      	ldr	r1, [pc, #148]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	600b      	str	r3, [r1, #0]
 80028f4:	e015      	b.n	8002922 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028f6:	4b24      	ldr	r3, [pc, #144]	@ (8002988 <HAL_RCC_OscConfig+0x278>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fc:	f7fe fd84 	bl	8001408 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002904:	f7fe fd80 	bl	8001408 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e193      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002916:	4b1b      	ldr	r3, [pc, #108]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d036      	beq.n	800299c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d016      	beq.n	8002964 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002936:	4b15      	ldr	r3, [pc, #84]	@ (800298c <HAL_RCC_OscConfig+0x27c>)
 8002938:	2201      	movs	r2, #1
 800293a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800293c:	f7fe fd64 	bl	8001408 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002944:	f7fe fd60 	bl	8001408 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e173      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002956:	4b0b      	ldr	r3, [pc, #44]	@ (8002984 <HAL_RCC_OscConfig+0x274>)
 8002958:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0f0      	beq.n	8002944 <HAL_RCC_OscConfig+0x234>
 8002962:	e01b      	b.n	800299c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002964:	4b09      	ldr	r3, [pc, #36]	@ (800298c <HAL_RCC_OscConfig+0x27c>)
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296a:	f7fe fd4d 	bl	8001408 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002970:	e00e      	b.n	8002990 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002972:	f7fe fd49 	bl	8001408 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d907      	bls.n	8002990 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e15c      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
 8002984:	40023800 	.word	0x40023800
 8002988:	42470000 	.word	0x42470000
 800298c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002990:	4b8a      	ldr	r3, [pc, #552]	@ (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1ea      	bne.n	8002972 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 8097 	beq.w	8002ad8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029aa:	2300      	movs	r3, #0
 80029ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ae:	4b83      	ldr	r3, [pc, #524]	@ (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10f      	bne.n	80029da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	4b7f      	ldr	r3, [pc, #508]	@ (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	4a7e      	ldr	r2, [pc, #504]	@ (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 80029c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ca:	4b7c      	ldr	r3, [pc, #496]	@ (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d2:	60bb      	str	r3, [r7, #8]
 80029d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d6:	2301      	movs	r3, #1
 80029d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029da:	4b79      	ldr	r3, [pc, #484]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d118      	bne.n	8002a18 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e6:	4b76      	ldr	r3, [pc, #472]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a75      	ldr	r2, [pc, #468]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b0>)
 80029ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f2:	f7fe fd09 	bl	8001408 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fa:	f7fe fd05 	bl	8001408 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e118      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0c:	4b6c      	ldr	r3, [pc, #432]	@ (8002bc0 <HAL_RCC_OscConfig+0x4b0>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d106      	bne.n	8002a2e <HAL_RCC_OscConfig+0x31e>
 8002a20:	4b66      	ldr	r3, [pc, #408]	@ (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a24:	4a65      	ldr	r2, [pc, #404]	@ (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a2c:	e01c      	b.n	8002a68 <HAL_RCC_OscConfig+0x358>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b05      	cmp	r3, #5
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCC_OscConfig+0x340>
 8002a36:	4b61      	ldr	r3, [pc, #388]	@ (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3a:	4a60      	ldr	r2, [pc, #384]	@ (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002a3c:	f043 0304 	orr.w	r3, r3, #4
 8002a40:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a42:	4b5e      	ldr	r3, [pc, #376]	@ (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a46:	4a5d      	ldr	r2, [pc, #372]	@ (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCC_OscConfig+0x358>
 8002a50:	4b5a      	ldr	r3, [pc, #360]	@ (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a54:	4a59      	ldr	r2, [pc, #356]	@ (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002a56:	f023 0301 	bic.w	r3, r3, #1
 8002a5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a5c:	4b57      	ldr	r3, [pc, #348]	@ (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a60:	4a56      	ldr	r2, [pc, #344]	@ (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002a62:	f023 0304 	bic.w	r3, r3, #4
 8002a66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d015      	beq.n	8002a9c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a70:	f7fe fcca 	bl	8001408 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a78:	f7fe fcc6 	bl	8001408 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e0d7      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8e:	4b4b      	ldr	r3, [pc, #300]	@ (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0ee      	beq.n	8002a78 <HAL_RCC_OscConfig+0x368>
 8002a9a:	e014      	b.n	8002ac6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9c:	f7fe fcb4 	bl	8001408 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa2:	e00a      	b.n	8002aba <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa4:	f7fe fcb0 	bl	8001408 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e0c1      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aba:	4b40      	ldr	r3, [pc, #256]	@ (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1ee      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ac6:	7dfb      	ldrb	r3, [r7, #23]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d105      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002acc:	4b3b      	ldr	r3, [pc, #236]	@ (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad0:	4a3a      	ldr	r2, [pc, #232]	@ (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002ad2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ad6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 80ad 	beq.w	8002c3c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ae2:	4b36      	ldr	r3, [pc, #216]	@ (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d060      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d145      	bne.n	8002b82 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af6:	4b33      	ldr	r3, [pc, #204]	@ (8002bc4 <HAL_RCC_OscConfig+0x4b4>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7fe fc84 	bl	8001408 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b04:	f7fe fc80 	bl	8001408 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e093      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b16:	4b29      	ldr	r3, [pc, #164]	@ (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69da      	ldr	r2, [r3, #28]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b30:	019b      	lsls	r3, r3, #6
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b38:	085b      	lsrs	r3, r3, #1
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	041b      	lsls	r3, r3, #16
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b44:	061b      	lsls	r3, r3, #24
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4c:	071b      	lsls	r3, r3, #28
 8002b4e:	491b      	ldr	r1, [pc, #108]	@ (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b54:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc4 <HAL_RCC_OscConfig+0x4b4>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5a:	f7fe fc55 	bl	8001408 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b62:	f7fe fc51 	bl	8001408 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e064      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b74:	4b11      	ldr	r3, [pc, #68]	@ (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_OscConfig+0x452>
 8002b80:	e05c      	b.n	8002c3c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b82:	4b10      	ldr	r3, [pc, #64]	@ (8002bc4 <HAL_RCC_OscConfig+0x4b4>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7fe fc3e 	bl	8001408 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b90:	f7fe fc3a 	bl	8001408 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e04d      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba2:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <HAL_RCC_OscConfig+0x4ac>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x480>
 8002bae:	e045      	b.n	8002c3c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d107      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e040      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40007000 	.word	0x40007000
 8002bc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c48 <HAL_RCC_OscConfig+0x538>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d030      	beq.n	8002c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d129      	bne.n	8002c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d122      	bne.n	8002c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d119      	bne.n	8002c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0e:	085b      	lsrs	r3, r3, #1
 8002c10:	3b01      	subs	r3, #1
 8002c12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d10f      	bne.n	8002c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d107      	bne.n	8002c38 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e000      	b.n	8002c3e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800

08002c4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e042      	b.n	8002ce4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fe fa58 	bl	8001128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2224      	movs	r2, #36	@ 0x24
 8002c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fa09 	bl	80030a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ca4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	@ 0x28
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	603b      	str	r3, [r7, #0]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	d175      	bne.n	8002df8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <HAL_UART_Transmit+0x2c>
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e06e      	b.n	8002dfa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2221      	movs	r2, #33	@ 0x21
 8002d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d2a:	f7fe fb6d 	bl	8001408 <HAL_GetTick>
 8002d2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	88fa      	ldrh	r2, [r7, #6]
 8002d34:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	88fa      	ldrh	r2, [r7, #6]
 8002d3a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d44:	d108      	bne.n	8002d58 <HAL_UART_Transmit+0x6c>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d104      	bne.n	8002d58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	61bb      	str	r3, [r7, #24]
 8002d56:	e003      	b.n	8002d60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d60:	e02e      	b.n	8002dc0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2180      	movs	r1, #128	@ 0x80
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 f8df 	bl	8002f30 <UART_WaitOnFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e03a      	b.n	8002dfa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10b      	bne.n	8002da2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	3302      	adds	r3, #2
 8002d9e:	61bb      	str	r3, [r7, #24]
 8002da0:	e007      	b.n	8002db2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	781a      	ldrb	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	3301      	adds	r3, #1
 8002db0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1cb      	bne.n	8002d62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2140      	movs	r1, #64	@ 0x40
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f8ab 	bl	8002f30 <UART_WaitOnFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2220      	movs	r2, #32
 8002de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e006      	b.n	8002dfa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	e000      	b.n	8002dfa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002df8:	2302      	movs	r3, #2
  }
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3720      	adds	r7, #32
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b08a      	sub	sp, #40	@ 0x28
 8002e06:	af02      	add	r7, sp, #8
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	603b      	str	r3, [r7, #0]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	f040 8081 	bne.w	8002f26 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_UART_Receive+0x2e>
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e079      	b.n	8002f28 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2222      	movs	r2, #34	@ 0x22
 8002e3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e48:	f7fe fade 	bl	8001408 <HAL_GetTick>
 8002e4c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	88fa      	ldrh	r2, [r7, #6]
 8002e52:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	88fa      	ldrh	r2, [r7, #6]
 8002e58:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e62:	d108      	bne.n	8002e76 <HAL_UART_Receive+0x74>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d104      	bne.n	8002e76 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	61bb      	str	r3, [r7, #24]
 8002e74:	e003      	b.n	8002e7e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002e7e:	e047      	b.n	8002f10 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2200      	movs	r2, #0
 8002e88:	2120      	movs	r1, #32
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f850 	bl	8002f30 <UART_WaitOnFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d005      	beq.n	8002ea2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e042      	b.n	8002f28 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10c      	bne.n	8002ec2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	3302      	adds	r3, #2
 8002ebe:	61bb      	str	r3, [r7, #24]
 8002ec0:	e01f      	b.n	8002f02 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eca:	d007      	beq.n	8002edc <HAL_UART_Receive+0xda>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10a      	bne.n	8002eea <HAL_UART_Receive+0xe8>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d106      	bne.n	8002eea <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	701a      	strb	r2, [r3, #0]
 8002ee8:	e008      	b.n	8002efc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	3301      	adds	r3, #1
 8002f00:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1b2      	bne.n	8002e80 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002f22:	2300      	movs	r3, #0
 8002f24:	e000      	b.n	8002f28 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002f26:	2302      	movs	r3, #2
  }
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3720      	adds	r7, #32
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f40:	e03b      	b.n	8002fba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f48:	d037      	beq.n	8002fba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4a:	f7fe fa5d 	bl	8001408 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	6a3a      	ldr	r2, [r7, #32]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d302      	bcc.n	8002f60 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e03a      	b.n	8002fda <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d023      	beq.n	8002fba <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2b80      	cmp	r3, #128	@ 0x80
 8002f76:	d020      	beq.n	8002fba <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b40      	cmp	r3, #64	@ 0x40
 8002f7c:	d01d      	beq.n	8002fba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d116      	bne.n	8002fba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f81d 	bl	8002fe2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2208      	movs	r2, #8
 8002fac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e00f      	b.n	8002fda <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	bf0c      	ite	eq
 8002fca:	2301      	moveq	r3, #1
 8002fcc:	2300      	movne	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d0b4      	beq.n	8002f42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b095      	sub	sp, #84	@ 0x54
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	330c      	adds	r3, #12
 8002ff0:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff4:	e853 3f00 	ldrex	r3, [r3]
 8002ff8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003000:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	330c      	adds	r3, #12
 8003008:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800300a:	643a      	str	r2, [r7, #64]	@ 0x40
 800300c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003010:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003012:	e841 2300 	strex	r3, r2, [r1]
 8003016:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1e5      	bne.n	8002fea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	3314      	adds	r3, #20
 8003024:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	e853 3f00 	ldrex	r3, [r3]
 800302c:	61fb      	str	r3, [r7, #28]
   return(result);
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	f023 0301 	bic.w	r3, r3, #1
 8003034:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	3314      	adds	r3, #20
 800303c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800303e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003040:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003042:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003044:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003046:	e841 2300 	strex	r3, r2, [r1]
 800304a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1e5      	bne.n	800301e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003056:	2b01      	cmp	r3, #1
 8003058:	d119      	bne.n	800308e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	330c      	adds	r3, #12
 8003060:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	e853 3f00 	ldrex	r3, [r3]
 8003068:	60bb      	str	r3, [r7, #8]
   return(result);
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f023 0310 	bic.w	r3, r3, #16
 8003070:	647b      	str	r3, [r7, #68]	@ 0x44
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	330c      	adds	r3, #12
 8003078:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800307a:	61ba      	str	r2, [r7, #24]
 800307c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307e:	6979      	ldr	r1, [r7, #20]
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	e841 2300 	strex	r3, r2, [r1]
 8003086:	613b      	str	r3, [r7, #16]
   return(result);
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1e5      	bne.n	800305a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2220      	movs	r2, #32
 8003092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800309c:	bf00      	nop
 800309e:	3754      	adds	r7, #84	@ 0x54
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030ac:	b0c0      	sub	sp, #256	@ 0x100
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80030c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c4:	68d9      	ldr	r1, [r3, #12]
 80030c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	ea40 0301 	orr.w	r3, r0, r1
 80030d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	431a      	orrs	r2, r3
 80030e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003100:	f021 010c 	bic.w	r1, r1, #12
 8003104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800310e:	430b      	orrs	r3, r1
 8003110:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800311e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003122:	6999      	ldr	r1, [r3, #24]
 8003124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	ea40 0301 	orr.w	r3, r0, r1
 800312e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	4b8f      	ldr	r3, [pc, #572]	@ (8003374 <UART_SetConfig+0x2cc>)
 8003138:	429a      	cmp	r2, r3
 800313a:	d005      	beq.n	8003148 <UART_SetConfig+0xa0>
 800313c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	4b8d      	ldr	r3, [pc, #564]	@ (8003378 <UART_SetConfig+0x2d0>)
 8003144:	429a      	cmp	r2, r3
 8003146:	d104      	bne.n	8003152 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003148:	f7ff f89e 	bl	8002288 <HAL_RCC_GetPCLK2Freq>
 800314c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003150:	e003      	b.n	800315a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003152:	f7ff f885 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 8003156:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800315a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003164:	f040 810c 	bne.w	8003380 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800316c:	2200      	movs	r2, #0
 800316e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003172:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003176:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800317a:	4622      	mov	r2, r4
 800317c:	462b      	mov	r3, r5
 800317e:	1891      	adds	r1, r2, r2
 8003180:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003182:	415b      	adcs	r3, r3
 8003184:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003186:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800318a:	4621      	mov	r1, r4
 800318c:	eb12 0801 	adds.w	r8, r2, r1
 8003190:	4629      	mov	r1, r5
 8003192:	eb43 0901 	adc.w	r9, r3, r1
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031aa:	4690      	mov	r8, r2
 80031ac:	4699      	mov	r9, r3
 80031ae:	4623      	mov	r3, r4
 80031b0:	eb18 0303 	adds.w	r3, r8, r3
 80031b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80031b8:	462b      	mov	r3, r5
 80031ba:	eb49 0303 	adc.w	r3, r9, r3
 80031be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80031c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80031ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80031d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80031d6:	460b      	mov	r3, r1
 80031d8:	18db      	adds	r3, r3, r3
 80031da:	653b      	str	r3, [r7, #80]	@ 0x50
 80031dc:	4613      	mov	r3, r2
 80031de:	eb42 0303 	adc.w	r3, r2, r3
 80031e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80031e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80031e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80031ec:	f7fd f80a 	bl	8000204 <__aeabi_uldivmod>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4b61      	ldr	r3, [pc, #388]	@ (800337c <UART_SetConfig+0x2d4>)
 80031f6:	fba3 2302 	umull	r2, r3, r3, r2
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	011c      	lsls	r4, r3, #4
 80031fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003202:	2200      	movs	r2, #0
 8003204:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003208:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800320c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003210:	4642      	mov	r2, r8
 8003212:	464b      	mov	r3, r9
 8003214:	1891      	adds	r1, r2, r2
 8003216:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003218:	415b      	adcs	r3, r3
 800321a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800321c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003220:	4641      	mov	r1, r8
 8003222:	eb12 0a01 	adds.w	sl, r2, r1
 8003226:	4649      	mov	r1, r9
 8003228:	eb43 0b01 	adc.w	fp, r3, r1
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003238:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800323c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003240:	4692      	mov	sl, r2
 8003242:	469b      	mov	fp, r3
 8003244:	4643      	mov	r3, r8
 8003246:	eb1a 0303 	adds.w	r3, sl, r3
 800324a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800324e:	464b      	mov	r3, r9
 8003250:	eb4b 0303 	adc.w	r3, fp, r3
 8003254:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003264:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003268:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800326c:	460b      	mov	r3, r1
 800326e:	18db      	adds	r3, r3, r3
 8003270:	643b      	str	r3, [r7, #64]	@ 0x40
 8003272:	4613      	mov	r3, r2
 8003274:	eb42 0303 	adc.w	r3, r2, r3
 8003278:	647b      	str	r3, [r7, #68]	@ 0x44
 800327a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800327e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003282:	f7fc ffbf 	bl	8000204 <__aeabi_uldivmod>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4611      	mov	r1, r2
 800328c:	4b3b      	ldr	r3, [pc, #236]	@ (800337c <UART_SetConfig+0x2d4>)
 800328e:	fba3 2301 	umull	r2, r3, r3, r1
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	2264      	movs	r2, #100	@ 0x64
 8003296:	fb02 f303 	mul.w	r3, r2, r3
 800329a:	1acb      	subs	r3, r1, r3
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80032a2:	4b36      	ldr	r3, [pc, #216]	@ (800337c <UART_SetConfig+0x2d4>)
 80032a4:	fba3 2302 	umull	r2, r3, r3, r2
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80032b0:	441c      	add	r4, r3
 80032b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032b6:	2200      	movs	r2, #0
 80032b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80032c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80032c4:	4642      	mov	r2, r8
 80032c6:	464b      	mov	r3, r9
 80032c8:	1891      	adds	r1, r2, r2
 80032ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80032cc:	415b      	adcs	r3, r3
 80032ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80032d4:	4641      	mov	r1, r8
 80032d6:	1851      	adds	r1, r2, r1
 80032d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80032da:	4649      	mov	r1, r9
 80032dc:	414b      	adcs	r3, r1
 80032de:	637b      	str	r3, [r7, #52]	@ 0x34
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80032ec:	4659      	mov	r1, fp
 80032ee:	00cb      	lsls	r3, r1, #3
 80032f0:	4651      	mov	r1, sl
 80032f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032f6:	4651      	mov	r1, sl
 80032f8:	00ca      	lsls	r2, r1, #3
 80032fa:	4610      	mov	r0, r2
 80032fc:	4619      	mov	r1, r3
 80032fe:	4603      	mov	r3, r0
 8003300:	4642      	mov	r2, r8
 8003302:	189b      	adds	r3, r3, r2
 8003304:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003308:	464b      	mov	r3, r9
 800330a:	460a      	mov	r2, r1
 800330c:	eb42 0303 	adc.w	r3, r2, r3
 8003310:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003320:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003328:	460b      	mov	r3, r1
 800332a:	18db      	adds	r3, r3, r3
 800332c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800332e:	4613      	mov	r3, r2
 8003330:	eb42 0303 	adc.w	r3, r2, r3
 8003334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003336:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800333a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800333e:	f7fc ff61 	bl	8000204 <__aeabi_uldivmod>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4b0d      	ldr	r3, [pc, #52]	@ (800337c <UART_SetConfig+0x2d4>)
 8003348:	fba3 1302 	umull	r1, r3, r3, r2
 800334c:	095b      	lsrs	r3, r3, #5
 800334e:	2164      	movs	r1, #100	@ 0x64
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	3332      	adds	r3, #50	@ 0x32
 800335a:	4a08      	ldr	r2, [pc, #32]	@ (800337c <UART_SetConfig+0x2d4>)
 800335c:	fba2 2303 	umull	r2, r3, r2, r3
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	f003 0207 	and.w	r2, r3, #7
 8003366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4422      	add	r2, r4
 800336e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003370:	e106      	b.n	8003580 <UART_SetConfig+0x4d8>
 8003372:	bf00      	nop
 8003374:	40011000 	.word	0x40011000
 8003378:	40011400 	.word	0x40011400
 800337c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003384:	2200      	movs	r2, #0
 8003386:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800338a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800338e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003392:	4642      	mov	r2, r8
 8003394:	464b      	mov	r3, r9
 8003396:	1891      	adds	r1, r2, r2
 8003398:	6239      	str	r1, [r7, #32]
 800339a:	415b      	adcs	r3, r3
 800339c:	627b      	str	r3, [r7, #36]	@ 0x24
 800339e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033a2:	4641      	mov	r1, r8
 80033a4:	1854      	adds	r4, r2, r1
 80033a6:	4649      	mov	r1, r9
 80033a8:	eb43 0501 	adc.w	r5, r3, r1
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	00eb      	lsls	r3, r5, #3
 80033b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033ba:	00e2      	lsls	r2, r4, #3
 80033bc:	4614      	mov	r4, r2
 80033be:	461d      	mov	r5, r3
 80033c0:	4643      	mov	r3, r8
 80033c2:	18e3      	adds	r3, r4, r3
 80033c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80033c8:	464b      	mov	r3, r9
 80033ca:	eb45 0303 	adc.w	r3, r5, r3
 80033ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80033d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80033ee:	4629      	mov	r1, r5
 80033f0:	008b      	lsls	r3, r1, #2
 80033f2:	4621      	mov	r1, r4
 80033f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033f8:	4621      	mov	r1, r4
 80033fa:	008a      	lsls	r2, r1, #2
 80033fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003400:	f7fc ff00 	bl	8000204 <__aeabi_uldivmod>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4b60      	ldr	r3, [pc, #384]	@ (800358c <UART_SetConfig+0x4e4>)
 800340a:	fba3 2302 	umull	r2, r3, r3, r2
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	011c      	lsls	r4, r3, #4
 8003412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003416:	2200      	movs	r2, #0
 8003418:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800341c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003420:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003424:	4642      	mov	r2, r8
 8003426:	464b      	mov	r3, r9
 8003428:	1891      	adds	r1, r2, r2
 800342a:	61b9      	str	r1, [r7, #24]
 800342c:	415b      	adcs	r3, r3
 800342e:	61fb      	str	r3, [r7, #28]
 8003430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003434:	4641      	mov	r1, r8
 8003436:	1851      	adds	r1, r2, r1
 8003438:	6139      	str	r1, [r7, #16]
 800343a:	4649      	mov	r1, r9
 800343c:	414b      	adcs	r3, r1
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800344c:	4659      	mov	r1, fp
 800344e:	00cb      	lsls	r3, r1, #3
 8003450:	4651      	mov	r1, sl
 8003452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003456:	4651      	mov	r1, sl
 8003458:	00ca      	lsls	r2, r1, #3
 800345a:	4610      	mov	r0, r2
 800345c:	4619      	mov	r1, r3
 800345e:	4603      	mov	r3, r0
 8003460:	4642      	mov	r2, r8
 8003462:	189b      	adds	r3, r3, r2
 8003464:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003468:	464b      	mov	r3, r9
 800346a:	460a      	mov	r2, r1
 800346c:	eb42 0303 	adc.w	r3, r2, r3
 8003470:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800347e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800348c:	4649      	mov	r1, r9
 800348e:	008b      	lsls	r3, r1, #2
 8003490:	4641      	mov	r1, r8
 8003492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003496:	4641      	mov	r1, r8
 8003498:	008a      	lsls	r2, r1, #2
 800349a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800349e:	f7fc feb1 	bl	8000204 <__aeabi_uldivmod>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4611      	mov	r1, r2
 80034a8:	4b38      	ldr	r3, [pc, #224]	@ (800358c <UART_SetConfig+0x4e4>)
 80034aa:	fba3 2301 	umull	r2, r3, r3, r1
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	2264      	movs	r2, #100	@ 0x64
 80034b2:	fb02 f303 	mul.w	r3, r2, r3
 80034b6:	1acb      	subs	r3, r1, r3
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	3332      	adds	r3, #50	@ 0x32
 80034bc:	4a33      	ldr	r2, [pc, #204]	@ (800358c <UART_SetConfig+0x4e4>)
 80034be:	fba2 2303 	umull	r2, r3, r2, r3
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034c8:	441c      	add	r4, r3
 80034ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034ce:	2200      	movs	r2, #0
 80034d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80034d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80034d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80034d8:	4642      	mov	r2, r8
 80034da:	464b      	mov	r3, r9
 80034dc:	1891      	adds	r1, r2, r2
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	415b      	adcs	r3, r3
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034e8:	4641      	mov	r1, r8
 80034ea:	1851      	adds	r1, r2, r1
 80034ec:	6039      	str	r1, [r7, #0]
 80034ee:	4649      	mov	r1, r9
 80034f0:	414b      	adcs	r3, r1
 80034f2:	607b      	str	r3, [r7, #4]
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003500:	4659      	mov	r1, fp
 8003502:	00cb      	lsls	r3, r1, #3
 8003504:	4651      	mov	r1, sl
 8003506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800350a:	4651      	mov	r1, sl
 800350c:	00ca      	lsls	r2, r1, #3
 800350e:	4610      	mov	r0, r2
 8003510:	4619      	mov	r1, r3
 8003512:	4603      	mov	r3, r0
 8003514:	4642      	mov	r2, r8
 8003516:	189b      	adds	r3, r3, r2
 8003518:	66bb      	str	r3, [r7, #104]	@ 0x68
 800351a:	464b      	mov	r3, r9
 800351c:	460a      	mov	r2, r1
 800351e:	eb42 0303 	adc.w	r3, r2, r3
 8003522:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	663b      	str	r3, [r7, #96]	@ 0x60
 800352e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800353c:	4649      	mov	r1, r9
 800353e:	008b      	lsls	r3, r1, #2
 8003540:	4641      	mov	r1, r8
 8003542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003546:	4641      	mov	r1, r8
 8003548:	008a      	lsls	r2, r1, #2
 800354a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800354e:	f7fc fe59 	bl	8000204 <__aeabi_uldivmod>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4b0d      	ldr	r3, [pc, #52]	@ (800358c <UART_SetConfig+0x4e4>)
 8003558:	fba3 1302 	umull	r1, r3, r3, r2
 800355c:	095b      	lsrs	r3, r3, #5
 800355e:	2164      	movs	r1, #100	@ 0x64
 8003560:	fb01 f303 	mul.w	r3, r1, r3
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	3332      	adds	r3, #50	@ 0x32
 800356a:	4a08      	ldr	r2, [pc, #32]	@ (800358c <UART_SetConfig+0x4e4>)
 800356c:	fba2 2303 	umull	r2, r3, r2, r3
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	f003 020f 	and.w	r2, r3, #15
 8003576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4422      	add	r2, r4
 800357e:	609a      	str	r2, [r3, #8]
}
 8003580:	bf00      	nop
 8003582:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003586:	46bd      	mov	sp, r7
 8003588:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800358c:	51eb851f 	.word	0x51eb851f

08003590 <memset>:
 8003590:	4402      	add	r2, r0
 8003592:	4603      	mov	r3, r0
 8003594:	4293      	cmp	r3, r2
 8003596:	d100      	bne.n	800359a <memset+0xa>
 8003598:	4770      	bx	lr
 800359a:	f803 1b01 	strb.w	r1, [r3], #1
 800359e:	e7f9      	b.n	8003594 <memset+0x4>

080035a0 <__libc_init_array>:
 80035a0:	b570      	push	{r4, r5, r6, lr}
 80035a2:	4d0d      	ldr	r5, [pc, #52]	@ (80035d8 <__libc_init_array+0x38>)
 80035a4:	4c0d      	ldr	r4, [pc, #52]	@ (80035dc <__libc_init_array+0x3c>)
 80035a6:	1b64      	subs	r4, r4, r5
 80035a8:	10a4      	asrs	r4, r4, #2
 80035aa:	2600      	movs	r6, #0
 80035ac:	42a6      	cmp	r6, r4
 80035ae:	d109      	bne.n	80035c4 <__libc_init_array+0x24>
 80035b0:	4d0b      	ldr	r5, [pc, #44]	@ (80035e0 <__libc_init_array+0x40>)
 80035b2:	4c0c      	ldr	r4, [pc, #48]	@ (80035e4 <__libc_init_array+0x44>)
 80035b4:	f000 f818 	bl	80035e8 <_init>
 80035b8:	1b64      	subs	r4, r4, r5
 80035ba:	10a4      	asrs	r4, r4, #2
 80035bc:	2600      	movs	r6, #0
 80035be:	42a6      	cmp	r6, r4
 80035c0:	d105      	bne.n	80035ce <__libc_init_array+0x2e>
 80035c2:	bd70      	pop	{r4, r5, r6, pc}
 80035c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80035c8:	4798      	blx	r3
 80035ca:	3601      	adds	r6, #1
 80035cc:	e7ee      	b.n	80035ac <__libc_init_array+0xc>
 80035ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80035d2:	4798      	blx	r3
 80035d4:	3601      	adds	r6, #1
 80035d6:	e7f2      	b.n	80035be <__libc_init_array+0x1e>
 80035d8:	0800362c 	.word	0x0800362c
 80035dc:	0800362c 	.word	0x0800362c
 80035e0:	0800362c 	.word	0x0800362c
 80035e4:	08003630 	.word	0x08003630

080035e8 <_init>:
 80035e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ea:	bf00      	nop
 80035ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ee:	bc08      	pop	{r3}
 80035f0:	469e      	mov	lr, r3
 80035f2:	4770      	bx	lr

080035f4 <_fini>:
 80035f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f6:	bf00      	nop
 80035f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035fa:	bc08      	pop	{r3}
 80035fc:	469e      	mov	lr, r3
 80035fe:	4770      	bx	lr
