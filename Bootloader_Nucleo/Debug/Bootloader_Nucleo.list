
Bootloader_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033c4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003588  08003588  00004588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035ac  080035ac  00005028  2**0
                  CONTENTS
  4 .ARM          00000008  080035ac  080035ac  000045ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035b4  080035b4  00005028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035b4  080035b4  000045b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080035b8  080035b8  000045b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  080035bc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000028  080035e4  00005028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  080035e4  00005100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a160  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e46  00000000  00000000  0000f1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  00011000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006fa  00000000  00000000  00011930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000218b2  00000000  00000000  0001202a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba4b  00000000  00000000  000338dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9571  00000000  00000000  0003f327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108898  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002468  00000000  00000000  001088dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0010ad44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000028 	.word	0x20000028
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003570 	.word	0x08003570

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	08003570 	.word	0x08003570

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <BL_voidHandle_GetVersion_CMD>:
/**
 * @brief Sending Packet for the following CMD GetVersion to get the version of the bootloader
 * 
 * @param copy_pu8CmdPacket 
 */
void BL_voidHandle_GetVersion_CMD(uint8 * copy_pu8CmdPacket){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	uint8 BL_version[4] = {BL_SW_vendor_ID, BL_SW_major_version, BL_SW_minor_version ,BL_SW_patch_version};
 80004fc:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8000500:	60bb      	str	r3, [r7, #8]
	uint8 CRCStatus, CmdLen;
	uint32 Host_CRC ; 
	
	CmdLen = copy_pu8CmdPacket[0]+1;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	3301      	adds	r3, #1
 8000508:	75fb      	strb	r3, [r7, #23]

	/*cmd len | cmd | ... | CRC (last 4 bytes)|*/
	Host_CRC =  *((uint32 *)(copy_pu8CmdPacket + CmdLen - 4));
 800050a:	7dfb      	ldrb	r3, [r7, #23]
 800050c:	3b04      	subs	r3, #4
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	4413      	add	r3, r2
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	613b      	str	r3, [r7, #16]

	CRCStatus = u8VerifyCRC(copy_pu8CmdPacket , ( CmdLen - 4) , Host_CRC );
 8000516:	7dfb      	ldrb	r3, [r7, #23]
 8000518:	3b04      	subs	r3, #4
 800051a:	b2db      	uxtb	r3, r3
 800051c:	693a      	ldr	r2, [r7, #16]
 800051e:	4619      	mov	r1, r3
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f000 fa25 	bl	8000970 <u8VerifyCRC>
 8000526:	4603      	mov	r3, r0
 8000528:	73fb      	strb	r3, [r7, #15]

	if(CRCStatus == CRC_VERIFING_PASS){
 800052a:	7bfb      	ldrb	r3, [r7, #15]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d10b      	bne.n	8000548 <BL_voidHandle_GetVersion_CMD+0x54>
		voidSendAck(4);
 8000530:	2004      	movs	r0, #4
 8000532:	f000 fa55 	bl	80009e0 <voidSendAck>
		HAL_UART_Transmit(&huart2,(uint8 *)BL_version,4, HAL_MAX_DELAY);
 8000536:	f107 0108 	add.w	r1, r7, #8
 800053a:	f04f 33ff 	mov.w	r3, #4294967295
 800053e:	2204      	movs	r2, #4
 8000540:	4804      	ldr	r0, [pc, #16]	@ (8000554 <BL_voidHandle_GetVersion_CMD+0x60>)
 8000542:	f002 fb97 	bl	8002c74 <HAL_UART_Transmit>
	}else{
		voidSendNotAck();
	}
}
 8000546:	e001      	b.n	800054c <BL_voidHandle_GetVersion_CMD+0x58>
		voidSendNotAck();
 8000548:	f000 fa62 	bl	8000a10 <voidSendNotAck>
}
 800054c:	bf00      	nop
 800054e:	3718      	adds	r7, #24
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	2000004c 	.word	0x2000004c

08000558 <BL_voidHandle_GetHelp_CMD>:
/**
 * @brief Sending Packet for the Supported bootloader commands
 *
 * @param copy_pu8CmdPacket
 */
void BL_voidHandle_GetHelp_CMD(uint8 * copy_pu8CmdPacket){
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	uint8 CRCStatus, CmdLen;
	uint32 Host_CRC ;

	CmdLen = copy_pu8CmdPacket[0]+1;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	77fb      	strb	r3, [r7, #31]
	Host_CRC =  *((uint32 *)(copy_pu8CmdPacket + CmdLen - 4));
 8000568:	7ffb      	ldrb	r3, [r7, #31]
 800056a:	3b04      	subs	r3, #4
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	4413      	add	r3, r2
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	61bb      	str	r3, [r7, #24]

	CRCStatus = u8VerifyCRC(copy_pu8CmdPacket , ( CmdLen - 4) , Host_CRC );
 8000574:	7ffb      	ldrb	r3, [r7, #31]
 8000576:	3b04      	subs	r3, #4
 8000578:	b2db      	uxtb	r3, r3
 800057a:	69ba      	ldr	r2, [r7, #24]
 800057c:	4619      	mov	r1, r3
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f000 f9f6 	bl	8000970 <u8VerifyCRC>
 8000584:	4603      	mov	r3, r0
 8000586:	75fb      	strb	r3, [r7, #23]

	if(CRCStatus == CRC_VERIFING_PASS){
 8000588:	7dfb      	ldrb	r3, [r7, #23]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d111      	bne.n	80005b2 <BL_voidHandle_GetHelp_CMD+0x5a>

		uint8 BL_Supported_CMDs[] = {
 800058e:	4a0c      	ldr	r2, [pc, #48]	@ (80005c0 <BL_voidHandle_GetHelp_CMD+0x68>)
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	ca07      	ldmia	r2, {r0, r1, r2}
 8000596:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				BL_CMD_READ_SECTOR_STATUS ,
				BL_CMD_OTP_READ           ,
				BL_CMD_DISABLE_RW_PROTECT
		};

		voidSendAck(sizeof(BL_Supported_CMDs));
 800059a:	200c      	movs	r0, #12
 800059c:	f000 fa20 	bl	80009e0 <voidSendAck>
		HAL_UART_Transmit(&huart2,(uint8 *)BL_Supported_CMDs,sizeof(BL_Supported_CMDs), HAL_MAX_DELAY);
 80005a0:	f107 0108 	add.w	r1, r7, #8
 80005a4:	f04f 33ff 	mov.w	r3, #4294967295
 80005a8:	220c      	movs	r2, #12
 80005aa:	4806      	ldr	r0, [pc, #24]	@ (80005c4 <BL_voidHandle_GetHelp_CMD+0x6c>)
 80005ac:	f002 fb62 	bl	8002c74 <HAL_UART_Transmit>
	}else{
		voidSendNotAck();
	}

}
 80005b0:	e001      	b.n	80005b6 <BL_voidHandle_GetHelp_CMD+0x5e>
		voidSendNotAck();
 80005b2:	f000 fa2d 	bl	8000a10 <voidSendNotAck>
}
 80005b6:	bf00      	nop
 80005b8:	3720      	adds	r7, #32
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	08003588 	.word	0x08003588
 80005c4:	2000004c 	.word	0x2000004c

080005c8 <BL_voidHandle_GetChipID_CMD>:

void BL_voidHandle_GetChipID_CMD(uint8 * copy_pu8CmdPacket){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	uint8 CRCStatus, CmdLen;
	uint32 Host_CRC ;
	uint16 DeviceID;

	CmdLen = copy_pu8CmdPacket[0]+1;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	75fb      	strb	r3, [r7, #23]

	Host_CRC =  *((uint32 *)(copy_pu8CmdPacket + CmdLen - 4));
 80005d8:	7dfb      	ldrb	r3, [r7, #23]
 80005da:	3b04      	subs	r3, #4
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	4413      	add	r3, r2
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	613b      	str	r3, [r7, #16]

	CRCStatus = u8VerifyCRC(copy_pu8CmdPacket , ( CmdLen - 4) , Host_CRC );
 80005e4:	7dfb      	ldrb	r3, [r7, #23]
 80005e6:	3b04      	subs	r3, #4
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	693a      	ldr	r2, [r7, #16]
 80005ec:	4619      	mov	r1, r3
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f000 f9be 	bl	8000970 <u8VerifyCRC>
 80005f4:	4603      	mov	r3, r0
 80005f6:	73fb      	strb	r3, [r7, #15]

	if(CRCStatus == CRC_VERIFING_PASS){
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d112      	bne.n	8000624 <BL_voidHandle_GetChipID_CMD+0x5c>
		/* DEV_ID[11:0]: Device identifier*/
		DeviceID = (DBG_MCU_ID_REG & 0x0fff);
 80005fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <BL_voidHandle_GetChipID_CMD+0x68>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	b29b      	uxth	r3, r3
 8000604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000608:	b29b      	uxth	r3, r3
 800060a:	81bb      	strh	r3, [r7, #12]

		voidSendAck(2);
 800060c:	2002      	movs	r0, #2
 800060e:	f000 f9e7 	bl	80009e0 <voidSendAck>
		HAL_UART_Transmit(&huart2,(uint8 *)&DeviceID,2, HAL_MAX_DELAY);
 8000612:	f107 010c 	add.w	r1, r7, #12
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	2202      	movs	r2, #2
 800061c:	4805      	ldr	r0, [pc, #20]	@ (8000634 <BL_voidHandle_GetChipID_CMD+0x6c>)
 800061e:	f002 fb29 	bl	8002c74 <HAL_UART_Transmit>
	}else{
		voidSendNotAck();
	}
}
 8000622:	e001      	b.n	8000628 <BL_voidHandle_GetChipID_CMD+0x60>
		voidSendNotAck();
 8000624:	f000 f9f4 	bl	8000a10 <voidSendNotAck>
}
 8000628:	bf00      	nop
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	e0042000 	.word	0xe0042000
 8000634:	2000004c 	.word	0x2000004c

08000638 <BL_voidHandle_GetRDPStatus_CMD>:

void BL_voidHandle_GetRDPStatus_CMD(uint8 * copy_pu8CmdPacket){
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	uint8 CRCStatus, CmdLen;
	uint32 Host_CRC ;
	uint8 RDP_Status;

	CmdLen = copy_pu8CmdPacket[0]+1;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	3301      	adds	r3, #1
 8000646:	75fb      	strb	r3, [r7, #23]

	Host_CRC =  *((uint32 *)(copy_pu8CmdPacket + CmdLen - 4));
 8000648:	7dfb      	ldrb	r3, [r7, #23]
 800064a:	3b04      	subs	r3, #4
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	4413      	add	r3, r2
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	613b      	str	r3, [r7, #16]

	CRCStatus = u8VerifyCRC(copy_pu8CmdPacket , ( CmdLen - 4) , Host_CRC );
 8000654:	7dfb      	ldrb	r3, [r7, #23]
 8000656:	3b04      	subs	r3, #4
 8000658:	b2db      	uxtb	r3, r3
 800065a:	693a      	ldr	r2, [r7, #16]
 800065c:	4619      	mov	r1, r3
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f000 f986 	bl	8000970 <u8VerifyCRC>
 8000664:	4603      	mov	r3, r0
 8000666:	73fb      	strb	r3, [r7, #15]

	if(CRCStatus == CRC_VERIFING_PASS){
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d110      	bne.n	8000690 <BL_voidHandle_GetRDPStatus_CMD+0x58>
		RDP_Status = (uint8)((RDP_USER_OPTION_WORD >> 8) & 0xff );
 800066e:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <BL_voidHandle_GetRDPStatus_CMD+0x64>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	0a1b      	lsrs	r3, r3, #8
 8000674:	b2db      	uxtb	r3, r3
 8000676:	73bb      	strb	r3, [r7, #14]
		voidSendAck(1);
 8000678:	2001      	movs	r0, #1
 800067a:	f000 f9b1 	bl	80009e0 <voidSendAck>
		HAL_UART_Transmit(&huart2,&RDP_Status,1, HAL_MAX_DELAY);
 800067e:	f107 010e 	add.w	r1, r7, #14
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
 8000686:	2201      	movs	r2, #1
 8000688:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <BL_voidHandle_GetRDPStatus_CMD+0x68>)
 800068a:	f002 faf3 	bl	8002c74 <HAL_UART_Transmit>
	}else{
		voidSendNotAck();
	}
}
 800068e:	e001      	b.n	8000694 <BL_voidHandle_GetRDPStatus_CMD+0x5c>
		voidSendNotAck();
 8000690:	f000 f9be 	bl	8000a10 <voidSendNotAck>
}
 8000694:	bf00      	nop
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	1fffc000 	.word	0x1fffc000
 80006a0:	2000004c 	.word	0x2000004c

080006a4 <BL_voidHandle_GoToAddress_CMD>:

void BL_voidHandle_GoToAddress_CMD(uint8 * copy_pu8CmdPacket){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	uint8 CRCStatus, CmdLen;
	uint32 Host_CRC ;
	uint32 HOST_Address;
	BL_Address_Status_t Address_Status;

	CmdLen = copy_pu8CmdPacket[0]+1;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	77fb      	strb	r3, [r7, #31]

	Host_CRC =  *((uint32 *)(copy_pu8CmdPacket + CmdLen - 4));
 80006b4:	7ffb      	ldrb	r3, [r7, #31]
 80006b6:	3b04      	subs	r3, #4
 80006b8:	687a      	ldr	r2, [r7, #4]
 80006ba:	4413      	add	r3, r2
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	61bb      	str	r3, [r7, #24]

	CRCStatus = u8VerifyCRC(copy_pu8CmdPacket , ( CmdLen - 4) , Host_CRC );
 80006c0:	7ffb      	ldrb	r3, [r7, #31]
 80006c2:	3b04      	subs	r3, #4
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	69ba      	ldr	r2, [r7, #24]
 80006c8:	4619      	mov	r1, r3
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f000 f950 	bl	8000970 <u8VerifyCRC>
 80006d0:	4603      	mov	r3, r0
 80006d2:	75fb      	strb	r3, [r7, #23]

	if(CRCStatus == CRC_VERIFING_PASS){
 80006d4:	7dfb      	ldrb	r3, [r7, #23]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d123      	bne.n	8000722 <BL_voidHandle_GoToAddress_CMD+0x7e>
		/*reading address given by the host*/
		HOST_Address = *((uint32 *)(&copy_pu8CmdPacket[2]));
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80006e0:	613b      	str	r3, [r7, #16]
		Address_Status = ValidateAddress(HOST_Address);
 80006e2:	6938      	ldr	r0, [r7, #16]
 80006e4:	f000 f9a6 	bl	8000a34 <ValidateAddress>
 80006e8:	4603      	mov	r3, r0
 80006ea:	72fb      	strb	r3, [r7, #11]
		if(Address_Status == Address_VALID){
 80006ec:	7afb      	ldrb	r3, [r7, #11]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d114      	bne.n	800071c <BL_voidHandle_GoToAddress_CMD+0x78>
			voidSendAck(1);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f000 f974 	bl	80009e0 <voidSendAck>
			HAL_UART_Transmit(&huart2,&Address_Status,1, HAL_MAX_DELAY);
 80006f8:	f107 010b 	add.w	r1, r7, #11
 80006fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000700:	2201      	movs	r2, #1
 8000702:	480b      	ldr	r0, [pc, #44]	@ (8000730 <BL_voidHandle_GoToAddress_CMD+0x8c>)
 8000704:	f002 fab6 	bl	8002c74 <HAL_UART_Transmit>

			/*Define a pointer to function*/
			void (*pvFuncPtr)(void) = NULL;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
			/*increment address by 1 to make t-bit = 1
			 * as t-bit (Thumb-bit) to assure operating in Thumb state */
			HOST_Address ++;
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	3301      	adds	r3, #1
 8000710:	613b      	str	r3, [r7, #16]

			pvFuncPtr = (void *)HOST_Address;
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	60fb      	str	r3, [r7, #12]

			/*Jump to the given address*/
			pvFuncPtr();
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	4798      	blx	r3
			voidSendNotAck();
		}
	}else{
		voidSendNotAck();
	}
}
 800071a:	e004      	b.n	8000726 <BL_voidHandle_GoToAddress_CMD+0x82>
			voidSendNotAck();
 800071c:	f000 f978 	bl	8000a10 <voidSendNotAck>
}
 8000720:	e001      	b.n	8000726 <BL_voidHandle_GoToAddress_CMD+0x82>
		voidSendNotAck();
 8000722:	f000 f975 	bl	8000a10 <voidSendNotAck>
}
 8000726:	bf00      	nop
 8000728:	3720      	adds	r7, #32
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000004c 	.word	0x2000004c

08000734 <BL_voidHandle_FlashErase_CMD>:

void BL_voidHandle_FlashErase_CMD(uint8 * copy_pu8CmdPacket){
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	uint8 CRCStatus, CmdLen;
	uint32 Host_CRC ;
	uint8 EraseStatus, SectorNumber, NumberOfSectors;

	CmdLen = copy_pu8CmdPacket[0]+1;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	3301      	adds	r3, #1
 8000742:	75fb      	strb	r3, [r7, #23]

	Host_CRC =  *((uint32 *)(copy_pu8CmdPacket + CmdLen - 4));
 8000744:	7dfb      	ldrb	r3, [r7, #23]
 8000746:	3b04      	subs	r3, #4
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	4413      	add	r3, r2
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	613b      	str	r3, [r7, #16]

	CRCStatus = u8VerifyCRC(copy_pu8CmdPacket , ( CmdLen - 4) , Host_CRC );
 8000750:	7dfb      	ldrb	r3, [r7, #23]
 8000752:	3b04      	subs	r3, #4
 8000754:	b2db      	uxtb	r3, r3
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	4619      	mov	r1, r3
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f000 f908 	bl	8000970 <u8VerifyCRC>
 8000760:	4603      	mov	r3, r0
 8000762:	73fb      	strb	r3, [r7, #15]

	SectorNumber = copy_pu8CmdPacket[2];
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	789b      	ldrb	r3, [r3, #2]
 8000768:	73bb      	strb	r3, [r7, #14]
	NumberOfSectors = copy_pu8CmdPacket[3];
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	78db      	ldrb	r3, [r3, #3]
 800076e:	737b      	strb	r3, [r7, #13]

	if(CRCStatus == CRC_VERIFING_PASS){
 8000770:	7bfb      	ldrb	r3, [r7, #15]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d11d      	bne.n	80007b2 <BL_voidHandle_FlashErase_CMD+0x7e>
		voidSendAck(1);
 8000776:	2001      	movs	r0, #1
 8000778:	f000 f932 	bl	80009e0 <voidSendAck>
		/*Toggling led while Erasing*/
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2120      	movs	r1, #32
 8000780:	480f      	ldr	r0, [pc, #60]	@ (80007c0 <BL_voidHandle_FlashErase_CMD+0x8c>)
 8000782:	f001 fc25 	bl	8001fd0 <HAL_GPIO_WritePin>
		/*Start Erasing Initialization*/
		EraseStatus = u8Execute_FlashErase(SectorNumber, NumberOfSectors);
 8000786:	7b7a      	ldrb	r2, [r7, #13]
 8000788:	7bbb      	ldrb	r3, [r7, #14]
 800078a:	4611      	mov	r1, r2
 800078c:	4618      	mov	r0, r3
 800078e:	f000 f979 	bl	8000a84 <u8Execute_FlashErase>
 8000792:	4603      	mov	r3, r0
 8000794:	733b      	strb	r3, [r7, #12]

		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2120      	movs	r1, #32
 800079a:	4809      	ldr	r0, [pc, #36]	@ (80007c0 <BL_voidHandle_FlashErase_CMD+0x8c>)
 800079c:	f001 fc18 	bl	8001fd0 <HAL_GPIO_WritePin>

		/*Sending the HAL_ErrorStatus*/
		HAL_UART_Transmit(&huart2,&EraseStatus,1, HAL_MAX_DELAY);
 80007a0:	f107 010c 	add.w	r1, r7, #12
 80007a4:	f04f 33ff 	mov.w	r3, #4294967295
 80007a8:	2201      	movs	r2, #1
 80007aa:	4806      	ldr	r0, [pc, #24]	@ (80007c4 <BL_voidHandle_FlashErase_CMD+0x90>)
 80007ac:	f002 fa62 	bl	8002c74 <HAL_UART_Transmit>
	}else{
		voidSendNotAck();
	}
}
 80007b0:	e001      	b.n	80007b6 <BL_voidHandle_FlashErase_CMD+0x82>
		voidSendNotAck();
 80007b2:	f000 f92d 	bl	8000a10 <voidSendNotAck>
}
 80007b6:	bf00      	nop
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40020000 	.word	0x40020000
 80007c4:	2000004c 	.word	0x2000004c

080007c8 <BL_voidHandle_MemoryWrite_CMD>:

void BL_voidHandle_MemoryWrite_CMD(uint8 * copy_pu8CmdPacket){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	uint32 BaseAddress;
	BL_Address_Status_t Address_Status;
	BL_FlashPayload_Status_t FlashWriting_Status;
	uint8 Payload_Length;

	CmdLen = copy_pu8CmdPacket[0]+1;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	3301      	adds	r3, #1
 80007d6:	75fb      	strb	r3, [r7, #23]

	Host_CRC =  *((uint32 *)(copy_pu8CmdPacket + CmdLen - 4));
 80007d8:	7dfb      	ldrb	r3, [r7, #23]
 80007da:	3b04      	subs	r3, #4
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	4413      	add	r3, r2
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	613b      	str	r3, [r7, #16]

	/*Extract the base - 4 bytes - address given*/
	BaseAddress = *((uint32 *)(&copy_pu8CmdPacket[2]));
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80007ea:	60fb      	str	r3, [r7, #12]
	/*Extract the Payload Length given */
	Payload_Length = copy_pu8CmdPacket[6];
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	799b      	ldrb	r3, [r3, #6]
 80007f0:	72fb      	strb	r3, [r7, #11]

	CRCStatus = u8VerifyCRC(copy_pu8CmdPacket , ( CmdLen - 4) , Host_CRC );
 80007f2:	7dfb      	ldrb	r3, [r7, #23]
 80007f4:	3b04      	subs	r3, #4
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	693a      	ldr	r2, [r7, #16]
 80007fa:	4619      	mov	r1, r3
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f000 f8b7 	bl	8000970 <u8VerifyCRC>
 8000802:	4603      	mov	r3, r0
 8000804:	72bb      	strb	r3, [r7, #10]

	if(CRCStatus == CRC_VERIFING_PASS){
 8000806:	7abb      	ldrb	r3, [r7, #10]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d11f      	bne.n	800084c <BL_voidHandle_MemoryWrite_CMD+0x84>
		voidSendAck(1);
 800080c:	2001      	movs	r0, #1
 800080e:	f000 f8e7 	bl	80009e0 <voidSendAck>

		/*Validate Address give by the user not to exceed the FLASH or SRAM regions*/
		Address_Status = ValidateAddress(BaseAddress);
 8000812:	68f8      	ldr	r0, [r7, #12]
 8000814:	f000 f90e 	bl	8000a34 <ValidateAddress>
 8000818:	4603      	mov	r3, r0
 800081a:	727b      	strb	r3, [r7, #9]

		if(Address_Status == Address_VALID){
 800081c:	7a7b      	ldrb	r3, [r7, #9]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d109      	bne.n	8000836 <BL_voidHandle_MemoryWrite_CMD+0x6e>
			FlashWriting_Status = u8Execute_MemoryWrite(&copy_pu8CmdPacket[7], BaseAddress, Payload_Length);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	3307      	adds	r3, #7
 8000826:	7afa      	ldrb	r2, [r7, #11]
 8000828:	68f9      	ldr	r1, [r7, #12]
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f984 	bl	8000b38 <u8Execute_MemoryWrite>
 8000830:	4603      	mov	r3, r0
 8000832:	723b      	strb	r3, [r7, #8]
 8000834:	e001      	b.n	800083a <BL_voidHandle_MemoryWrite_CMD+0x72>
		}else{
			FlashWriting_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000836:	2300      	movs	r3, #0
 8000838:	723b      	strb	r3, [r7, #8]
		}

		HAL_UART_Transmit(&huart2,&FlashWriting_Status,1, HAL_MAX_DELAY);
 800083a:	f107 0108 	add.w	r1, r7, #8
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
 8000842:	2201      	movs	r2, #1
 8000844:	4804      	ldr	r0, [pc, #16]	@ (8000858 <BL_voidHandle_MemoryWrite_CMD+0x90>)
 8000846:	f002 fa15 	bl	8002c74 <HAL_UART_Transmit>

	}else{
		voidSendNotAck();
	}
}
 800084a:	e001      	b.n	8000850 <BL_voidHandle_MemoryWrite_CMD+0x88>
		voidSendNotAck();
 800084c:	f000 f8e0 	bl	8000a10 <voidSendNotAck>
}
 8000850:	bf00      	nop
 8000852:	3718      	adds	r7, #24
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2000004c 	.word	0x2000004c

0800085c <BL_voidHandle_EnableRWProtect_CMD>:

void BL_voidHandle_EnableRWProtect_CMD(uint8 * copy_pu8CmdPacket){
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	uint32 Host_CRC ;
	uint8 Sector_Details;

	BL_Sector_Protection_Mode_t ProtectionMode;

	CmdLen = copy_pu8CmdPacket[0]+1;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	75fb      	strb	r3, [r7, #23]

	Host_CRC =  *((uint32 *)(copy_pu8CmdPacket + CmdLen - 4));
 800086c:	7dfb      	ldrb	r3, [r7, #23]
 800086e:	3b04      	subs	r3, #4
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	4413      	add	r3, r2
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	613b      	str	r3, [r7, #16]

	CRCStatus = u8VerifyCRC(copy_pu8CmdPacket , ( CmdLen - 4) , Host_CRC );
 8000878:	7dfb      	ldrb	r3, [r7, #23]
 800087a:	3b04      	subs	r3, #4
 800087c:	b2db      	uxtb	r3, r3
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	4619      	mov	r1, r3
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f000 f874 	bl	8000970 <u8VerifyCRC>
 8000888:	4603      	mov	r3, r0
 800088a:	73fb      	strb	r3, [r7, #15]

	/*Extract Sector R/W Protection*/
	Sector_Details = copy_pu8CmdPacket[2];
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	789b      	ldrb	r3, [r3, #2]
 8000890:	73bb      	strb	r3, [r7, #14]
	/*Extract Sector Protection Mode*/
	ProtectionMode = copy_pu8CmdPacket[3];
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	3303      	adds	r3, #3
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	737b      	strb	r3, [r7, #13]


	if(CRCStatus == CRC_VERIFING_PASS){
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d137      	bne.n	8000910 <BL_voidHandle_EnableRWProtect_CMD+0xb4>

		voidSendAck(1);
 80008a0:	2001      	movs	r0, #1
 80008a2:	f000 f89d 	bl	80009e0 <voidSendAck>

		if (ProtectionMode == SECTOR_W_PROTECTION){
 80008a6:	7b7b      	ldrb	r3, [r7, #13]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d118      	bne.n	80008de <BL_voidHandle_EnableRWProtect_CMD+0x82>
			HAL_FLASH_OB_Unlock();
 80008ac:	f000 ff42 	bl	8001734 <HAL_FLASH_OB_Unlock>
			while (FLASH->SR & FLASH_SR_BSY_Pos);
 80008b0:	bf00      	nop
 80008b2:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <BL_voidHandle_EnableRWProtect_CMD+0xc0>)
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	f003 0310 	and.w	r3, r3, #16
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d1f9      	bne.n	80008b2 <BL_voidHandle_EnableRWProtect_CMD+0x56>
			/*set SPRMOD to 0 for write protection */
			Clr_BIT(FLASH->OPTCR, FLASH_OPTCR_SPRMOD_Pos);
 80008be:	4b17      	ldr	r3, [pc, #92]	@ (800091c <BL_voidHandle_EnableRWProtect_CMD+0xc0>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	4a16      	ldr	r2, [pc, #88]	@ (800091c <BL_voidHandle_EnableRWProtect_CMD+0xc0>)
 80008c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80008c8:	6153      	str	r3, [r2, #20]

            /* Apply protection bits (inverted)*/
            FLASH->OPTCR |= (~Sector_Details << FLASH_OPTCR_nWRP_Pos);
 80008ca:	4b14      	ldr	r3, [pc, #80]	@ (800091c <BL_voidHandle_EnableRWProtect_CMD+0xc0>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	7bba      	ldrb	r2, [r7, #14]
 80008d0:	43d2      	mvns	r2, r2
 80008d2:	0412      	lsls	r2, r2, #16
 80008d4:	4611      	mov	r1, r2
 80008d6:	4a11      	ldr	r2, [pc, #68]	@ (800091c <BL_voidHandle_EnableRWProtect_CMD+0xc0>)
 80008d8:	430b      	orrs	r3, r1
 80008da:	6153      	str	r3, [r2, #20]
 80008dc:	e013      	b.n	8000906 <BL_voidHandle_EnableRWProtect_CMD+0xaa>

		}else if (ProtectionMode == SECTOR_WR_PROTECTION){
 80008de:	7b7b      	ldrb	r3, [r7, #13]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d110      	bne.n	8000906 <BL_voidHandle_EnableRWProtect_CMD+0xaa>
			HAL_FLASH_OB_Unlock();
 80008e4:	f000 ff26 	bl	8001734 <HAL_FLASH_OB_Unlock>
			/* Set SPRMOD to 1 for PCROP protection */
			Set_BIT(FLASH->OPTCR, FLASH_OPTCR_SPRMOD_Pos);
 80008e8:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <BL_voidHandle_EnableRWProtect_CMD+0xc0>)
 80008ea:	695b      	ldr	r3, [r3, #20]
 80008ec:	4a0b      	ldr	r2, [pc, #44]	@ (800091c <BL_voidHandle_EnableRWProtect_CMD+0xc0>)
 80008ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008f2:	6153      	str	r3, [r2, #20]

            /* Apply protection bits (inverted)*/
            FLASH->OPTCR |= (~Sector_Details << FLASH_OPTCR_nWRP_Pos);
 80008f4:	4b09      	ldr	r3, [pc, #36]	@ (800091c <BL_voidHandle_EnableRWProtect_CMD+0xc0>)
 80008f6:	695b      	ldr	r3, [r3, #20]
 80008f8:	7bba      	ldrb	r2, [r7, #14]
 80008fa:	43d2      	mvns	r2, r2
 80008fc:	0412      	lsls	r2, r2, #16
 80008fe:	4611      	mov	r1, r2
 8000900:	4a06      	ldr	r2, [pc, #24]	@ (800091c <BL_voidHandle_EnableRWProtect_CMD+0xc0>)
 8000902:	430b      	orrs	r3, r1
 8000904:	6153      	str	r3, [r2, #20]
		}else{

		}
		HAL_FLASH_OB_Launch();
 8000906:	f000 ff41 	bl	800178c <HAL_FLASH_OB_Launch>
		HAL_FLASH_OB_Lock();
 800090a:	f000 ff2f 	bl	800176c <HAL_FLASH_OB_Lock>
		//HAL_UART_Transmit(&huart2,&RDP_Status,1, HAL_MAX_DELAY);
	}else{
		voidSendNotAck();
	}
}
 800090e:	e001      	b.n	8000914 <BL_voidHandle_EnableRWProtect_CMD+0xb8>
		voidSendNotAck();
 8000910:	f000 f87e 	bl	8000a10 <voidSendNotAck>
}
 8000914:	bf00      	nop
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023c00 	.word	0x40023c00

08000920 <BL_voidHandle_MemoryRead_CMD>:

void BL_voidHandle_MemoryRead_CMD(uint8 * copy_pu8CmdPacket){
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <BL_voidHandle_ReadSectorStatus_CMD>:

void BL_voidHandle_ReadSectorStatus_CMD(uint8 * copy_pu8CmdPacket){
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <BL_voidHandle_OTPRead_CMD>:

void BL_voidHandle_OTPRead_CMD(uint8 * copy_pu8CmdPacket){
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <BL_voidHandle_DisableRWProtect_CMD>:
/**
 * @brief 
 * 
 * @param copy_pu8CmdPacket 
 */
void BL_voidHandle_DisableRWProtect_CMD(uint8 * copy_pu8CmdPacket){
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]

}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <u8VerifyCRC>:
 * @param copy_pu8DataArr 
 * @param copy_u8Length 
 * @param copy_u32HostCRC 
 * @return uint8 
 */
static uint8 u8VerifyCRC(uint8 * copy_pu8DataArr, uint8 copy_u8Length, uint32 copy_u32HostCRC){
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	460b      	mov	r3, r1
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	72fb      	strb	r3, [r7, #11]
    uint8 Local_u8CRCStatus = CRC_VERIFING_FAILED;
 800097e:	2300      	movs	r3, #0
 8000980:	77fb      	strb	r3, [r7, #31]
	uint8 Local_u8Iterator;
	uint32_t Local_u32AccCRC, Local_u32Temp;

	for(Local_u8Iterator=0; Local_u8Iterator < copy_u8Length; Local_u8Iterator++){
 8000982:	2300      	movs	r3, #0
 8000984:	77bb      	strb	r3, [r7, #30]
 8000986:	e00f      	b.n	80009a8 <u8VerifyCRC+0x38>
		Local_u32Temp = copy_pu8DataArr[Local_u8Iterator];
 8000988:	7fbb      	ldrb	r3, [r7, #30]
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	4413      	add	r3, r2
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	617b      	str	r3, [r7, #20]
		Local_u32AccCRC= HAL_CRC_Accumulate(&hcrc, &Local_u32Temp , 1);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	2201      	movs	r2, #1
 8000998:	4619      	mov	r1, r3
 800099a:	4810      	ldr	r0, [pc, #64]	@ (80009dc <u8VerifyCRC+0x6c>)
 800099c:	f000 fe29 	bl	80015f2 <HAL_CRC_Accumulate>
 80009a0:	61b8      	str	r0, [r7, #24]
	for(Local_u8Iterator=0; Local_u8Iterator < copy_u8Length; Local_u8Iterator++){
 80009a2:	7fbb      	ldrb	r3, [r7, #30]
 80009a4:	3301      	adds	r3, #1
 80009a6:	77bb      	strb	r3, [r7, #30]
 80009a8:	7fba      	ldrb	r2, [r7, #30]
 80009aa:	7afb      	ldrb	r3, [r7, #11]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d3eb      	bcc.n	8000988 <u8VerifyCRC+0x18>
	}
	/*Reset CRC Calculation Unit*/
	__HAL_CRC_DR_RESET(&hcrc);
 80009b0:	4b0a      	ldr	r3, [pc, #40]	@ (80009dc <u8VerifyCRC+0x6c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	689a      	ldr	r2, [r3, #8]
 80009b6:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <u8VerifyCRC+0x6c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f042 0201 	orr.w	r2, r2, #1
 80009be:	609a      	str	r2, [r3, #8]

	if(Local_u32AccCRC == copy_u32HostCRC)
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d102      	bne.n	80009ce <u8VerifyCRC+0x5e>
		Local_u8CRCStatus = CRC_VERIFING_PASS;
 80009c8:	2301      	movs	r3, #1
 80009ca:	77fb      	strb	r3, [r7, #31]
 80009cc:	e001      	b.n	80009d2 <u8VerifyCRC+0x62>
	else
		Local_u8CRCStatus = CRC_VERIFING_FAILED;
 80009ce:	2300      	movs	r3, #0
 80009d0:	77fb      	strb	r3, [r7, #31]

	return Local_u8CRCStatus;
 80009d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3720      	adds	r7, #32
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000044 	.word	0x20000044

080009e0 <voidSendAck>:
/**
 * @brief Sending Ack when The host request a service from the bootloader
 * 
 * @param copy_u8ReplyLength 
 */
static void voidSendAck(uint8 copy_u8ReplyLength){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
	/*The  sending frame is [ACK BYTE , Replay Length of the next freme]*/
	uint8 Local_u8AckBuffer[2]={BL_ACK , copy_u8ReplyLength};
 80009ea:	23a5      	movs	r3, #165	@ 0xa5
 80009ec:	733b      	strb	r3, [r7, #12]
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	737b      	strb	r3, [r7, #13]

	/*sending the Local_u8AckBuffer array*/
	HAL_UART_Transmit(&huart2, Local_u8AckBuffer ,2 ,HAL_MAX_DELAY);
 80009f2:	f107 010c 	add.w	r1, r7, #12
 80009f6:	f04f 33ff 	mov.w	r3, #4294967295
 80009fa:	2202      	movs	r2, #2
 80009fc:	4803      	ldr	r0, [pc, #12]	@ (8000a0c <voidSendAck+0x2c>)
 80009fe:	f002 f939 	bl	8002c74 <HAL_UART_Transmit>
}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000004c 	.word	0x2000004c

08000a10 <voidSendNotAck>:
/**
 * @brief Sending Ack when The host request a service from the bootloader
 * 
 * @param copy_u8ReplyLength 
 */
static void voidSendNotAck(void){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
	/*The  sending frame is [ACK BYTE , Replay Length of the next freme]*/
	uint8 Local_u8NAck={BL_NOT_ACK};
 8000a16:	237f      	movs	r3, #127	@ 0x7f
 8000a18:	71fb      	strb	r3, [r7, #7]

	/*sending the Local_u8AckBuffer array*/
	HAL_UART_Transmit(&huart2, &Local_u8NAck ,2 ,HAL_MAX_DELAY);
 8000a1a:	1df9      	adds	r1, r7, #7
 8000a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a20:	2202      	movs	r2, #2
 8000a22:	4803      	ldr	r0, [pc, #12]	@ (8000a30 <voidSendNotAck+0x20>)
 8000a24:	f002 f926 	bl	8002c74 <HAL_UART_Transmit>
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	2000004c 	.word	0x2000004c

08000a34 <ValidateAddress>:

/***/
static BL_Address_Status_t ValidateAddress(uint32 u32Address){
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	BL_Address_Status_t Address_Status;
	/*Address is VALID if it is within : SRAM or FLASH*/

	if ( (u32Address >= STM32F446xx_FLASH_BASE ) && ( u32Address <= STM32F446xx_FLASH_END )){
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000a42:	d306      	bcc.n	8000a52 <ValidateAddress+0x1e>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a0d      	ldr	r2, [pc, #52]	@ (8000a7c <ValidateAddress+0x48>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d802      	bhi.n	8000a52 <ValidateAddress+0x1e>
		Address_Status = Address_VALID;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	73fb      	strb	r3, [r7, #15]
 8000a50:	e00c      	b.n	8000a6c <ValidateAddress+0x38>

	}else if ( (u32Address >= STM32F446xx_SRAM1_BASE ) && ( u32Address <= STM32F446xx_SRAM1_END )){
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a58:	d306      	bcc.n	8000a68 <ValidateAddress+0x34>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a08      	ldr	r2, [pc, #32]	@ (8000a80 <ValidateAddress+0x4c>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d802      	bhi.n	8000a68 <ValidateAddress+0x34>
		Address_Status = Address_VALID;
 8000a62:	2301      	movs	r3, #1
 8000a64:	73fb      	strb	r3, [r7, #15]
 8000a66:	e001      	b.n	8000a6c <ValidateAddress+0x38>
	}else{
		Address_Status = Address_INVALID;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	73fb      	strb	r3, [r7, #15]
	}
	return Address_Status;
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	0807ffff 	.word	0x0807ffff
 8000a80:	20020000 	.word	0x20020000

08000a84 <u8Execute_FlashErase>:

static uint8 u8Execute_FlashErase(uint8 copy_u8SectorNumber, uint8 copy_u8NumberOfSectors){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	@ 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	460a      	mov	r2, r1
 8000a8e:	71fb      	strb	r3, [r7, #7]
 8000a90:	4613      	mov	r3, r2
 8000a92:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef ErrorStatus = HAL_OK;
 8000a94:	2300      	movs	r3, #0
 8000a96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint32_t SectorError;
	FLASH_EraseInitTypeDef Flash_Erase;

	if((copy_u8SectorNumber > 8) & (copy_u8SectorNumber != 0xff)){
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	2b08      	cmp	r3, #8
 8000a9e:	bf8c      	ite	hi
 8000aa0:	2301      	movhi	r3, #1
 8000aa2:	2300      	movls	r3, #0
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	2bff      	cmp	r3, #255	@ 0xff
 8000aaa:	bf14      	ite	ne
 8000aac:	2301      	movne	r3, #1
 8000aae:	2300      	moveq	r3, #0
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <u8Execute_FlashErase+0x3e>
		ErrorStatus = HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000ac0:	e033      	b.n	8000b2a <u8Execute_FlashErase+0xa6>
	}else if ((copy_u8SectorNumber > 7) && (copy_u8SectorNumber != 0xff)){
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2b07      	cmp	r3, #7
 8000ac6:	d906      	bls.n	8000ad6 <u8Execute_FlashErase+0x52>
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	2bff      	cmp	r3, #255	@ 0xff
 8000acc:	d003      	beq.n	8000ad6 <u8Execute_FlashErase+0x52>
		ErrorStatus = HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000ad4:	e029      	b.n	8000b2a <u8Execute_FlashErase+0xa6>
	}else{
		if(copy_u8SectorNumber == 0xff){
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2bff      	cmp	r3, #255	@ 0xff
 8000ada:	d102      	bne.n	8000ae2 <u8Execute_FlashErase+0x5e>
			Flash_Erase.TypeErase=FLASH_TYPEERASE_MASSERASE;
 8000adc:	2301      	movs	r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	e012      	b.n	8000b08 <u8Execute_FlashErase+0x84>
		}else{
			uint8 RemainingSectors = 8 - copy_u8SectorNumber;
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	f1c3 0308 	rsb	r3, r3, #8
 8000ae8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			/*if number of sectors is bigger than max, make it equal to the maximum*/
			if(copy_u8NumberOfSectors > RemainingSectors){
 8000aec:	79ba      	ldrb	r2, [r7, #6]
 8000aee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d902      	bls.n	8000afc <u8Execute_FlashErase+0x78>
				copy_u8NumberOfSectors = RemainingSectors;
 8000af6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000afa:	71bb      	strb	r3, [r7, #6]
			}else{
				/*Nothing*/
			}

			Flash_Erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
			Flash_Erase.Sector = copy_u8SectorNumber;
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	617b      	str	r3, [r7, #20]
			Flash_Erase.NbSectors = copy_u8NumberOfSectors;
 8000b04:	79bb      	ldrb	r3, [r7, #6]
 8000b06:	61bb      	str	r3, [r7, #24]
		}

		Flash_Erase.Banks = FLASH_BANK_1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	613b      	str	r3, [r7, #16]
		Flash_Erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	61fb      	str	r3, [r7, #28]
		/*Unlock the flash before erasing*/
		HAL_FLASH_Unlock();
 8000b10:	f000 fdee 	bl	80016f0 <HAL_FLASH_Unlock>
		/*Start Erasing*/
		ErrorStatus = HAL_FLASHEx_Erase(&Flash_Erase, &SectorError);
 8000b14:	f107 0220 	add.w	r2, r7, #32
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 ff88 	bl	8001a34 <HAL_FLASHEx_Erase>
 8000b24:	4603      	mov	r3, r0
 8000b26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}
	return ErrorStatus;
 8000b2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3728      	adds	r7, #40	@ 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <u8Execute_MemoryWrite>:

static uint8 u8Execute_MemoryWrite(uint8 * Copy_pu8Buffer, uint32 Copy_u32Address, uint8 Copy_u8Length){
 8000b38:	b5b0      	push	{r4, r5, r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	4613      	mov	r3, r2
 8000b44:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ErrorStatus = HAL_OK;
 8000b46:	2300      	movs	r3, #0
 8000b48:	757b      	strb	r3, [r7, #21]

	if((Copy_u32Address >= STM32F446xx_FLASH_BASE)&&(Copy_u32Address <= STM32F446xx_FLASH_END)){
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000b50:	d320      	bcc.n	8000b94 <u8Execute_MemoryWrite+0x5c>
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	4a21      	ldr	r2, [pc, #132]	@ (8000bdc <u8Execute_MemoryWrite+0xa4>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d81c      	bhi.n	8000b94 <u8Execute_MemoryWrite+0x5c>
		/*Writing in FLASH Case*/
		uint8 iterator;
		/*Unlock the flash before writing*/
		HAL_FLASH_Unlock();
 8000b5a:	f000 fdc9 	bl	80016f0 <HAL_FLASH_Unlock>

		for(iterator = 0; iterator <Copy_u8Length; iterator ++){
 8000b5e:	2300      	movs	r3, #0
 8000b60:	75fb      	strb	r3, [r7, #23]
 8000b62:	e012      	b.n	8000b8a <u8Execute_MemoryWrite+0x52>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE , (Copy_u32Address + iterator) , (uint64)Copy_pu8Buffer[iterator] );
 8000b64:	7dfa      	ldrb	r2, [r7, #23]
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	18d1      	adds	r1, r2, r3
 8000b6a:	7dfb      	ldrb	r3, [r7, #23]
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	4413      	add	r3, r2
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2200      	movs	r2, #0
 8000b76:	461c      	mov	r4, r3
 8000b78:	4615      	mov	r5, r2
 8000b7a:	4622      	mov	r2, r4
 8000b7c:	462b      	mov	r3, r5
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f000 fd62 	bl	8001648 <HAL_FLASH_Program>
		for(iterator = 0; iterator <Copy_u8Length; iterator ++){
 8000b84:	7dfb      	ldrb	r3, [r7, #23]
 8000b86:	3301      	adds	r3, #1
 8000b88:	75fb      	strb	r3, [r7, #23]
 8000b8a:	7dfa      	ldrb	r2, [r7, #23]
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d3e8      	bcc.n	8000b64 <u8Execute_MemoryWrite+0x2c>
	if((Copy_u32Address >= STM32F446xx_FLASH_BASE)&&(Copy_u32Address <= STM32F446xx_FLASH_END)){
 8000b92:	e01d      	b.n	8000bd0 <u8Execute_MemoryWrite+0x98>
		}
	}else if((Copy_u32Address >= STM32F446xx_SRAM1_BASE ) && ( Copy_u32Address <= STM32F446xx_SRAM1_END )){
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b9a:	d319      	bcc.n	8000bd0 <u8Execute_MemoryWrite+0x98>
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	4a10      	ldr	r2, [pc, #64]	@ (8000be0 <u8Execute_MemoryWrite+0xa8>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d815      	bhi.n	8000bd0 <u8Execute_MemoryWrite+0x98>
		/*Writing in SRAM Case*/
		uint8 iterator;

		HAL_FLASH_Unlock();
 8000ba4:	f000 fda4 	bl	80016f0 <HAL_FLASH_Unlock>

		uint8 * Destination = (uint8 *)Copy_u32Address;
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	613b      	str	r3, [r7, #16]

		for(iterator = 0; iterator <Copy_u8Length; iterator ++){
 8000bac:	2300      	movs	r3, #0
 8000bae:	75bb      	strb	r3, [r7, #22]
 8000bb0:	e00a      	b.n	8000bc8 <u8Execute_MemoryWrite+0x90>
			Destination[iterator] = Copy_pu8Buffer[iterator];
 8000bb2:	7dbb      	ldrb	r3, [r7, #22]
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	441a      	add	r2, r3
 8000bb8:	7dbb      	ldrb	r3, [r7, #22]
 8000bba:	6939      	ldr	r1, [r7, #16]
 8000bbc:	440b      	add	r3, r1
 8000bbe:	7812      	ldrb	r2, [r2, #0]
 8000bc0:	701a      	strb	r2, [r3, #0]
		for(iterator = 0; iterator <Copy_u8Length; iterator ++){
 8000bc2:	7dbb      	ldrb	r3, [r7, #22]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	75bb      	strb	r3, [r7, #22]
 8000bc8:	7dba      	ldrb	r2, [r7, #22]
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d3f0      	bcc.n	8000bb2 <u8Execute_MemoryWrite+0x7a>
		}
	}

	return ErrorStatus;
 8000bd0:	7d7b      	ldrb	r3, [r7, #21]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	0807ffff 	.word	0x0807ffff
 8000be0:	20020000 	.word	0x20020000

08000be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000be8:	f000 fb6c 	bl	80012c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bec:	f000 f828 	bl	8000c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf0:	f000 f8fc 	bl	8000dec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bf4:	f000 f8a6 	bl	8000d44 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000bf8:	f000 f8ce 	bl	8000d98 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8000bfc:	f000 f88e 	bl	8000d1c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  if (GPIO_PIN_RESET == HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)){
 8000c00:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c04:	480b      	ldr	r0, [pc, #44]	@ (8000c34 <main+0x50>)
 8000c06:	f001 f9cb 	bl	8001fa0 <HAL_GPIO_ReadPin>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d102      	bne.n	8000c16 <main+0x32>
	  Bootloader_UartReadData();
 8000c10:	f000 f95a 	bl	8000ec8 <Bootloader_UartReadData>
 8000c14:	e001      	b.n	8000c1a <main+0x36>
  }else{
	  Bootloader_JumpToApp();
 8000c16:	f000 f9e3 	bl	8000fe0 <Bootloader_JumpToApp>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	 HAL_UART_Transmit(&huart2, (uint8_t*)HelloBootloader, sizeof(HelloBootloader), HAL_MAX_DELAY);
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	2219      	movs	r2, #25
 8000c20:	4905      	ldr	r1, [pc, #20]	@ (8000c38 <main+0x54>)
 8000c22:	4806      	ldr	r0, [pc, #24]	@ (8000c3c <main+0x58>)
 8000c24:	f002 f826 	bl	8002c74 <HAL_UART_Transmit>
	 HAL_Delay(1000);
 8000c28:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c2c:	f000 fbbc 	bl	80013a8 <HAL_Delay>
	 HAL_UART_Transmit(&huart2, (uint8_t*)HelloBootloader, sizeof(HelloBootloader), HAL_MAX_DELAY);
 8000c30:	bf00      	nop
 8000c32:	e7f2      	b.n	8000c1a <main+0x36>
 8000c34:	40020800 	.word	0x40020800
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	2000004c 	.word	0x2000004c

08000c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b094      	sub	sp, #80	@ 0x50
 8000c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	2234      	movs	r2, #52	@ 0x34
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f002 fc62 	bl	8003518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	4b2a      	ldr	r3, [pc, #168]	@ (8000d14 <SystemClock_Config+0xd4>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6c:	4a29      	ldr	r2, [pc, #164]	@ (8000d14 <SystemClock_Config+0xd4>)
 8000c6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c74:	4b27      	ldr	r3, [pc, #156]	@ (8000d14 <SystemClock_Config+0xd4>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c80:	2300      	movs	r3, #0
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	4b24      	ldr	r3, [pc, #144]	@ (8000d18 <SystemClock_Config+0xd8>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c8c:	4a22      	ldr	r2, [pc, #136]	@ (8000d18 <SystemClock_Config+0xd8>)
 8000c8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c92:	6013      	str	r3, [r2, #0]
 8000c94:	4b20      	ldr	r3, [pc, #128]	@ (8000d18 <SystemClock_Config+0xd8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca8:	2310      	movs	r3, #16
 8000caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cac:	2302      	movs	r3, #2
 8000cae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cb4:	2310      	movs	r3, #16
 8000cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cb8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000cbc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f001 fce2 	bl	8002698 <HAL_RCC_OscConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000cda:	f000 f999 	bl	8001010 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cde:	230f      	movs	r3, #15
 8000ce0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cf4:	f107 0308 	add.w	r3, r7, #8
 8000cf8:	2102      	movs	r1, #2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f001 f982 	bl	8002004 <HAL_RCC_ClockConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000d06:	f000 f983 	bl	8001010 <Error_Handler>
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	3750      	adds	r7, #80	@ 0x50
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40007000 	.word	0x40007000

08000d1c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <MX_CRC_Init+0x20>)
 8000d22:	4a07      	ldr	r2, [pc, #28]	@ (8000d40 <MX_CRC_Init+0x24>)
 8000d24:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	@ (8000d3c <MX_CRC_Init+0x20>)
 8000d28:	f000 fc47 	bl	80015ba <HAL_CRC_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000d32:	f000 f96d 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000044 	.word	0x20000044
 8000d40:	40023000 	.word	0x40023000

08000d44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d48:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	@ (8000d94 <MX_USART2_UART_Init+0x50>)
 8000d4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d4e:	4b10      	ldr	r3, [pc, #64]	@ (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d7a:	4805      	ldr	r0, [pc, #20]	@ (8000d90 <MX_USART2_UART_Init+0x4c>)
 8000d7c:	f001 ff2a 	bl	8002bd4 <HAL_UART_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d86:	f000 f943 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	2000004c 	.word	0x2000004c
 8000d94:	40004400 	.word	0x40004400

08000d98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d9c:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <MX_USART3_UART_Init+0x4c>)
 8000d9e:	4a12      	ldr	r2, [pc, #72]	@ (8000de8 <MX_USART3_UART_Init+0x50>)
 8000da0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000da2:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <MX_USART3_UART_Init+0x4c>)
 8000da4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000da8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <MX_USART3_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <MX_USART3_UART_Init+0x4c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	@ (8000de4 <MX_USART3_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dbc:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <MX_USART3_UART_Init+0x4c>)
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc2:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <MX_USART3_UART_Init+0x4c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <MX_USART3_UART_Init+0x4c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dce:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <MX_USART3_UART_Init+0x4c>)
 8000dd0:	f001 ff00 	bl	8002bd4 <HAL_UART_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000dda:	f000 f919 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000094 	.word	0x20000094
 8000de8:	40004800 	.word	0x40004800

08000dec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	@ 0x28
 8000df0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	4b2d      	ldr	r3, [pc, #180]	@ (8000ebc <MX_GPIO_Init+0xd0>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	4a2c      	ldr	r2, [pc, #176]	@ (8000ebc <MX_GPIO_Init+0xd0>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e12:	4b2a      	ldr	r3, [pc, #168]	@ (8000ebc <MX_GPIO_Init+0xd0>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b26      	ldr	r3, [pc, #152]	@ (8000ebc <MX_GPIO_Init+0xd0>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	4a25      	ldr	r2, [pc, #148]	@ (8000ebc <MX_GPIO_Init+0xd0>)
 8000e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2e:	4b23      	ldr	r3, [pc, #140]	@ (8000ebc <MX_GPIO_Init+0xd0>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ebc <MX_GPIO_Init+0xd0>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	4a1e      	ldr	r2, [pc, #120]	@ (8000ebc <MX_GPIO_Init+0xd0>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ebc <MX_GPIO_Init+0xd0>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	4b18      	ldr	r3, [pc, #96]	@ (8000ebc <MX_GPIO_Init+0xd0>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a17      	ldr	r2, [pc, #92]	@ (8000ebc <MX_GPIO_Init+0xd0>)
 8000e60:	f043 0302 	orr.w	r3, r3, #2
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <MX_GPIO_Init+0xd0>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2120      	movs	r1, #32
 8000e76:	4812      	ldr	r0, [pc, #72]	@ (8000ec0 <MX_GPIO_Init+0xd4>)
 8000e78:	f001 f8aa 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e82:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	480c      	ldr	r0, [pc, #48]	@ (8000ec4 <MX_GPIO_Init+0xd8>)
 8000e94:	f000 fef0 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e98:	2320      	movs	r3, #32
 8000e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	4804      	ldr	r0, [pc, #16]	@ (8000ec0 <MX_GPIO_Init+0xd4>)
 8000eb0:	f000 fee2 	bl	8001c78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eb4:	bf00      	nop
 8000eb6:	3728      	adds	r7, #40	@ 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020000 	.word	0x40020000
 8000ec4:	40020800 	.word	0x40020800

08000ec8 <Bootloader_UartReadData>:

/* USER CODE BEGIN 4 */
/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/


void Bootloader_UartReadData(void){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b0c0      	sub	sp, #256	@ 0x100
 8000ecc:	af00      	add	r7, sp, #0

	/*This function is used to read commands from host*/

	uint8_t Local_u8CmdPacket[255] = {0};
 8000ece:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000ed2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	3304      	adds	r3, #4
 8000edc:	22fb      	movs	r2, #251	@ 0xfb
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f002 fb19 	bl	8003518 <memset>
	while(1)
	{
		/*Clear the command packet every iteration*/
		memset(Local_u8CmdPacket ,0 ,255);
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	22ff      	movs	r2, #255	@ 0xff
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f002 fb13 	bl	8003518 <memset>
		/*read the "length to follow" field command*/
		HAL_UART_Receive(&huart2, Local_u8CmdPacket, 1, HAL_MAX_DELAY);
 8000ef2:	4639      	mov	r1, r7
 8000ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4838      	ldr	r0, [pc, #224]	@ (8000fdc <Bootloader_UartReadData+0x114>)
 8000efc:	f001 ff45 	bl	8002d8a <HAL_UART_Receive>

		/*read the rest of the command, its size is the previous byte*/
		HAL_UART_Receive(&huart2, &Local_u8CmdPacket[1] , Local_u8CmdPacket[0],HAL_MAX_DELAY);
 8000f00:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000f04:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	1c59      	adds	r1, r3, #1
 8000f10:	f04f 33ff 	mov.w	r3, #4294967295
 8000f14:	4831      	ldr	r0, [pc, #196]	@ (8000fdc <Bootloader_UartReadData+0x114>)
 8000f16:	f001 ff38 	bl	8002d8a <HAL_UART_Receive>

		/*Check the command code, then handle the command*/
		switch(Local_u8CmdPacket[1]){
 8000f1a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000f1e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000f22:	785b      	ldrb	r3, [r3, #1]
 8000f24:	3b51      	subs	r3, #81	@ 0x51
 8000f26:	2b0b      	cmp	r3, #11
 8000f28:	d856      	bhi.n	8000fd8 <Bootloader_UartReadData+0x110>
 8000f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f30 <Bootloader_UartReadData+0x68>)
 8000f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f30:	08000f61 	.word	0x08000f61
 8000f34:	08000f6b 	.word	0x08000f6b
 8000f38:	08000f75 	.word	0x08000f75
 8000f3c:	08000f7f 	.word	0x08000f7f
 8000f40:	08000f89 	.word	0x08000f89
 8000f44:	08000f93 	.word	0x08000f93
 8000f48:	08000f9d 	.word	0x08000f9d
 8000f4c:	08000fa7 	.word	0x08000fa7
 8000f50:	08000fb1 	.word	0x08000fb1
 8000f54:	08000fbb 	.word	0x08000fbb
 8000f58:	08000fc5 	.word	0x08000fc5
 8000f5c:	08000fcf 	.word	0x08000fcf
			case BL_CMD_GET_VER            : BL_voidHandle_GetVersion_CMD(Local_u8CmdPacket);       break;
 8000f60:	463b      	mov	r3, r7
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fac6 	bl	80004f4 <BL_voidHandle_GetVersion_CMD>
 8000f68:	e037      	b.n	8000fda <Bootloader_UartReadData+0x112>
			case BL_CMD_GET_HELP           : BL_voidHandle_GetHelp_CMD(Local_u8CmdPacket);   	    break;
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff faf3 	bl	8000558 <BL_voidHandle_GetHelp_CMD>
 8000f72:	e032      	b.n	8000fda <Bootloader_UartReadData+0x112>
			case BL_CMD_GET_CHIP_ID        : BL_voidHandle_GetChipID_CMD(Local_u8CmdPacket);   	    break;
 8000f74:	463b      	mov	r3, r7
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fb26 	bl	80005c8 <BL_voidHandle_GetChipID_CMD>
 8000f7c:	e02d      	b.n	8000fda <Bootloader_UartReadData+0x112>
			case BL_CMD_GET_RDP_STATUS     : BL_voidHandle_GetRDPStatus_CMD(Local_u8CmdPacket);     break;
 8000f7e:	463b      	mov	r3, r7
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fb59 	bl	8000638 <BL_voidHandle_GetRDPStatus_CMD>
 8000f86:	e028      	b.n	8000fda <Bootloader_UartReadData+0x112>
			case BL_CMD_GO_TO_ADDR         : BL_voidHandle_GoToAddress_CMD(Local_u8CmdPacket);      break;
 8000f88:	463b      	mov	r3, r7
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fb8a 	bl	80006a4 <BL_voidHandle_GoToAddress_CMD>
 8000f90:	e023      	b.n	8000fda <Bootloader_UartReadData+0x112>
			case BL_CMD_FLASH_ERASE        : BL_voidHandle_FlashErase_CMD(Local_u8CmdPacket);       break;
 8000f92:	463b      	mov	r3, r7
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fbcd 	bl	8000734 <BL_voidHandle_FlashErase_CMD>
 8000f9a:	e01e      	b.n	8000fda <Bootloader_UartReadData+0x112>
			case BL_CMD_MEM_WRITE          : BL_voidHandle_MemoryWrite_CMD(Local_u8CmdPacket);      break;
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fc12 	bl	80007c8 <BL_voidHandle_MemoryWrite_CMD>
 8000fa4:	e019      	b.n	8000fda <Bootloader_UartReadData+0x112>
			case BL_CMD_ENABLE_RW_PROTECT  : BL_voidHandle_EnableRWProtect_CMD(Local_u8CmdPacket);  break;
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fc57 	bl	800085c <BL_voidHandle_EnableRWProtect_CMD>
 8000fae:	e014      	b.n	8000fda <Bootloader_UartReadData+0x112>
			case BL_CMD_MEM_READ           : BL_voidHandle_MemoryRead_CMD(Local_u8CmdPacket);       break;
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fcb4 	bl	8000920 <BL_voidHandle_MemoryRead_CMD>
 8000fb8:	e00f      	b.n	8000fda <Bootloader_UartReadData+0x112>
			case BL_CMD_READ_SECTOR_STATUS : BL_voidHandle_ReadSectorStatus_CMD(Local_u8CmdPacket); break;
 8000fba:	463b      	mov	r3, r7
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fcb9 	bl	8000934 <BL_voidHandle_ReadSectorStatus_CMD>
 8000fc2:	e00a      	b.n	8000fda <Bootloader_UartReadData+0x112>
			case BL_CMD_OTP_READ           : BL_voidHandle_OTPRead_CMD(Local_u8CmdPacket);          break;
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fcbe 	bl	8000948 <BL_voidHandle_OTPRead_CMD>
 8000fcc:	e005      	b.n	8000fda <Bootloader_UartReadData+0x112>
			case BL_CMD_DISABLE_RW_PROTECT : BL_voidHandle_DisableRWProtect_CMD(Local_u8CmdPacket); break;
 8000fce:	463b      	mov	r3, r7
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fcc3 	bl	800095c <BL_voidHandle_DisableRWProtect_CMD>
 8000fd6:	e000      	b.n	8000fda <Bootloader_UartReadData+0x112>

			default:
				break;
 8000fd8:	bf00      	nop
		memset(Local_u8CmdPacket ,0 ,255);
 8000fda:	e784      	b.n	8000ee6 <Bootloader_UartReadData+0x1e>
 8000fdc:	2000004c 	.word	0x2000004c

08000fe0 <Bootloader_JumpToApp>:





void Bootloader_JumpToApp(void){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0

	/* Configure MSP of user app by reading value from base addres of sector2 */
	uint32_t Local_u32MSPVal = *((volatile uint32_t*)(0x08008000));
 8000fe6:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <Bootloader_JumpToApp+0x28>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	60fb      	str	r3, [r7, #12]
	 * MSR -> Move Special Register
	 * MSP -> Main stack pointer register
	 * %0 receive variable:output:input
	 * "r" for register
	 * */
	__asm volatile("MSR MSP, %0"::"r"(Local_u32MSPVal));
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f383 8808 	msr	MSP, r3

	/*Get reset handler address of user app*/
	ResetHandlerAddress = *((volatile uint32_t *)( 0x08008000UL + 4 ));
 8000ff2:	4b06      	ldr	r3, [pc, #24]	@ (800100c <Bootloader_JumpToApp+0x2c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	60bb      	str	r3, [r7, #8]

	App_ResetHandler = (void *)ResetHandlerAddress;
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	607b      	str	r3, [r7, #4]

	/*Jump to the user app reset handler*/
	App_ResetHandler();
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4798      	blx	r3
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	08008000 	.word	0x08008000
 800100c:	08008004 	.word	0x08008004

08001010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001014:	b672      	cpsid	i
}
 8001016:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <Error_Handler+0x8>

0800101c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <HAL_MspInit+0x4c>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102a:	4a0f      	ldr	r2, [pc, #60]	@ (8001068 <HAL_MspInit+0x4c>)
 800102c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001030:	6453      	str	r3, [r2, #68]	@ 0x44
 8001032:	4b0d      	ldr	r3, [pc, #52]	@ (8001068 <HAL_MspInit+0x4c>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <HAL_MspInit+0x4c>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	4a08      	ldr	r2, [pc, #32]	@ (8001068 <HAL_MspInit+0x4c>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800104c:	6413      	str	r3, [r2, #64]	@ 0x40
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <HAL_MspInit+0x4c>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800105a:	2007      	movs	r0, #7
 800105c:	f000 fa7a 	bl	8001554 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40023800 	.word	0x40023800

0800106c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0b      	ldr	r2, [pc, #44]	@ (80010a8 <HAL_CRC_MspInit+0x3c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d10d      	bne.n	800109a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <HAL_CRC_MspInit+0x40>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a09      	ldr	r2, [pc, #36]	@ (80010ac <HAL_CRC_MspInit+0x40>)
 8001088:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <HAL_CRC_MspInit+0x40>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800109a:	bf00      	nop
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023000 	.word	0x40023000
 80010ac:	40023800 	.word	0x40023800

080010b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08c      	sub	sp, #48	@ 0x30
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a41      	ldr	r2, [pc, #260]	@ (80011d4 <HAL_UART_MspInit+0x124>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d12c      	bne.n	800112c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
 80010d6:	4b40      	ldr	r3, [pc, #256]	@ (80011d8 <HAL_UART_MspInit+0x128>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	4a3f      	ldr	r2, [pc, #252]	@ (80011d8 <HAL_UART_MspInit+0x128>)
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e2:	4b3d      	ldr	r3, [pc, #244]	@ (80011d8 <HAL_UART_MspInit+0x128>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ea:	61bb      	str	r3, [r7, #24]
 80010ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	4b39      	ldr	r3, [pc, #228]	@ (80011d8 <HAL_UART_MspInit+0x128>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	4a38      	ldr	r2, [pc, #224]	@ (80011d8 <HAL_UART_MspInit+0x128>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fe:	4b36      	ldr	r3, [pc, #216]	@ (80011d8 <HAL_UART_MspInit+0x128>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800110a:	230c      	movs	r3, #12
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800111a:	2307      	movs	r3, #7
 800111c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	4619      	mov	r1, r3
 8001124:	482d      	ldr	r0, [pc, #180]	@ (80011dc <HAL_UART_MspInit+0x12c>)
 8001126:	f000 fda7 	bl	8001c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800112a:	e04f      	b.n	80011cc <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a2b      	ldr	r2, [pc, #172]	@ (80011e0 <HAL_UART_MspInit+0x130>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d14a      	bne.n	80011cc <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	4b27      	ldr	r3, [pc, #156]	@ (80011d8 <HAL_UART_MspInit+0x128>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	4a26      	ldr	r2, [pc, #152]	@ (80011d8 <HAL_UART_MspInit+0x128>)
 8001140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001144:	6413      	str	r3, [r2, #64]	@ 0x40
 8001146:	4b24      	ldr	r3, [pc, #144]	@ (80011d8 <HAL_UART_MspInit+0x128>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b20      	ldr	r3, [pc, #128]	@ (80011d8 <HAL_UART_MspInit+0x128>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a1f      	ldr	r2, [pc, #124]	@ (80011d8 <HAL_UART_MspInit+0x128>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b1d      	ldr	r3, [pc, #116]	@ (80011d8 <HAL_UART_MspInit+0x128>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	4b19      	ldr	r3, [pc, #100]	@ (80011d8 <HAL_UART_MspInit+0x128>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	4a18      	ldr	r2, [pc, #96]	@ (80011d8 <HAL_UART_MspInit+0x128>)
 8001178:	f043 0302 	orr.w	r3, r3, #2
 800117c:	6313      	str	r3, [r2, #48]	@ 0x30
 800117e:	4b16      	ldr	r3, [pc, #88]	@ (80011d8 <HAL_UART_MspInit+0x128>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800118a:	2320      	movs	r3, #32
 800118c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800119a:	2307      	movs	r3, #7
 800119c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	4619      	mov	r1, r3
 80011a4:	480f      	ldr	r0, [pc, #60]	@ (80011e4 <HAL_UART_MspInit+0x134>)
 80011a6:	f000 fd67 	bl	8001c78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011bc:	2307      	movs	r3, #7
 80011be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4619      	mov	r1, r3
 80011c6:	4808      	ldr	r0, [pc, #32]	@ (80011e8 <HAL_UART_MspInit+0x138>)
 80011c8:	f000 fd56 	bl	8001c78 <HAL_GPIO_Init>
}
 80011cc:	bf00      	nop
 80011ce:	3730      	adds	r7, #48	@ 0x30
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40004400 	.word	0x40004400
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000
 80011e0:	40004800 	.word	0x40004800
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40020400 	.word	0x40020400

080011ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <NMI_Handler+0x4>

080011f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <MemManage_Handler+0x4>

08001204 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <UsageFault_Handler+0x4>

08001214 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001242:	f000 f891 	bl	8001368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001250:	4b06      	ldr	r3, [pc, #24]	@ (800126c <SystemInit+0x20>)
 8001252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001256:	4a05      	ldr	r2, [pc, #20]	@ (800126c <SystemInit+0x20>)
 8001258:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800125c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001270:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001274:	f7ff ffea 	bl	800124c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001278:	480c      	ldr	r0, [pc, #48]	@ (80012ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800127a:	490d      	ldr	r1, [pc, #52]	@ (80012b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800127c:	4a0d      	ldr	r2, [pc, #52]	@ (80012b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001280:	e002      	b.n	8001288 <LoopCopyDataInit>

08001282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001286:	3304      	adds	r3, #4

08001288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800128c:	d3f9      	bcc.n	8001282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128e:	4a0a      	ldr	r2, [pc, #40]	@ (80012b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001290:	4c0a      	ldr	r4, [pc, #40]	@ (80012bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001294:	e001      	b.n	800129a <LoopFillZerobss>

08001296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001298:	3204      	adds	r2, #4

0800129a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800129c:	d3fb      	bcc.n	8001296 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800129e:	f002 f943 	bl	8003528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012a2:	f7ff fc9f 	bl	8000be4 <main>
  bx  lr    
 80012a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b0:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80012b4:	080035bc 	.word	0x080035bc
  ldr r2, =_sbss
 80012b8:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80012bc:	20000100 	.word	0x20000100

080012c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c0:	e7fe      	b.n	80012c0 <ADC_IRQHandler>
	...

080012c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <HAL_Init+0x40>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001304 <HAL_Init+0x40>)
 80012ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <HAL_Init+0x40>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001304 <HAL_Init+0x40>)
 80012da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e0:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <HAL_Init+0x40>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a07      	ldr	r2, [pc, #28]	@ (8001304 <HAL_Init+0x40>)
 80012e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ec:	2003      	movs	r0, #3
 80012ee:	f000 f931 	bl	8001554 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f000 f808 	bl	8001308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f8:	f7ff fe90 	bl	800101c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023c00 	.word	0x40023c00

08001308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <HAL_InitTick+0x54>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <HAL_InitTick+0x58>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4619      	mov	r1, r3
 800131a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800131e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001322:	fbb2 f3f3 	udiv	r3, r2, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f93b 	bl	80015a2 <HAL_SYSTICK_Config>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e00e      	b.n	8001354 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b0f      	cmp	r3, #15
 800133a:	d80a      	bhi.n	8001352 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800133c:	2200      	movs	r2, #0
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	f04f 30ff 	mov.w	r0, #4294967295
 8001344:	f000 f911 	bl	800156a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001348:	4a06      	ldr	r2, [pc, #24]	@ (8001364 <HAL_InitTick+0x5c>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	e000      	b.n	8001354 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	2000001c 	.word	0x2000001c
 8001360:	20000024 	.word	0x20000024
 8001364:	20000020 	.word	0x20000020

08001368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <HAL_IncTick+0x20>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	4b06      	ldr	r3, [pc, #24]	@ (800138c <HAL_IncTick+0x24>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4413      	add	r3, r2
 8001378:	4a04      	ldr	r2, [pc, #16]	@ (800138c <HAL_IncTick+0x24>)
 800137a:	6013      	str	r3, [r2, #0]
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000024 	.word	0x20000024
 800138c:	200000dc 	.word	0x200000dc

08001390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return uwTick;
 8001394:	4b03      	ldr	r3, [pc, #12]	@ (80013a4 <HAL_GetTick+0x14>)
 8001396:	681b      	ldr	r3, [r3, #0]
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	200000dc 	.word	0x200000dc

080013a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b0:	f7ff ffee 	bl	8001390 <HAL_GetTick>
 80013b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c0:	d005      	beq.n	80013ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c2:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <HAL_Delay+0x44>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4413      	add	r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ce:	bf00      	nop
 80013d0:	f7ff ffde 	bl	8001390 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d8f7      	bhi.n	80013d0 <HAL_Delay+0x28>
  {
  }
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000024 	.word	0x20000024

080013f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001400:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <__NVIC_SetPriorityGrouping+0x44>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800140c:	4013      	ands	r3, r2
 800140e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001418:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800141c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001422:	4a04      	ldr	r2, [pc, #16]	@ (8001434 <__NVIC_SetPriorityGrouping+0x44>)
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	60d3      	str	r3, [r2, #12]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800143c:	4b04      	ldr	r3, [pc, #16]	@ (8001450 <__NVIC_GetPriorityGrouping+0x18>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	0a1b      	lsrs	r3, r3, #8
 8001442:	f003 0307 	and.w	r3, r3, #7
}
 8001446:	4618      	mov	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001464:	2b00      	cmp	r3, #0
 8001466:	db0a      	blt.n	800147e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	490c      	ldr	r1, [pc, #48]	@ (80014a0 <__NVIC_SetPriority+0x4c>)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	0112      	lsls	r2, r2, #4
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	440b      	add	r3, r1
 8001478:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800147c:	e00a      	b.n	8001494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4908      	ldr	r1, [pc, #32]	@ (80014a4 <__NVIC_SetPriority+0x50>)
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	3b04      	subs	r3, #4
 800148c:	0112      	lsls	r2, r2, #4
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	440b      	add	r3, r1
 8001492:	761a      	strb	r2, [r3, #24]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000e100 	.word	0xe000e100
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b089      	sub	sp, #36	@ 0x24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f1c3 0307 	rsb	r3, r3, #7
 80014c2:	2b04      	cmp	r3, #4
 80014c4:	bf28      	it	cs
 80014c6:	2304      	movcs	r3, #4
 80014c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3304      	adds	r3, #4
 80014ce:	2b06      	cmp	r3, #6
 80014d0:	d902      	bls.n	80014d8 <NVIC_EncodePriority+0x30>
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3b03      	subs	r3, #3
 80014d6:	e000      	b.n	80014da <NVIC_EncodePriority+0x32>
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43da      	mvns	r2, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	401a      	ands	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f0:	f04f 31ff 	mov.w	r1, #4294967295
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	43d9      	mvns	r1, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	4313      	orrs	r3, r2
         );
}
 8001502:	4618      	mov	r0, r3
 8001504:	3724      	adds	r7, #36	@ 0x24
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001520:	d301      	bcc.n	8001526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001522:	2301      	movs	r3, #1
 8001524:	e00f      	b.n	8001546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001526:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <SysTick_Config+0x40>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152e:	210f      	movs	r1, #15
 8001530:	f04f 30ff 	mov.w	r0, #4294967295
 8001534:	f7ff ff8e 	bl	8001454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001538:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <SysTick_Config+0x40>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153e:	4b04      	ldr	r3, [pc, #16]	@ (8001550 <SysTick_Config+0x40>)
 8001540:	2207      	movs	r2, #7
 8001542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	e000e010 	.word	0xe000e010

08001554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ff47 	bl	80013f0 <__NVIC_SetPriorityGrouping>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800156a:	b580      	push	{r7, lr}
 800156c:	b086      	sub	sp, #24
 800156e:	af00      	add	r7, sp, #0
 8001570:	4603      	mov	r3, r0
 8001572:	60b9      	str	r1, [r7, #8]
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800157c:	f7ff ff5c 	bl	8001438 <__NVIC_GetPriorityGrouping>
 8001580:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	6978      	ldr	r0, [r7, #20]
 8001588:	f7ff ff8e 	bl	80014a8 <NVIC_EncodePriority>
 800158c:	4602      	mov	r2, r0
 800158e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001592:	4611      	mov	r1, r2
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff5d 	bl	8001454 <__NVIC_SetPriority>
}
 800159a:	bf00      	nop
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ffb0 	bl	8001510 <SysTick_Config>
 80015b0:	4603      	mov	r3, r0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e00e      	b.n	80015ea <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	795b      	ldrb	r3, [r3, #5]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d105      	bne.n	80015e2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fd45 	bl	800106c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b087      	sub	sp, #28
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2202      	movs	r2, #2
 8001606:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	e00a      	b.n	8001624 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	441a      	add	r2, r3
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3301      	adds	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	429a      	cmp	r2, r3
 800162a:	d3f0      	bcc.n	800160e <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2201      	movs	r2, #1
 8001638:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800163a:	693b      	ldr	r3, [r7, #16]
}
 800163c:	4618      	mov	r0, r3
 800163e:	371c      	adds	r7, #28
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800165a:	4b23      	ldr	r3, [pc, #140]	@ (80016e8 <HAL_FLASH_Program+0xa0>)
 800165c:	7e1b      	ldrb	r3, [r3, #24]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d101      	bne.n	8001666 <HAL_FLASH_Program+0x1e>
 8001662:	2302      	movs	r3, #2
 8001664:	e03b      	b.n	80016de <HAL_FLASH_Program+0x96>
 8001666:	4b20      	ldr	r3, [pc, #128]	@ (80016e8 <HAL_FLASH_Program+0xa0>)
 8001668:	2201      	movs	r2, #1
 800166a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800166c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001670:	f000 f8a0 	bl	80017b4 <FLASH_WaitForLastOperation>
 8001674:	4603      	mov	r3, r0
 8001676:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001678:	7dfb      	ldrb	r3, [r7, #23]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d12b      	bne.n	80016d6 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d105      	bne.n	8001690 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001684:	783b      	ldrb	r3, [r7, #0]
 8001686:	4619      	mov	r1, r3
 8001688:	68b8      	ldr	r0, [r7, #8]
 800168a:	f000 f94b 	bl	8001924 <FLASH_Program_Byte>
 800168e:	e016      	b.n	80016be <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d105      	bne.n	80016a2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001696:	883b      	ldrh	r3, [r7, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	68b8      	ldr	r0, [r7, #8]
 800169c:	f000 f91e 	bl	80018dc <FLASH_Program_HalfWord>
 80016a0:	e00d      	b.n	80016be <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d105      	bne.n	80016b4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	4619      	mov	r1, r3
 80016ac:	68b8      	ldr	r0, [r7, #8]
 80016ae:	f000 f8f3 	bl	8001898 <FLASH_Program_Word>
 80016b2:	e004      	b.n	80016be <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80016b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016b8:	68b8      	ldr	r0, [r7, #8]
 80016ba:	f000 f8bb 	bl	8001834 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016be:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80016c2:	f000 f877 	bl	80017b4 <FLASH_WaitForLastOperation>
 80016c6:	4603      	mov	r3, r0
 80016c8:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80016ca:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <HAL_FLASH_Program+0xa4>)
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	4a07      	ldr	r2, [pc, #28]	@ (80016ec <HAL_FLASH_Program+0xa4>)
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80016d6:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <HAL_FLASH_Program+0xa0>)
 80016d8:	2200      	movs	r2, #0
 80016da:	761a      	strb	r2, [r3, #24]

  return status;
 80016dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200000e0 	.word	0x200000e0
 80016ec:	40023c00 	.word	0x40023c00

080016f0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80016fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <HAL_FLASH_Unlock+0x38>)
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	da0b      	bge.n	800171a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001702:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <HAL_FLASH_Unlock+0x38>)
 8001704:	4a09      	ldr	r2, [pc, #36]	@ (800172c <HAL_FLASH_Unlock+0x3c>)
 8001706:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001708:	4b07      	ldr	r3, [pc, #28]	@ (8001728 <HAL_FLASH_Unlock+0x38>)
 800170a:	4a09      	ldr	r2, [pc, #36]	@ (8001730 <HAL_FLASH_Unlock+0x40>)
 800170c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800170e:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <HAL_FLASH_Unlock+0x38>)
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	2b00      	cmp	r3, #0
 8001714:	da01      	bge.n	800171a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800171a:	79fb      	ldrb	r3, [r7, #7]
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	40023c00 	.word	0x40023c00
 800172c:	45670123 	.word	0x45670123
 8001730:	cdef89ab 	.word	0xcdef89ab

08001734 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001738:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <HAL_FLASH_OB_Unlock+0x2c>)
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d007      	beq.n	8001754 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <HAL_FLASH_OB_Unlock+0x2c>)
 8001746:	4a07      	ldr	r2, [pc, #28]	@ (8001764 <HAL_FLASH_OB_Unlock+0x30>)
 8001748:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800174a:	4b05      	ldr	r3, [pc, #20]	@ (8001760 <HAL_FLASH_OB_Unlock+0x2c>)
 800174c:	4a06      	ldr	r2, [pc, #24]	@ (8001768 <HAL_FLASH_OB_Unlock+0x34>)
 800174e:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	e000      	b.n	8001756 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	40023c00 	.word	0x40023c00
 8001764:	08192a3b 	.word	0x08192a3b
 8001768:	4c5d6e7f 	.word	0x4c5d6e7f

0800176c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001770:	4b05      	ldr	r3, [pc, #20]	@ (8001788 <HAL_FLASH_OB_Lock+0x1c>)
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <HAL_FLASH_OB_Lock+0x1c>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	40023c00 	.word	0x40023c00

0800178c <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8001790:	4b07      	ldr	r3, [pc, #28]	@ (80017b0 <HAL_FLASH_OB_Launch+0x24>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	4a06      	ldr	r2, [pc, #24]	@ (80017b0 <HAL_FLASH_OB_Launch+0x24>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	b2db      	uxtb	r3, r3
 800179e:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 80017a0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80017a4:	f000 f806 	bl	80017b4 <FLASH_WaitForLastOperation>
 80017a8:	4603      	mov	r3, r0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023c14 	.word	0x40023c14

080017b4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80017c0:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <FLASH_WaitForLastOperation+0x78>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80017c6:	f7ff fde3 	bl	8001390 <HAL_GetTick>
 80017ca:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80017cc:	e010      	b.n	80017f0 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d4:	d00c      	beq.n	80017f0 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d007      	beq.n	80017ec <FLASH_WaitForLastOperation+0x38>
 80017dc:	f7ff fdd8 	bl	8001390 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d201      	bcs.n	80017f0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e019      	b.n	8001824 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80017f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <FLASH_WaitForLastOperation+0x7c>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1e8      	bne.n	80017ce <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80017fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001830 <FLASH_WaitForLastOperation+0x7c>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001808:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <FLASH_WaitForLastOperation+0x7c>)
 800180a:	2201      	movs	r2, #1
 800180c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800180e:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <FLASH_WaitForLastOperation+0x7c>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800181a:	f000 f8a5 	bl	8001968 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001822:	2300      	movs	r3, #0

}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200000e0 	.word	0x200000e0
 8001830:	40023c00 	.word	0x40023c00

08001834 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001840:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <FLASH_Program_DoubleWord+0x60>)
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	4a13      	ldr	r2, [pc, #76]	@ (8001894 <FLASH_Program_DoubleWord+0x60>)
 8001846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800184a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800184c:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <FLASH_Program_DoubleWord+0x60>)
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	4a10      	ldr	r2, [pc, #64]	@ (8001894 <FLASH_Program_DoubleWord+0x60>)
 8001852:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001856:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001858:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <FLASH_Program_DoubleWord+0x60>)
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	4a0d      	ldr	r2, [pc, #52]	@ (8001894 <FLASH_Program_DoubleWord+0x60>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800186a:	f3bf 8f6f 	isb	sy
}
 800186e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8001870:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	000a      	movs	r2, r1
 800187e:	2300      	movs	r3, #0
 8001880:	68f9      	ldr	r1, [r7, #12]
 8001882:	3104      	adds	r1, #4
 8001884:	4613      	mov	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	40023c00 	.word	0x40023c00

08001898 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018a2:	4b0d      	ldr	r3, [pc, #52]	@ (80018d8 <FLASH_Program_Word+0x40>)
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	4a0c      	ldr	r2, [pc, #48]	@ (80018d8 <FLASH_Program_Word+0x40>)
 80018a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018ac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80018ae:	4b0a      	ldr	r3, [pc, #40]	@ (80018d8 <FLASH_Program_Word+0x40>)
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	4a09      	ldr	r2, [pc, #36]	@ (80018d8 <FLASH_Program_Word+0x40>)
 80018b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018b8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80018ba:	4b07      	ldr	r3, [pc, #28]	@ (80018d8 <FLASH_Program_Word+0x40>)
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	4a06      	ldr	r2, [pc, #24]	@ (80018d8 <FLASH_Program_Word+0x40>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	601a      	str	r2, [r3, #0]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	40023c00 	.word	0x40023c00

080018dc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80018e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001920 <FLASH_Program_HalfWord+0x44>)
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001920 <FLASH_Program_HalfWord+0x44>)
 80018ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80018f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <FLASH_Program_HalfWord+0x44>)
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	4a09      	ldr	r2, [pc, #36]	@ (8001920 <FLASH_Program_HalfWord+0x44>)
 80018fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001900:	4b07      	ldr	r3, [pc, #28]	@ (8001920 <FLASH_Program_HalfWord+0x44>)
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	4a06      	ldr	r2, [pc, #24]	@ (8001920 <FLASH_Program_HalfWord+0x44>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	887a      	ldrh	r2, [r7, #2]
 8001910:	801a      	strh	r2, [r3, #0]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40023c00 	.word	0x40023c00

08001924 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001930:	4b0c      	ldr	r3, [pc, #48]	@ (8001964 <FLASH_Program_Byte+0x40>)
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	4a0b      	ldr	r2, [pc, #44]	@ (8001964 <FLASH_Program_Byte+0x40>)
 8001936:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800193a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800193c:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <FLASH_Program_Byte+0x40>)
 800193e:	4a09      	ldr	r2, [pc, #36]	@ (8001964 <FLASH_Program_Byte+0x40>)
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001944:	4b07      	ldr	r3, [pc, #28]	@ (8001964 <FLASH_Program_Byte+0x40>)
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	4a06      	ldr	r2, [pc, #24]	@ (8001964 <FLASH_Program_Byte+0x40>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	701a      	strb	r2, [r3, #0]
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40023c00 	.word	0x40023c00

08001968 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800196c:	4b2f      	ldr	r3, [pc, #188]	@ (8001a2c <FLASH_SetErrorCode+0xc4>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b00      	cmp	r3, #0
 8001976:	d008      	beq.n	800198a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001978:	4b2d      	ldr	r3, [pc, #180]	@ (8001a30 <FLASH_SetErrorCode+0xc8>)
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	f043 0310 	orr.w	r3, r3, #16
 8001980:	4a2b      	ldr	r2, [pc, #172]	@ (8001a30 <FLASH_SetErrorCode+0xc8>)
 8001982:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001984:	4b29      	ldr	r3, [pc, #164]	@ (8001a2c <FLASH_SetErrorCode+0xc4>)
 8001986:	2210      	movs	r2, #16
 8001988:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800198a:	4b28      	ldr	r3, [pc, #160]	@ (8001a2c <FLASH_SetErrorCode+0xc4>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	f003 0320 	and.w	r3, r3, #32
 8001992:	2b00      	cmp	r3, #0
 8001994:	d008      	beq.n	80019a8 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001996:	4b26      	ldr	r3, [pc, #152]	@ (8001a30 <FLASH_SetErrorCode+0xc8>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f043 0308 	orr.w	r3, r3, #8
 800199e:	4a24      	ldr	r2, [pc, #144]	@ (8001a30 <FLASH_SetErrorCode+0xc8>)
 80019a0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80019a2:	4b22      	ldr	r3, [pc, #136]	@ (8001a2c <FLASH_SetErrorCode+0xc4>)
 80019a4:	2220      	movs	r2, #32
 80019a6:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80019a8:	4b20      	ldr	r3, [pc, #128]	@ (8001a2c <FLASH_SetErrorCode+0xc4>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d008      	beq.n	80019c6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80019b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a30 <FLASH_SetErrorCode+0xc8>)
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	f043 0304 	orr.w	r3, r3, #4
 80019bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001a30 <FLASH_SetErrorCode+0xc8>)
 80019be:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80019c0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a2c <FLASH_SetErrorCode+0xc4>)
 80019c2:	2240      	movs	r2, #64	@ 0x40
 80019c4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80019c6:	4b19      	ldr	r3, [pc, #100]	@ (8001a2c <FLASH_SetErrorCode+0xc4>)
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d008      	beq.n	80019e4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80019d2:	4b17      	ldr	r3, [pc, #92]	@ (8001a30 <FLASH_SetErrorCode+0xc8>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	f043 0302 	orr.w	r3, r3, #2
 80019da:	4a15      	ldr	r2, [pc, #84]	@ (8001a30 <FLASH_SetErrorCode+0xc8>)
 80019dc:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80019de:	4b13      	ldr	r3, [pc, #76]	@ (8001a2c <FLASH_SetErrorCode+0xc4>)
 80019e0:	2280      	movs	r2, #128	@ 0x80
 80019e2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80019e4:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <FLASH_SetErrorCode+0xc4>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d009      	beq.n	8001a04 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80019f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <FLASH_SetErrorCode+0xc8>)
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a30 <FLASH_SetErrorCode+0xc8>)
 80019fa:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80019fc:	4b0b      	ldr	r3, [pc, #44]	@ (8001a2c <FLASH_SetErrorCode+0xc4>)
 80019fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a02:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001a04:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <FLASH_SetErrorCode+0xc4>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d008      	beq.n	8001a22 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001a10:	4b07      	ldr	r3, [pc, #28]	@ (8001a30 <FLASH_SetErrorCode+0xc8>)
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	f043 0320 	orr.w	r3, r3, #32
 8001a18:	4a05      	ldr	r2, [pc, #20]	@ (8001a30 <FLASH_SetErrorCode+0xc8>)
 8001a1a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001a1c:	4b03      	ldr	r3, [pc, #12]	@ (8001a2c <FLASH_SetErrorCode+0xc4>)
 8001a1e:	2202      	movs	r2, #2
 8001a20:	60da      	str	r2, [r3, #12]
  }
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	40023c00 	.word	0x40023c00
 8001a30:	200000e0 	.word	0x200000e0

08001a34 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001a46:	4b31      	ldr	r3, [pc, #196]	@ (8001b0c <HAL_FLASHEx_Erase+0xd8>)
 8001a48:	7e1b      	ldrb	r3, [r3, #24]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_FLASHEx_Erase+0x1e>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e058      	b.n	8001b04 <HAL_FLASHEx_Erase+0xd0>
 8001a52:	4b2e      	ldr	r3, [pc, #184]	@ (8001b0c <HAL_FLASHEx_Erase+0xd8>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a58:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001a5c:	f7ff feaa 	bl	80017b4 <FLASH_WaitForLastOperation>
 8001a60:	4603      	mov	r3, r0
 8001a62:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d148      	bne.n	8001afc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d115      	bne.n	8001aa6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	4619      	mov	r1, r3
 8001a86:	4610      	mov	r0, r2
 8001a88:	f000 f844 	bl	8001b14 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a8c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001a90:	f7ff fe90 	bl	80017b4 <FLASH_WaitForLastOperation>
 8001a94:	4603      	mov	r3, r0
 8001a96:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001a98:	4b1d      	ldr	r3, [pc, #116]	@ (8001b10 <HAL_FLASHEx_Erase+0xdc>)
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	4a1c      	ldr	r2, [pc, #112]	@ (8001b10 <HAL_FLASHEx_Erase+0xdc>)
 8001a9e:	f023 0304 	bic.w	r3, r3, #4
 8001aa2:	6113      	str	r3, [r2, #16]
 8001aa4:	e028      	b.n	8001af8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	e01c      	b.n	8001ae8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	68b8      	ldr	r0, [r7, #8]
 8001ab8:	f000 f850 	bl	8001b5c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001abc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001ac0:	f7ff fe78 	bl	80017b4 <FLASH_WaitForLastOperation>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <HAL_FLASHEx_Erase+0xdc>)
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	4a10      	ldr	r2, [pc, #64]	@ (8001b10 <HAL_FLASHEx_Erase+0xdc>)
 8001ace:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8001ad2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68ba      	ldr	r2, [r7, #8]
 8001ade:	601a      	str	r2, [r3, #0]
          break;
 8001ae0:	e00a      	b.n	8001af8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4413      	add	r3, r2
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d3da      	bcc.n	8001aae <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001af8:	f000 f878 	bl	8001bec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001afc:	4b03      	ldr	r3, [pc, #12]	@ (8001b0c <HAL_FLASHEx_Erase+0xd8>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	761a      	strb	r2, [r3, #24]

  return status;
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200000e0 	.word	0x200000e0
 8001b10:	40023c00 	.word	0x40023c00

08001b14 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6039      	str	r1, [r7, #0]
 8001b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b20:	4b0d      	ldr	r3, [pc, #52]	@ (8001b58 <FLASH_MassErase+0x44>)
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	4a0c      	ldr	r2, [pc, #48]	@ (8001b58 <FLASH_MassErase+0x44>)
 8001b26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <FLASH_MassErase+0x44>)
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	4a09      	ldr	r2, [pc, #36]	@ (8001b58 <FLASH_MassErase+0x44>)
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001b38:	4b07      	ldr	r3, [pc, #28]	@ (8001b58 <FLASH_MassErase+0x44>)
 8001b3a:	691a      	ldr	r2, [r3, #16]
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	4313      	orrs	r3, r2
 8001b42:	4a05      	ldr	r2, [pc, #20]	@ (8001b58 <FLASH_MassErase+0x44>)
 8001b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b48:	6113      	str	r3, [r2, #16]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40023c00 	.word	0x40023c00

08001b5c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d102      	bne.n	8001b78 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	e010      	b.n	8001b9a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d103      	bne.n	8001b86 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001b7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	e009      	b.n	8001b9a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001b86:	78fb      	ldrb	r3, [r7, #3]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d103      	bne.n	8001b94 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001b8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	e002      	b.n	8001b9a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001b94:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b98:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b9a:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <FLASH_Erase_Sector+0x8c>)
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	4a12      	ldr	r2, [pc, #72]	@ (8001be8 <FLASH_Erase_Sector+0x8c>)
 8001ba0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ba4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001ba6:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <FLASH_Erase_Sector+0x8c>)
 8001ba8:	691a      	ldr	r2, [r3, #16]
 8001baa:	490f      	ldr	r1, [pc, #60]	@ (8001be8 <FLASH_Erase_Sector+0x8c>)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001be8 <FLASH_Erase_Sector+0x8c>)
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	4a0c      	ldr	r2, [pc, #48]	@ (8001be8 <FLASH_Erase_Sector+0x8c>)
 8001bb8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001bbc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <FLASH_Erase_Sector+0x8c>)
 8001bc0:	691a      	ldr	r2, [r3, #16]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	4a07      	ldr	r2, [pc, #28]	@ (8001be8 <FLASH_Erase_Sector+0x8c>)
 8001bca:	f043 0302 	orr.w	r3, r3, #2
 8001bce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001bd0:	4b05      	ldr	r3, [pc, #20]	@ (8001be8 <FLASH_Erase_Sector+0x8c>)
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	4a04      	ldr	r2, [pc, #16]	@ (8001be8 <FLASH_Erase_Sector+0x8c>)
 8001bd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bda:	6113      	str	r3, [r2, #16]
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	40023c00 	.word	0x40023c00

08001bec <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001bf0:	4b20      	ldr	r3, [pc, #128]	@ (8001c74 <FLASH_FlushCaches+0x88>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d017      	beq.n	8001c2c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c74 <FLASH_FlushCaches+0x88>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a1c      	ldr	r2, [pc, #112]	@ (8001c74 <FLASH_FlushCaches+0x88>)
 8001c02:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001c06:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001c08:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <FLASH_FlushCaches+0x88>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a19      	ldr	r2, [pc, #100]	@ (8001c74 <FLASH_FlushCaches+0x88>)
 8001c0e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b17      	ldr	r3, [pc, #92]	@ (8001c74 <FLASH_FlushCaches+0x88>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a16      	ldr	r2, [pc, #88]	@ (8001c74 <FLASH_FlushCaches+0x88>)
 8001c1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001c1e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c20:	4b14      	ldr	r3, [pc, #80]	@ (8001c74 <FLASH_FlushCaches+0x88>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a13      	ldr	r2, [pc, #76]	@ (8001c74 <FLASH_FlushCaches+0x88>)
 8001c26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c2a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001c2c:	4b11      	ldr	r3, [pc, #68]	@ (8001c74 <FLASH_FlushCaches+0x88>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d017      	beq.n	8001c68 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001c38:	4b0e      	ldr	r3, [pc, #56]	@ (8001c74 <FLASH_FlushCaches+0x88>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c74 <FLASH_FlushCaches+0x88>)
 8001c3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001c42:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001c44:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <FLASH_FlushCaches+0x88>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0a      	ldr	r2, [pc, #40]	@ (8001c74 <FLASH_FlushCaches+0x88>)
 8001c4a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <FLASH_FlushCaches+0x88>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a07      	ldr	r2, [pc, #28]	@ (8001c74 <FLASH_FlushCaches+0x88>)
 8001c56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c5a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c5c:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <FLASH_FlushCaches+0x88>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a04      	ldr	r2, [pc, #16]	@ (8001c74 <FLASH_FlushCaches+0x88>)
 8001c62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c66:	6013      	str	r3, [r2, #0]
  }
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40023c00 	.word	0x40023c00

08001c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	@ 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	e165      	b.n	8001f60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c94:	2201      	movs	r2, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	f040 8154 	bne.w	8001f5a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d005      	beq.n	8001cca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d130      	bne.n	8001d2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d00:	2201      	movs	r2, #1
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	091b      	lsrs	r3, r3, #4
 8001d16:	f003 0201 	and.w	r2, r3, #1
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	2b03      	cmp	r3, #3
 8001d36:	d017      	beq.n	8001d68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	2203      	movs	r2, #3
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d123      	bne.n	8001dbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	08da      	lsrs	r2, r3, #3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3208      	adds	r2, #8
 8001d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	08da      	lsrs	r2, r3, #3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3208      	adds	r2, #8
 8001db6:	69b9      	ldr	r1, [r7, #24]
 8001db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0203 	and.w	r2, r3, #3
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 80ae 	beq.w	8001f5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b5d      	ldr	r3, [pc, #372]	@ (8001f78 <HAL_GPIO_Init+0x300>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e06:	4a5c      	ldr	r2, [pc, #368]	@ (8001f78 <HAL_GPIO_Init+0x300>)
 8001e08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e0e:	4b5a      	ldr	r3, [pc, #360]	@ (8001f78 <HAL_GPIO_Init+0x300>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e1a:	4a58      	ldr	r2, [pc, #352]	@ (8001f7c <HAL_GPIO_Init+0x304>)
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	3302      	adds	r3, #2
 8001e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	220f      	movs	r2, #15
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a4f      	ldr	r2, [pc, #316]	@ (8001f80 <HAL_GPIO_Init+0x308>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d025      	beq.n	8001e92 <HAL_GPIO_Init+0x21a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a4e      	ldr	r2, [pc, #312]	@ (8001f84 <HAL_GPIO_Init+0x30c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d01f      	beq.n	8001e8e <HAL_GPIO_Init+0x216>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a4d      	ldr	r2, [pc, #308]	@ (8001f88 <HAL_GPIO_Init+0x310>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d019      	beq.n	8001e8a <HAL_GPIO_Init+0x212>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4c      	ldr	r2, [pc, #304]	@ (8001f8c <HAL_GPIO_Init+0x314>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d013      	beq.n	8001e86 <HAL_GPIO_Init+0x20e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a4b      	ldr	r2, [pc, #300]	@ (8001f90 <HAL_GPIO_Init+0x318>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d00d      	beq.n	8001e82 <HAL_GPIO_Init+0x20a>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a4a      	ldr	r2, [pc, #296]	@ (8001f94 <HAL_GPIO_Init+0x31c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d007      	beq.n	8001e7e <HAL_GPIO_Init+0x206>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a49      	ldr	r2, [pc, #292]	@ (8001f98 <HAL_GPIO_Init+0x320>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d101      	bne.n	8001e7a <HAL_GPIO_Init+0x202>
 8001e76:	2306      	movs	r3, #6
 8001e78:	e00c      	b.n	8001e94 <HAL_GPIO_Init+0x21c>
 8001e7a:	2307      	movs	r3, #7
 8001e7c:	e00a      	b.n	8001e94 <HAL_GPIO_Init+0x21c>
 8001e7e:	2305      	movs	r3, #5
 8001e80:	e008      	b.n	8001e94 <HAL_GPIO_Init+0x21c>
 8001e82:	2304      	movs	r3, #4
 8001e84:	e006      	b.n	8001e94 <HAL_GPIO_Init+0x21c>
 8001e86:	2303      	movs	r3, #3
 8001e88:	e004      	b.n	8001e94 <HAL_GPIO_Init+0x21c>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e002      	b.n	8001e94 <HAL_GPIO_Init+0x21c>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_GPIO_Init+0x21c>
 8001e92:	2300      	movs	r3, #0
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	f002 0203 	and.w	r2, r2, #3
 8001e9a:	0092      	lsls	r2, r2, #2
 8001e9c:	4093      	lsls	r3, r2
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea4:	4935      	ldr	r1, [pc, #212]	@ (8001f7c <HAL_GPIO_Init+0x304>)
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	089b      	lsrs	r3, r3, #2
 8001eaa:	3302      	adds	r3, #2
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb2:	4b3a      	ldr	r3, [pc, #232]	@ (8001f9c <HAL_GPIO_Init+0x324>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ed6:	4a31      	ldr	r2, [pc, #196]	@ (8001f9c <HAL_GPIO_Init+0x324>)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001edc:	4b2f      	ldr	r3, [pc, #188]	@ (8001f9c <HAL_GPIO_Init+0x324>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f00:	4a26      	ldr	r2, [pc, #152]	@ (8001f9c <HAL_GPIO_Init+0x324>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f06:	4b25      	ldr	r3, [pc, #148]	@ (8001f9c <HAL_GPIO_Init+0x324>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8001f9c <HAL_GPIO_Init+0x324>)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f30:	4b1a      	ldr	r3, [pc, #104]	@ (8001f9c <HAL_GPIO_Init+0x324>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f54:	4a11      	ldr	r2, [pc, #68]	@ (8001f9c <HAL_GPIO_Init+0x324>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	61fb      	str	r3, [r7, #28]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	2b0f      	cmp	r3, #15
 8001f64:	f67f ae96 	bls.w	8001c94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	3724      	adds	r7, #36	@ 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40013800 	.word	0x40013800
 8001f80:	40020000 	.word	0x40020000
 8001f84:	40020400 	.word	0x40020400
 8001f88:	40020800 	.word	0x40020800
 8001f8c:	40020c00 	.word	0x40020c00
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40021400 	.word	0x40021400
 8001f98:	40021800 	.word	0x40021800
 8001f9c:	40013c00 	.word	0x40013c00

08001fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691a      	ldr	r2, [r3, #16]
 8001fb0:	887b      	ldrh	r3, [r7, #2]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	73fb      	strb	r3, [r7, #15]
 8001fbc:	e001      	b.n	8001fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe0:	787b      	ldrb	r3, [r7, #1]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fe6:	887a      	ldrh	r2, [r7, #2]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fec:	e003      	b.n	8001ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fee:	887b      	ldrh	r3, [r7, #2]
 8001ff0:	041a      	lsls	r2, r3, #16
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	619a      	str	r2, [r3, #24]
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0cc      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002018:	4b68      	ldr	r3, [pc, #416]	@ (80021bc <HAL_RCC_ClockConfig+0x1b8>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d90c      	bls.n	8002040 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b65      	ldr	r3, [pc, #404]	@ (80021bc <HAL_RCC_ClockConfig+0x1b8>)
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800202e:	4b63      	ldr	r3, [pc, #396]	@ (80021bc <HAL_RCC_ClockConfig+0x1b8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d001      	beq.n	8002040 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e0b8      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d020      	beq.n	800208e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002058:	4b59      	ldr	r3, [pc, #356]	@ (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	4a58      	ldr	r2, [pc, #352]	@ (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002062:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002070:	4b53      	ldr	r3, [pc, #332]	@ (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	4a52      	ldr	r2, [pc, #328]	@ (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800207a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800207c:	4b50      	ldr	r3, [pc, #320]	@ (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	494d      	ldr	r1, [pc, #308]	@ (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	4313      	orrs	r3, r2
 800208c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d044      	beq.n	8002124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d107      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a2:	4b47      	ldr	r3, [pc, #284]	@ (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d119      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e07f      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d003      	beq.n	80020c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d107      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c2:	4b3f      	ldr	r3, [pc, #252]	@ (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e06f      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d2:	4b3b      	ldr	r3, [pc, #236]	@ (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e067      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e2:	4b37      	ldr	r3, [pc, #220]	@ (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f023 0203 	bic.w	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4934      	ldr	r1, [pc, #208]	@ (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f4:	f7ff f94c 	bl	8001390 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fc:	f7ff f948 	bl	8001390 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e04f      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002112:	4b2b      	ldr	r3, [pc, #172]	@ (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 020c 	and.w	r2, r3, #12
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	429a      	cmp	r2, r3
 8002122:	d1eb      	bne.n	80020fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002124:	4b25      	ldr	r3, [pc, #148]	@ (80021bc <HAL_RCC_ClockConfig+0x1b8>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 030f 	and.w	r3, r3, #15
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d20c      	bcs.n	800214c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b22      	ldr	r3, [pc, #136]	@ (80021bc <HAL_RCC_ClockConfig+0x1b8>)
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b20      	ldr	r3, [pc, #128]	@ (80021bc <HAL_RCC_ClockConfig+0x1b8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e032      	b.n	80021b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	d008      	beq.n	800216a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002158:	4b19      	ldr	r3, [pc, #100]	@ (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4916      	ldr	r1, [pc, #88]	@ (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	4313      	orrs	r3, r2
 8002168:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d009      	beq.n	800218a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002176:	4b12      	ldr	r3, [pc, #72]	@ (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	490e      	ldr	r1, [pc, #56]	@ (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	4313      	orrs	r3, r2
 8002188:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800218a:	f000 f855 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 800218e:	4602      	mov	r2, r0
 8002190:	4b0b      	ldr	r3, [pc, #44]	@ (80021c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	091b      	lsrs	r3, r3, #4
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	490a      	ldr	r1, [pc, #40]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 800219c:	5ccb      	ldrb	r3, [r1, r3]
 800219e:	fa22 f303 	lsr.w	r3, r2, r3
 80021a2:	4a09      	ldr	r2, [pc, #36]	@ (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021a6:	4b09      	ldr	r3, [pc, #36]	@ (80021cc <HAL_RCC_ClockConfig+0x1c8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff f8ac 	bl	8001308 <HAL_InitTick>

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023c00 	.word	0x40023c00
 80021c0:	40023800 	.word	0x40023800
 80021c4:	08003594 	.word	0x08003594
 80021c8:	2000001c 	.word	0x2000001c
 80021cc:	20000020 	.word	0x20000020

080021d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d4:	4b03      	ldr	r3, [pc, #12]	@ (80021e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80021d6:	681b      	ldr	r3, [r3, #0]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	2000001c 	.word	0x2000001c

080021e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021ec:	f7ff fff0 	bl	80021d0 <HAL_RCC_GetHCLKFreq>
 80021f0:	4602      	mov	r2, r0
 80021f2:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	0a9b      	lsrs	r3, r3, #10
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	4903      	ldr	r1, [pc, #12]	@ (800220c <HAL_RCC_GetPCLK1Freq+0x24>)
 80021fe:	5ccb      	ldrb	r3, [r1, r3]
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40023800 	.word	0x40023800
 800220c:	080035a4 	.word	0x080035a4

08002210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002214:	f7ff ffdc 	bl	80021d0 <HAL_RCC_GetHCLKFreq>
 8002218:	4602      	mov	r2, r0
 800221a:	4b05      	ldr	r3, [pc, #20]	@ (8002230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	0b5b      	lsrs	r3, r3, #13
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	4903      	ldr	r1, [pc, #12]	@ (8002234 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002226:	5ccb      	ldrb	r3, [r1, r3]
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800222c:	4618      	mov	r0, r3
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40023800 	.word	0x40023800
 8002234:	080035a4 	.word	0x080035a4

08002238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800223c:	b0ae      	sub	sp, #184	@ 0xb8
 800223e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800225e:	4bcb      	ldr	r3, [pc, #812]	@ (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b0c      	cmp	r3, #12
 8002268:	f200 8206 	bhi.w	8002678 <HAL_RCC_GetSysClockFreq+0x440>
 800226c:	a201      	add	r2, pc, #4	@ (adr r2, 8002274 <HAL_RCC_GetSysClockFreq+0x3c>)
 800226e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002272:	bf00      	nop
 8002274:	080022a9 	.word	0x080022a9
 8002278:	08002679 	.word	0x08002679
 800227c:	08002679 	.word	0x08002679
 8002280:	08002679 	.word	0x08002679
 8002284:	080022b1 	.word	0x080022b1
 8002288:	08002679 	.word	0x08002679
 800228c:	08002679 	.word	0x08002679
 8002290:	08002679 	.word	0x08002679
 8002294:	080022b9 	.word	0x080022b9
 8002298:	08002679 	.word	0x08002679
 800229c:	08002679 	.word	0x08002679
 80022a0:	08002679 	.word	0x08002679
 80022a4:	080024a9 	.word	0x080024a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022a8:	4bb9      	ldr	r3, [pc, #740]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x358>)
 80022aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022ae:	e1e7      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022b0:	4bb8      	ldr	r3, [pc, #736]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x35c>)
 80022b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022b6:	e1e3      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022b8:	4bb4      	ldr	r3, [pc, #720]	@ (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022c4:	4bb1      	ldr	r3, [pc, #708]	@ (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d071      	beq.n	80023b4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d0:	4bae      	ldr	r3, [pc, #696]	@ (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	099b      	lsrs	r3, r3, #6
 80022d6:	2200      	movs	r2, #0
 80022d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80022dc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80022e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80022ec:	2300      	movs	r3, #0
 80022ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80022f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80022f6:	4622      	mov	r2, r4
 80022f8:	462b      	mov	r3, r5
 80022fa:	f04f 0000 	mov.w	r0, #0
 80022fe:	f04f 0100 	mov.w	r1, #0
 8002302:	0159      	lsls	r1, r3, #5
 8002304:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002308:	0150      	lsls	r0, r2, #5
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4621      	mov	r1, r4
 8002310:	1a51      	subs	r1, r2, r1
 8002312:	6439      	str	r1, [r7, #64]	@ 0x40
 8002314:	4629      	mov	r1, r5
 8002316:	eb63 0301 	sbc.w	r3, r3, r1
 800231a:	647b      	str	r3, [r7, #68]	@ 0x44
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002328:	4649      	mov	r1, r9
 800232a:	018b      	lsls	r3, r1, #6
 800232c:	4641      	mov	r1, r8
 800232e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002332:	4641      	mov	r1, r8
 8002334:	018a      	lsls	r2, r1, #6
 8002336:	4641      	mov	r1, r8
 8002338:	1a51      	subs	r1, r2, r1
 800233a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800233c:	4649      	mov	r1, r9
 800233e:	eb63 0301 	sbc.w	r3, r3, r1
 8002342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002350:	4649      	mov	r1, r9
 8002352:	00cb      	lsls	r3, r1, #3
 8002354:	4641      	mov	r1, r8
 8002356:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800235a:	4641      	mov	r1, r8
 800235c:	00ca      	lsls	r2, r1, #3
 800235e:	4610      	mov	r0, r2
 8002360:	4619      	mov	r1, r3
 8002362:	4603      	mov	r3, r0
 8002364:	4622      	mov	r2, r4
 8002366:	189b      	adds	r3, r3, r2
 8002368:	633b      	str	r3, [r7, #48]	@ 0x30
 800236a:	462b      	mov	r3, r5
 800236c:	460a      	mov	r2, r1
 800236e:	eb42 0303 	adc.w	r3, r2, r3
 8002372:	637b      	str	r3, [r7, #52]	@ 0x34
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002380:	4629      	mov	r1, r5
 8002382:	024b      	lsls	r3, r1, #9
 8002384:	4621      	mov	r1, r4
 8002386:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800238a:	4621      	mov	r1, r4
 800238c:	024a      	lsls	r2, r1, #9
 800238e:	4610      	mov	r0, r2
 8002390:	4619      	mov	r1, r3
 8002392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002396:	2200      	movs	r2, #0
 8002398:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800239c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80023a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80023a4:	f7fd ff2e 	bl	8000204 <__aeabi_uldivmod>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4613      	mov	r3, r2
 80023ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80023b2:	e067      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023b4:	4b75      	ldr	r3, [pc, #468]	@ (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	099b      	lsrs	r3, r3, #6
 80023ba:	2200      	movs	r2, #0
 80023bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80023c0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80023c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80023ce:	2300      	movs	r3, #0
 80023d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80023d2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80023d6:	4622      	mov	r2, r4
 80023d8:	462b      	mov	r3, r5
 80023da:	f04f 0000 	mov.w	r0, #0
 80023de:	f04f 0100 	mov.w	r1, #0
 80023e2:	0159      	lsls	r1, r3, #5
 80023e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023e8:	0150      	lsls	r0, r2, #5
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4621      	mov	r1, r4
 80023f0:	1a51      	subs	r1, r2, r1
 80023f2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80023f4:	4629      	mov	r1, r5
 80023f6:	eb63 0301 	sbc.w	r3, r3, r1
 80023fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002408:	4649      	mov	r1, r9
 800240a:	018b      	lsls	r3, r1, #6
 800240c:	4641      	mov	r1, r8
 800240e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002412:	4641      	mov	r1, r8
 8002414:	018a      	lsls	r2, r1, #6
 8002416:	4641      	mov	r1, r8
 8002418:	ebb2 0a01 	subs.w	sl, r2, r1
 800241c:	4649      	mov	r1, r9
 800241e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800242e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002432:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002436:	4692      	mov	sl, r2
 8002438:	469b      	mov	fp, r3
 800243a:	4623      	mov	r3, r4
 800243c:	eb1a 0303 	adds.w	r3, sl, r3
 8002440:	623b      	str	r3, [r7, #32]
 8002442:	462b      	mov	r3, r5
 8002444:	eb4b 0303 	adc.w	r3, fp, r3
 8002448:	627b      	str	r3, [r7, #36]	@ 0x24
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002456:	4629      	mov	r1, r5
 8002458:	028b      	lsls	r3, r1, #10
 800245a:	4621      	mov	r1, r4
 800245c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002460:	4621      	mov	r1, r4
 8002462:	028a      	lsls	r2, r1, #10
 8002464:	4610      	mov	r0, r2
 8002466:	4619      	mov	r1, r3
 8002468:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800246c:	2200      	movs	r2, #0
 800246e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002470:	677a      	str	r2, [r7, #116]	@ 0x74
 8002472:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002476:	f7fd fec5 	bl	8000204 <__aeabi_uldivmod>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4613      	mov	r3, r2
 8002480:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002484:	4b41      	ldr	r3, [pc, #260]	@ (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	0c1b      	lsrs	r3, r3, #16
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	3301      	adds	r3, #1
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002496:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800249a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800249e:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80024a6:	e0eb      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024a8:	4b38      	ldr	r3, [pc, #224]	@ (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024b4:	4b35      	ldr	r3, [pc, #212]	@ (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d06b      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024c0:	4b32      	ldr	r3, [pc, #200]	@ (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	099b      	lsrs	r3, r3, #6
 80024c6:	2200      	movs	r2, #0
 80024c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80024cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80024d4:	2300      	movs	r3, #0
 80024d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80024d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80024dc:	4622      	mov	r2, r4
 80024de:	462b      	mov	r3, r5
 80024e0:	f04f 0000 	mov.w	r0, #0
 80024e4:	f04f 0100 	mov.w	r1, #0
 80024e8:	0159      	lsls	r1, r3, #5
 80024ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024ee:	0150      	lsls	r0, r2, #5
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4621      	mov	r1, r4
 80024f6:	1a51      	subs	r1, r2, r1
 80024f8:	61b9      	str	r1, [r7, #24]
 80024fa:	4629      	mov	r1, r5
 80024fc:	eb63 0301 	sbc.w	r3, r3, r1
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800250e:	4659      	mov	r1, fp
 8002510:	018b      	lsls	r3, r1, #6
 8002512:	4651      	mov	r1, sl
 8002514:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002518:	4651      	mov	r1, sl
 800251a:	018a      	lsls	r2, r1, #6
 800251c:	4651      	mov	r1, sl
 800251e:	ebb2 0801 	subs.w	r8, r2, r1
 8002522:	4659      	mov	r1, fp
 8002524:	eb63 0901 	sbc.w	r9, r3, r1
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002534:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002538:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800253c:	4690      	mov	r8, r2
 800253e:	4699      	mov	r9, r3
 8002540:	4623      	mov	r3, r4
 8002542:	eb18 0303 	adds.w	r3, r8, r3
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	462b      	mov	r3, r5
 800254a:	eb49 0303 	adc.w	r3, r9, r3
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800255c:	4629      	mov	r1, r5
 800255e:	024b      	lsls	r3, r1, #9
 8002560:	4621      	mov	r1, r4
 8002562:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002566:	4621      	mov	r1, r4
 8002568:	024a      	lsls	r2, r1, #9
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002572:	2200      	movs	r2, #0
 8002574:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002576:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002578:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800257c:	f7fd fe42 	bl	8000204 <__aeabi_uldivmod>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4613      	mov	r3, r2
 8002586:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800258a:	e065      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x420>
 800258c:	40023800 	.word	0x40023800
 8002590:	00f42400 	.word	0x00f42400
 8002594:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002598:	4b3d      	ldr	r3, [pc, #244]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x458>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	099b      	lsrs	r3, r3, #6
 800259e:	2200      	movs	r2, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	4611      	mov	r1, r2
 80025a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80025aa:	2300      	movs	r3, #0
 80025ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80025ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80025b2:	4642      	mov	r2, r8
 80025b4:	464b      	mov	r3, r9
 80025b6:	f04f 0000 	mov.w	r0, #0
 80025ba:	f04f 0100 	mov.w	r1, #0
 80025be:	0159      	lsls	r1, r3, #5
 80025c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c4:	0150      	lsls	r0, r2, #5
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4641      	mov	r1, r8
 80025cc:	1a51      	subs	r1, r2, r1
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	4649      	mov	r1, r9
 80025d2:	eb63 0301 	sbc.w	r3, r3, r1
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80025e4:	4659      	mov	r1, fp
 80025e6:	018b      	lsls	r3, r1, #6
 80025e8:	4651      	mov	r1, sl
 80025ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ee:	4651      	mov	r1, sl
 80025f0:	018a      	lsls	r2, r1, #6
 80025f2:	4651      	mov	r1, sl
 80025f4:	1a54      	subs	r4, r2, r1
 80025f6:	4659      	mov	r1, fp
 80025f8:	eb63 0501 	sbc.w	r5, r3, r1
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	00eb      	lsls	r3, r5, #3
 8002606:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800260a:	00e2      	lsls	r2, r4, #3
 800260c:	4614      	mov	r4, r2
 800260e:	461d      	mov	r5, r3
 8002610:	4643      	mov	r3, r8
 8002612:	18e3      	adds	r3, r4, r3
 8002614:	603b      	str	r3, [r7, #0]
 8002616:	464b      	mov	r3, r9
 8002618:	eb45 0303 	adc.w	r3, r5, r3
 800261c:	607b      	str	r3, [r7, #4]
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	e9d7 4500 	ldrd	r4, r5, [r7]
 800262a:	4629      	mov	r1, r5
 800262c:	028b      	lsls	r3, r1, #10
 800262e:	4621      	mov	r1, r4
 8002630:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002634:	4621      	mov	r1, r4
 8002636:	028a      	lsls	r2, r1, #10
 8002638:	4610      	mov	r0, r2
 800263a:	4619      	mov	r1, r3
 800263c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002640:	2200      	movs	r2, #0
 8002642:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002644:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002646:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800264a:	f7fd fddb 	bl	8000204 <__aeabi_uldivmod>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4613      	mov	r3, r2
 8002654:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002658:	4b0d      	ldr	r3, [pc, #52]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x458>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	0f1b      	lsrs	r3, r3, #28
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002666:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800266a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800266e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002672:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002676:	e003      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002678:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x45c>)
 800267a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800267e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002680:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002684:	4618      	mov	r0, r3
 8002686:	37b8      	adds	r7, #184	@ 0xb8
 8002688:	46bd      	mov	sp, r7
 800268a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800
 8002694:	00f42400 	.word	0x00f42400

08002698 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e28d      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 8083 	beq.w	80027be <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026b8:	4b94      	ldr	r3, [pc, #592]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 030c 	and.w	r3, r3, #12
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d019      	beq.n	80026f8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80026c4:	4b91      	ldr	r3, [pc, #580]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 030c 	and.w	r3, r3, #12
        || \
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d106      	bne.n	80026de <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80026d0:	4b8e      	ldr	r3, [pc, #568]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026dc:	d00c      	beq.n	80026f8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026de:	4b8b      	ldr	r3, [pc, #556]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80026e6:	2b0c      	cmp	r3, #12
 80026e8:	d112      	bne.n	8002710 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ea:	4b88      	ldr	r3, [pc, #544]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026f6:	d10b      	bne.n	8002710 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	4b84      	ldr	r3, [pc, #528]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d05b      	beq.n	80027bc <HAL_RCC_OscConfig+0x124>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d157      	bne.n	80027bc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e25a      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002718:	d106      	bne.n	8002728 <HAL_RCC_OscConfig+0x90>
 800271a:	4b7c      	ldr	r3, [pc, #496]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a7b      	ldr	r2, [pc, #492]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e01d      	b.n	8002764 <HAL_RCC_OscConfig+0xcc>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0xb4>
 8002732:	4b76      	ldr	r3, [pc, #472]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a75      	ldr	r2, [pc, #468]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 8002738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b73      	ldr	r3, [pc, #460]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a72      	ldr	r2, [pc, #456]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e00b      	b.n	8002764 <HAL_RCC_OscConfig+0xcc>
 800274c:	4b6f      	ldr	r3, [pc, #444]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a6e      	ldr	r2, [pc, #440]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 8002752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	4b6c      	ldr	r3, [pc, #432]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a6b      	ldr	r2, [pc, #428]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 800275e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d013      	beq.n	8002794 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7fe fe10 	bl	8001390 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002774:	f7fe fe0c 	bl	8001390 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	@ 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e21f      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002786:	4b61      	ldr	r3, [pc, #388]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0xdc>
 8002792:	e014      	b.n	80027be <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7fe fdfc 	bl	8001390 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800279c:	f7fe fdf8 	bl	8001390 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	@ 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e20b      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ae:	4b57      	ldr	r3, [pc, #348]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x104>
 80027ba:	e000      	b.n	80027be <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d06f      	beq.n	80028aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027ca:	4b50      	ldr	r3, [pc, #320]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d017      	beq.n	8002806 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80027d6:	4b4d      	ldr	r3, [pc, #308]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 030c 	and.w	r3, r3, #12
        || \
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d105      	bne.n	80027ee <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80027e2:	4b4a      	ldr	r3, [pc, #296]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00b      	beq.n	8002806 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ee:	4b47      	ldr	r3, [pc, #284]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80027f6:	2b0c      	cmp	r3, #12
 80027f8:	d11c      	bne.n	8002834 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027fa:	4b44      	ldr	r3, [pc, #272]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d116      	bne.n	8002834 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002806:	4b41      	ldr	r3, [pc, #260]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d005      	beq.n	800281e <HAL_RCC_OscConfig+0x186>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d001      	beq.n	800281e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e1d3      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281e:	4b3b      	ldr	r3, [pc, #236]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4937      	ldr	r1, [pc, #220]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002832:	e03a      	b.n	80028aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d020      	beq.n	800287e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800283c:	4b34      	ldr	r3, [pc, #208]	@ (8002910 <HAL_RCC_OscConfig+0x278>)
 800283e:	2201      	movs	r2, #1
 8002840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002842:	f7fe fda5 	bl	8001390 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800284a:	f7fe fda1 	bl	8001390 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e1b4      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285c:	4b2b      	ldr	r3, [pc, #172]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0f0      	beq.n	800284a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002868:	4b28      	ldr	r3, [pc, #160]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	4925      	ldr	r1, [pc, #148]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 8002878:	4313      	orrs	r3, r2
 800287a:	600b      	str	r3, [r1, #0]
 800287c:	e015      	b.n	80028aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800287e:	4b24      	ldr	r3, [pc, #144]	@ (8002910 <HAL_RCC_OscConfig+0x278>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7fe fd84 	bl	8001390 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288c:	f7fe fd80 	bl	8001390 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e193      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289e:	4b1b      	ldr	r3, [pc, #108]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d036      	beq.n	8002924 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d016      	beq.n	80028ec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028be:	4b15      	ldr	r3, [pc, #84]	@ (8002914 <HAL_RCC_OscConfig+0x27c>)
 80028c0:	2201      	movs	r2, #1
 80028c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c4:	f7fe fd64 	bl	8001390 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028cc:	f7fe fd60 	bl	8001390 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e173      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028de:	4b0b      	ldr	r3, [pc, #44]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80028e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0x234>
 80028ea:	e01b      	b.n	8002924 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ec:	4b09      	ldr	r3, [pc, #36]	@ (8002914 <HAL_RCC_OscConfig+0x27c>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f2:	f7fe fd4d 	bl	8001390 <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f8:	e00e      	b.n	8002918 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028fa:	f7fe fd49 	bl	8001390 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d907      	bls.n	8002918 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e15c      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
 800290c:	40023800 	.word	0x40023800
 8002910:	42470000 	.word	0x42470000
 8002914:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002918:	4b8a      	ldr	r3, [pc, #552]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 800291a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1ea      	bne.n	80028fa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 8097 	beq.w	8002a60 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002932:	2300      	movs	r3, #0
 8002934:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002936:	4b83      	ldr	r3, [pc, #524]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10f      	bne.n	8002962 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	4b7f      	ldr	r3, [pc, #508]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 800294c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002950:	6413      	str	r3, [r2, #64]	@ 0x40
 8002952:	4b7c      	ldr	r3, [pc, #496]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800295e:	2301      	movs	r3, #1
 8002960:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002962:	4b79      	ldr	r3, [pc, #484]	@ (8002b48 <HAL_RCC_OscConfig+0x4b0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d118      	bne.n	80029a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800296e:	4b76      	ldr	r3, [pc, #472]	@ (8002b48 <HAL_RCC_OscConfig+0x4b0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a75      	ldr	r2, [pc, #468]	@ (8002b48 <HAL_RCC_OscConfig+0x4b0>)
 8002974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002978:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800297a:	f7fe fd09 	bl	8001390 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002982:	f7fe fd05 	bl	8001390 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e118      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002994:	4b6c      	ldr	r3, [pc, #432]	@ (8002b48 <HAL_RCC_OscConfig+0x4b0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d106      	bne.n	80029b6 <HAL_RCC_OscConfig+0x31e>
 80029a8:	4b66      	ldr	r3, [pc, #408]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ac:	4a65      	ldr	r2, [pc, #404]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b4:	e01c      	b.n	80029f0 <HAL_RCC_OscConfig+0x358>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b05      	cmp	r3, #5
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCC_OscConfig+0x340>
 80029be:	4b61      	ldr	r3, [pc, #388]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c2:	4a60      	ldr	r2, [pc, #384]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029c4:	f043 0304 	orr.w	r3, r3, #4
 80029c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ca:	4b5e      	ldr	r3, [pc, #376]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ce:	4a5d      	ldr	r2, [pc, #372]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d6:	e00b      	b.n	80029f0 <HAL_RCC_OscConfig+0x358>
 80029d8:	4b5a      	ldr	r3, [pc, #360]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029dc:	4a59      	ldr	r2, [pc, #356]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029de:	f023 0301 	bic.w	r3, r3, #1
 80029e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029e4:	4b57      	ldr	r3, [pc, #348]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e8:	4a56      	ldr	r2, [pc, #344]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029ea:	f023 0304 	bic.w	r3, r3, #4
 80029ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d015      	beq.n	8002a24 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7fe fcca 	bl	8001390 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fe:	e00a      	b.n	8002a16 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a00:	f7fe fcc6 	bl	8001390 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e0d7      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a16:	4b4b      	ldr	r3, [pc, #300]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0ee      	beq.n	8002a00 <HAL_RCC_OscConfig+0x368>
 8002a22:	e014      	b.n	8002a4e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a24:	f7fe fcb4 	bl	8001390 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2a:	e00a      	b.n	8002a42 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2c:	f7fe fcb0 	bl	8001390 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e0c1      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a42:	4b40      	ldr	r3, [pc, #256]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1ee      	bne.n	8002a2c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a4e:	7dfb      	ldrb	r3, [r7, #23]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d105      	bne.n	8002a60 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a54:	4b3b      	ldr	r3, [pc, #236]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	4a3a      	ldr	r2, [pc, #232]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002a5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80ad 	beq.w	8002bc4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a6a:	4b36      	ldr	r3, [pc, #216]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d060      	beq.n	8002b38 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d145      	bne.n	8002b0a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7e:	4b33      	ldr	r3, [pc, #204]	@ (8002b4c <HAL_RCC_OscConfig+0x4b4>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a84:	f7fe fc84 	bl	8001390 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe fc80 	bl	8001390 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e093      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9e:	4b29      	ldr	r3, [pc, #164]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69da      	ldr	r2, [r3, #28]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab8:	019b      	lsls	r3, r3, #6
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac0:	085b      	lsrs	r3, r3, #1
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	041b      	lsls	r3, r3, #16
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002acc:	061b      	lsls	r3, r3, #24
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad4:	071b      	lsls	r3, r3, #28
 8002ad6:	491b      	ldr	r1, [pc, #108]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002adc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b4c <HAL_RCC_OscConfig+0x4b4>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae2:	f7fe fc55 	bl	8001390 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aea:	f7fe fc51 	bl	8001390 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e064      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afc:	4b11      	ldr	r3, [pc, #68]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x452>
 8002b08:	e05c      	b.n	8002bc4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0a:	4b10      	ldr	r3, [pc, #64]	@ (8002b4c <HAL_RCC_OscConfig+0x4b4>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fe fc3e 	bl	8001390 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b18:	f7fe fc3a 	bl	8001390 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e04d      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2a:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x480>
 8002b36:	e045      	b.n	8002bc4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d107      	bne.n	8002b50 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e040      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40007000 	.word	0x40007000
 8002b4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b50:	4b1f      	ldr	r3, [pc, #124]	@ (8002bd0 <HAL_RCC_OscConfig+0x538>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d030      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d129      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d122      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b80:	4013      	ands	r3, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d119      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b96:	085b      	lsrs	r3, r3, #1
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d10f      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002baa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d107      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800

08002bd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e042      	b.n	8002c6c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7fe fa58 	bl	80010b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2224      	movs	r2, #36	@ 0x24
 8002c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 fa09 	bl	8003030 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695a      	ldr	r2, [r3, #20]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08a      	sub	sp, #40	@ 0x28
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	4613      	mov	r3, r2
 8002c82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b20      	cmp	r3, #32
 8002c92:	d175      	bne.n	8002d80 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_UART_Transmit+0x2c>
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e06e      	b.n	8002d82 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2221      	movs	r2, #33	@ 0x21
 8002cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cb2:	f7fe fb6d 	bl	8001390 <HAL_GetTick>
 8002cb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	88fa      	ldrh	r2, [r7, #6]
 8002cbc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	88fa      	ldrh	r2, [r7, #6]
 8002cc2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ccc:	d108      	bne.n	8002ce0 <HAL_UART_Transmit+0x6c>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d104      	bne.n	8002ce0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	61bb      	str	r3, [r7, #24]
 8002cde:	e003      	b.n	8002ce8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ce8:	e02e      	b.n	8002d48 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	2180      	movs	r1, #128	@ 0x80
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 f8df 	bl	8002eb8 <UART_WaitOnFlagUntilTimeout>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e03a      	b.n	8002d82 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10b      	bne.n	8002d2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	3302      	adds	r3, #2
 8002d26:	61bb      	str	r3, [r7, #24]
 8002d28:	e007      	b.n	8002d3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	781a      	ldrb	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	3301      	adds	r3, #1
 8002d38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1cb      	bne.n	8002cea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2140      	movs	r1, #64	@ 0x40
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f8ab 	bl	8002eb8 <UART_WaitOnFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e006      	b.n	8002d82 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e000      	b.n	8002d82 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d80:	2302      	movs	r3, #2
  }
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3720      	adds	r7, #32
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b08a      	sub	sp, #40	@ 0x28
 8002d8e:	af02      	add	r7, sp, #8
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	603b      	str	r3, [r7, #0]
 8002d96:	4613      	mov	r3, r2
 8002d98:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	f040 8081 	bne.w	8002eae <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_UART_Receive+0x2e>
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e079      	b.n	8002eb0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2222      	movs	r2, #34	@ 0x22
 8002dc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dd0:	f7fe fade 	bl	8001390 <HAL_GetTick>
 8002dd4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	88fa      	ldrh	r2, [r7, #6]
 8002dda:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	88fa      	ldrh	r2, [r7, #6]
 8002de0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dea:	d108      	bne.n	8002dfe <HAL_UART_Receive+0x74>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d104      	bne.n	8002dfe <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002df4:	2300      	movs	r3, #0
 8002df6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	61bb      	str	r3, [r7, #24]
 8002dfc:	e003      	b.n	8002e06 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002e06:	e047      	b.n	8002e98 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2120      	movs	r1, #32
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f850 	bl	8002eb8 <UART_WaitOnFlagUntilTimeout>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d005      	beq.n	8002e2a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e042      	b.n	8002eb0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10c      	bne.n	8002e4a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	3302      	adds	r3, #2
 8002e46:	61bb      	str	r3, [r7, #24]
 8002e48:	e01f      	b.n	8002e8a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e52:	d007      	beq.n	8002e64 <HAL_UART_Receive+0xda>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10a      	bne.n	8002e72 <HAL_UART_Receive+0xe8>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d106      	bne.n	8002e72 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	701a      	strb	r2, [r3, #0]
 8002e70:	e008      	b.n	8002e84 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	3301      	adds	r3, #1
 8002e88:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1b2      	bne.n	8002e08 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e000      	b.n	8002eb0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002eae:	2302      	movs	r3, #2
  }
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec8:	e03b      	b.n	8002f42 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed0:	d037      	beq.n	8002f42 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed2:	f7fe fa5d 	bl	8001390 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	6a3a      	ldr	r2, [r7, #32]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d302      	bcc.n	8002ee8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e03a      	b.n	8002f62 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d023      	beq.n	8002f42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b80      	cmp	r3, #128	@ 0x80
 8002efe:	d020      	beq.n	8002f42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b40      	cmp	r3, #64	@ 0x40
 8002f04:	d01d      	beq.n	8002f42 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d116      	bne.n	8002f42 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f14:	2300      	movs	r3, #0
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f81d 	bl	8002f6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2208      	movs	r2, #8
 8002f34:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e00f      	b.n	8002f62 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	bf0c      	ite	eq
 8002f52:	2301      	moveq	r3, #1
 8002f54:	2300      	movne	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d0b4      	beq.n	8002eca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b095      	sub	sp, #84	@ 0x54
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	330c      	adds	r3, #12
 8002f78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f7c:	e853 3f00 	ldrex	r3, [r3]
 8002f80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	330c      	adds	r3, #12
 8002f90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f92:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f9a:	e841 2300 	strex	r3, r2, [r1]
 8002f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1e5      	bne.n	8002f72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	3314      	adds	r3, #20
 8002fac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	e853 3f00 	ldrex	r3, [r3]
 8002fb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f023 0301 	bic.w	r3, r3, #1
 8002fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3314      	adds	r3, #20
 8002fc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fce:	e841 2300 	strex	r3, r2, [r1]
 8002fd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1e5      	bne.n	8002fa6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d119      	bne.n	8003016 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	330c      	adds	r3, #12
 8002fe8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	e853 3f00 	ldrex	r3, [r3]
 8002ff0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	f023 0310 	bic.w	r3, r3, #16
 8002ff8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	330c      	adds	r3, #12
 8003000:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003002:	61ba      	str	r2, [r7, #24]
 8003004:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003006:	6979      	ldr	r1, [r7, #20]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	e841 2300 	strex	r3, r2, [r1]
 800300e:	613b      	str	r3, [r7, #16]
   return(result);
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1e5      	bne.n	8002fe2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2220      	movs	r2, #32
 800301a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003024:	bf00      	nop
 8003026:	3754      	adds	r7, #84	@ 0x54
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003034:	b0c0      	sub	sp, #256	@ 0x100
 8003036:	af00      	add	r7, sp, #0
 8003038:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800303c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800304c:	68d9      	ldr	r1, [r3, #12]
 800304e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	ea40 0301 	orr.w	r3, r0, r1
 8003058:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800305a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	431a      	orrs	r2, r3
 8003068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	431a      	orrs	r2, r3
 8003070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800307c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003088:	f021 010c 	bic.w	r1, r1, #12
 800308c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003096:	430b      	orrs	r3, r1
 8003098:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800309a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80030a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030aa:	6999      	ldr	r1, [r3, #24]
 80030ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	ea40 0301 	orr.w	r3, r0, r1
 80030b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	4b8f      	ldr	r3, [pc, #572]	@ (80032fc <UART_SetConfig+0x2cc>)
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d005      	beq.n	80030d0 <UART_SetConfig+0xa0>
 80030c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	4b8d      	ldr	r3, [pc, #564]	@ (8003300 <UART_SetConfig+0x2d0>)
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d104      	bne.n	80030da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030d0:	f7ff f89e 	bl	8002210 <HAL_RCC_GetPCLK2Freq>
 80030d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80030d8:	e003      	b.n	80030e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030da:	f7ff f885 	bl	80021e8 <HAL_RCC_GetPCLK1Freq>
 80030de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030ec:	f040 810c 	bne.w	8003308 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030f4:	2200      	movs	r2, #0
 80030f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80030fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80030fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003102:	4622      	mov	r2, r4
 8003104:	462b      	mov	r3, r5
 8003106:	1891      	adds	r1, r2, r2
 8003108:	65b9      	str	r1, [r7, #88]	@ 0x58
 800310a:	415b      	adcs	r3, r3
 800310c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800310e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003112:	4621      	mov	r1, r4
 8003114:	eb12 0801 	adds.w	r8, r2, r1
 8003118:	4629      	mov	r1, r5
 800311a:	eb43 0901 	adc.w	r9, r3, r1
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800312a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800312e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003132:	4690      	mov	r8, r2
 8003134:	4699      	mov	r9, r3
 8003136:	4623      	mov	r3, r4
 8003138:	eb18 0303 	adds.w	r3, r8, r3
 800313c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003140:	462b      	mov	r3, r5
 8003142:	eb49 0303 	adc.w	r3, r9, r3
 8003146:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800314a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003156:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800315a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800315e:	460b      	mov	r3, r1
 8003160:	18db      	adds	r3, r3, r3
 8003162:	653b      	str	r3, [r7, #80]	@ 0x50
 8003164:	4613      	mov	r3, r2
 8003166:	eb42 0303 	adc.w	r3, r2, r3
 800316a:	657b      	str	r3, [r7, #84]	@ 0x54
 800316c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003170:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003174:	f7fd f846 	bl	8000204 <__aeabi_uldivmod>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4b61      	ldr	r3, [pc, #388]	@ (8003304 <UART_SetConfig+0x2d4>)
 800317e:	fba3 2302 	umull	r2, r3, r3, r2
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	011c      	lsls	r4, r3, #4
 8003186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800318a:	2200      	movs	r2, #0
 800318c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003190:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003194:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003198:	4642      	mov	r2, r8
 800319a:	464b      	mov	r3, r9
 800319c:	1891      	adds	r1, r2, r2
 800319e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80031a0:	415b      	adcs	r3, r3
 80031a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80031a8:	4641      	mov	r1, r8
 80031aa:	eb12 0a01 	adds.w	sl, r2, r1
 80031ae:	4649      	mov	r1, r9
 80031b0:	eb43 0b01 	adc.w	fp, r3, r1
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031c8:	4692      	mov	sl, r2
 80031ca:	469b      	mov	fp, r3
 80031cc:	4643      	mov	r3, r8
 80031ce:	eb1a 0303 	adds.w	r3, sl, r3
 80031d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031d6:	464b      	mov	r3, r9
 80031d8:	eb4b 0303 	adc.w	r3, fp, r3
 80031dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80031e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80031f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80031f4:	460b      	mov	r3, r1
 80031f6:	18db      	adds	r3, r3, r3
 80031f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80031fa:	4613      	mov	r3, r2
 80031fc:	eb42 0303 	adc.w	r3, r2, r3
 8003200:	647b      	str	r3, [r7, #68]	@ 0x44
 8003202:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003206:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800320a:	f7fc fffb 	bl	8000204 <__aeabi_uldivmod>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4611      	mov	r1, r2
 8003214:	4b3b      	ldr	r3, [pc, #236]	@ (8003304 <UART_SetConfig+0x2d4>)
 8003216:	fba3 2301 	umull	r2, r3, r3, r1
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	2264      	movs	r2, #100	@ 0x64
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	1acb      	subs	r3, r1, r3
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800322a:	4b36      	ldr	r3, [pc, #216]	@ (8003304 <UART_SetConfig+0x2d4>)
 800322c:	fba3 2302 	umull	r2, r3, r3, r2
 8003230:	095b      	lsrs	r3, r3, #5
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003238:	441c      	add	r4, r3
 800323a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800323e:	2200      	movs	r2, #0
 8003240:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003244:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003248:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800324c:	4642      	mov	r2, r8
 800324e:	464b      	mov	r3, r9
 8003250:	1891      	adds	r1, r2, r2
 8003252:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003254:	415b      	adcs	r3, r3
 8003256:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003258:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800325c:	4641      	mov	r1, r8
 800325e:	1851      	adds	r1, r2, r1
 8003260:	6339      	str	r1, [r7, #48]	@ 0x30
 8003262:	4649      	mov	r1, r9
 8003264:	414b      	adcs	r3, r1
 8003266:	637b      	str	r3, [r7, #52]	@ 0x34
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003274:	4659      	mov	r1, fp
 8003276:	00cb      	lsls	r3, r1, #3
 8003278:	4651      	mov	r1, sl
 800327a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800327e:	4651      	mov	r1, sl
 8003280:	00ca      	lsls	r2, r1, #3
 8003282:	4610      	mov	r0, r2
 8003284:	4619      	mov	r1, r3
 8003286:	4603      	mov	r3, r0
 8003288:	4642      	mov	r2, r8
 800328a:	189b      	adds	r3, r3, r2
 800328c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003290:	464b      	mov	r3, r9
 8003292:	460a      	mov	r2, r1
 8003294:	eb42 0303 	adc.w	r3, r2, r3
 8003298:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800329c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80032a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80032ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80032b0:	460b      	mov	r3, r1
 80032b2:	18db      	adds	r3, r3, r3
 80032b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032b6:	4613      	mov	r3, r2
 80032b8:	eb42 0303 	adc.w	r3, r2, r3
 80032bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80032c6:	f7fc ff9d 	bl	8000204 <__aeabi_uldivmod>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003304 <UART_SetConfig+0x2d4>)
 80032d0:	fba3 1302 	umull	r1, r3, r3, r2
 80032d4:	095b      	lsrs	r3, r3, #5
 80032d6:	2164      	movs	r1, #100	@ 0x64
 80032d8:	fb01 f303 	mul.w	r3, r1, r3
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	3332      	adds	r3, #50	@ 0x32
 80032e2:	4a08      	ldr	r2, [pc, #32]	@ (8003304 <UART_SetConfig+0x2d4>)
 80032e4:	fba2 2303 	umull	r2, r3, r2, r3
 80032e8:	095b      	lsrs	r3, r3, #5
 80032ea:	f003 0207 	and.w	r2, r3, #7
 80032ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4422      	add	r2, r4
 80032f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032f8:	e106      	b.n	8003508 <UART_SetConfig+0x4d8>
 80032fa:	bf00      	nop
 80032fc:	40011000 	.word	0x40011000
 8003300:	40011400 	.word	0x40011400
 8003304:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800330c:	2200      	movs	r2, #0
 800330e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003312:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003316:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800331a:	4642      	mov	r2, r8
 800331c:	464b      	mov	r3, r9
 800331e:	1891      	adds	r1, r2, r2
 8003320:	6239      	str	r1, [r7, #32]
 8003322:	415b      	adcs	r3, r3
 8003324:	627b      	str	r3, [r7, #36]	@ 0x24
 8003326:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800332a:	4641      	mov	r1, r8
 800332c:	1854      	adds	r4, r2, r1
 800332e:	4649      	mov	r1, r9
 8003330:	eb43 0501 	adc.w	r5, r3, r1
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	00eb      	lsls	r3, r5, #3
 800333e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003342:	00e2      	lsls	r2, r4, #3
 8003344:	4614      	mov	r4, r2
 8003346:	461d      	mov	r5, r3
 8003348:	4643      	mov	r3, r8
 800334a:	18e3      	adds	r3, r4, r3
 800334c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003350:	464b      	mov	r3, r9
 8003352:	eb45 0303 	adc.w	r3, r5, r3
 8003356:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800335a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003366:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003376:	4629      	mov	r1, r5
 8003378:	008b      	lsls	r3, r1, #2
 800337a:	4621      	mov	r1, r4
 800337c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003380:	4621      	mov	r1, r4
 8003382:	008a      	lsls	r2, r1, #2
 8003384:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003388:	f7fc ff3c 	bl	8000204 <__aeabi_uldivmod>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4b60      	ldr	r3, [pc, #384]	@ (8003514 <UART_SetConfig+0x4e4>)
 8003392:	fba3 2302 	umull	r2, r3, r3, r2
 8003396:	095b      	lsrs	r3, r3, #5
 8003398:	011c      	lsls	r4, r3, #4
 800339a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800339e:	2200      	movs	r2, #0
 80033a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80033a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80033a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80033ac:	4642      	mov	r2, r8
 80033ae:	464b      	mov	r3, r9
 80033b0:	1891      	adds	r1, r2, r2
 80033b2:	61b9      	str	r1, [r7, #24]
 80033b4:	415b      	adcs	r3, r3
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033bc:	4641      	mov	r1, r8
 80033be:	1851      	adds	r1, r2, r1
 80033c0:	6139      	str	r1, [r7, #16]
 80033c2:	4649      	mov	r1, r9
 80033c4:	414b      	adcs	r3, r1
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033d4:	4659      	mov	r1, fp
 80033d6:	00cb      	lsls	r3, r1, #3
 80033d8:	4651      	mov	r1, sl
 80033da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033de:	4651      	mov	r1, sl
 80033e0:	00ca      	lsls	r2, r1, #3
 80033e2:	4610      	mov	r0, r2
 80033e4:	4619      	mov	r1, r3
 80033e6:	4603      	mov	r3, r0
 80033e8:	4642      	mov	r2, r8
 80033ea:	189b      	adds	r3, r3, r2
 80033ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033f0:	464b      	mov	r3, r9
 80033f2:	460a      	mov	r2, r1
 80033f4:	eb42 0303 	adc.w	r3, r2, r3
 80033f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80033fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003406:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003414:	4649      	mov	r1, r9
 8003416:	008b      	lsls	r3, r1, #2
 8003418:	4641      	mov	r1, r8
 800341a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800341e:	4641      	mov	r1, r8
 8003420:	008a      	lsls	r2, r1, #2
 8003422:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003426:	f7fc feed 	bl	8000204 <__aeabi_uldivmod>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4611      	mov	r1, r2
 8003430:	4b38      	ldr	r3, [pc, #224]	@ (8003514 <UART_SetConfig+0x4e4>)
 8003432:	fba3 2301 	umull	r2, r3, r3, r1
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	2264      	movs	r2, #100	@ 0x64
 800343a:	fb02 f303 	mul.w	r3, r2, r3
 800343e:	1acb      	subs	r3, r1, r3
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	3332      	adds	r3, #50	@ 0x32
 8003444:	4a33      	ldr	r2, [pc, #204]	@ (8003514 <UART_SetConfig+0x4e4>)
 8003446:	fba2 2303 	umull	r2, r3, r2, r3
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003450:	441c      	add	r4, r3
 8003452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003456:	2200      	movs	r2, #0
 8003458:	673b      	str	r3, [r7, #112]	@ 0x70
 800345a:	677a      	str	r2, [r7, #116]	@ 0x74
 800345c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003460:	4642      	mov	r2, r8
 8003462:	464b      	mov	r3, r9
 8003464:	1891      	adds	r1, r2, r2
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	415b      	adcs	r3, r3
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003470:	4641      	mov	r1, r8
 8003472:	1851      	adds	r1, r2, r1
 8003474:	6039      	str	r1, [r7, #0]
 8003476:	4649      	mov	r1, r9
 8003478:	414b      	adcs	r3, r1
 800347a:	607b      	str	r3, [r7, #4]
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003488:	4659      	mov	r1, fp
 800348a:	00cb      	lsls	r3, r1, #3
 800348c:	4651      	mov	r1, sl
 800348e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003492:	4651      	mov	r1, sl
 8003494:	00ca      	lsls	r2, r1, #3
 8003496:	4610      	mov	r0, r2
 8003498:	4619      	mov	r1, r3
 800349a:	4603      	mov	r3, r0
 800349c:	4642      	mov	r2, r8
 800349e:	189b      	adds	r3, r3, r2
 80034a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034a2:	464b      	mov	r3, r9
 80034a4:	460a      	mov	r2, r1
 80034a6:	eb42 0303 	adc.w	r3, r2, r3
 80034aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80034b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80034c4:	4649      	mov	r1, r9
 80034c6:	008b      	lsls	r3, r1, #2
 80034c8:	4641      	mov	r1, r8
 80034ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034ce:	4641      	mov	r1, r8
 80034d0:	008a      	lsls	r2, r1, #2
 80034d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80034d6:	f7fc fe95 	bl	8000204 <__aeabi_uldivmod>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	4b0d      	ldr	r3, [pc, #52]	@ (8003514 <UART_SetConfig+0x4e4>)
 80034e0:	fba3 1302 	umull	r1, r3, r3, r2
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	2164      	movs	r1, #100	@ 0x64
 80034e8:	fb01 f303 	mul.w	r3, r1, r3
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	3332      	adds	r3, #50	@ 0x32
 80034f2:	4a08      	ldr	r2, [pc, #32]	@ (8003514 <UART_SetConfig+0x4e4>)
 80034f4:	fba2 2303 	umull	r2, r3, r2, r3
 80034f8:	095b      	lsrs	r3, r3, #5
 80034fa:	f003 020f 	and.w	r2, r3, #15
 80034fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4422      	add	r2, r4
 8003506:	609a      	str	r2, [r3, #8]
}
 8003508:	bf00      	nop
 800350a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800350e:	46bd      	mov	sp, r7
 8003510:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003514:	51eb851f 	.word	0x51eb851f

08003518 <memset>:
 8003518:	4402      	add	r2, r0
 800351a:	4603      	mov	r3, r0
 800351c:	4293      	cmp	r3, r2
 800351e:	d100      	bne.n	8003522 <memset+0xa>
 8003520:	4770      	bx	lr
 8003522:	f803 1b01 	strb.w	r1, [r3], #1
 8003526:	e7f9      	b.n	800351c <memset+0x4>

08003528 <__libc_init_array>:
 8003528:	b570      	push	{r4, r5, r6, lr}
 800352a:	4d0d      	ldr	r5, [pc, #52]	@ (8003560 <__libc_init_array+0x38>)
 800352c:	4c0d      	ldr	r4, [pc, #52]	@ (8003564 <__libc_init_array+0x3c>)
 800352e:	1b64      	subs	r4, r4, r5
 8003530:	10a4      	asrs	r4, r4, #2
 8003532:	2600      	movs	r6, #0
 8003534:	42a6      	cmp	r6, r4
 8003536:	d109      	bne.n	800354c <__libc_init_array+0x24>
 8003538:	4d0b      	ldr	r5, [pc, #44]	@ (8003568 <__libc_init_array+0x40>)
 800353a:	4c0c      	ldr	r4, [pc, #48]	@ (800356c <__libc_init_array+0x44>)
 800353c:	f000 f818 	bl	8003570 <_init>
 8003540:	1b64      	subs	r4, r4, r5
 8003542:	10a4      	asrs	r4, r4, #2
 8003544:	2600      	movs	r6, #0
 8003546:	42a6      	cmp	r6, r4
 8003548:	d105      	bne.n	8003556 <__libc_init_array+0x2e>
 800354a:	bd70      	pop	{r4, r5, r6, pc}
 800354c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003550:	4798      	blx	r3
 8003552:	3601      	adds	r6, #1
 8003554:	e7ee      	b.n	8003534 <__libc_init_array+0xc>
 8003556:	f855 3b04 	ldr.w	r3, [r5], #4
 800355a:	4798      	blx	r3
 800355c:	3601      	adds	r6, #1
 800355e:	e7f2      	b.n	8003546 <__libc_init_array+0x1e>
 8003560:	080035b4 	.word	0x080035b4
 8003564:	080035b4 	.word	0x080035b4
 8003568:	080035b4 	.word	0x080035b4
 800356c:	080035b8 	.word	0x080035b8

08003570 <_init>:
 8003570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003572:	bf00      	nop
 8003574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003576:	bc08      	pop	{r3}
 8003578:	469e      	mov	lr, r3
 800357a:	4770      	bx	lr

0800357c <_fini>:
 800357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357e:	bf00      	nop
 8003580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003582:	bc08      	pop	{r3}
 8003584:	469e      	mov	lr, r3
 8003586:	4770      	bx	lr
